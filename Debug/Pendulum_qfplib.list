
Pendulum_qfplib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800b510  0800b510  0001b510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bafc  0800bafc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bafc  0800bafc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bafc  0800bafc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bafc  0800bafc  0001bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb00  0800bb00  0001bb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bb04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001e0  0800bce4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800bce4  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173f3  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb5  00000000  00000000  000375fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0003a5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  0003b658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7b7  00000000  00000000  0003c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001459e  00000000  00000000  00056db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f275  00000000  00000000  0006b355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa5ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005924  00000000  00000000  000fa620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b4f4 	.word	0x0800b4f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800b4f4 	.word	0x0800b4f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__gesf2>:
 8000d84:	f04f 3cff 	mov.w	ip, #4294967295
 8000d88:	e006      	b.n	8000d98 <__cmpsf2+0x4>
 8000d8a:	bf00      	nop

08000d8c <__lesf2>:
 8000d8c:	f04f 0c01 	mov.w	ip, #1
 8000d90:	e002      	b.n	8000d98 <__cmpsf2+0x4>
 8000d92:	bf00      	nop

08000d94 <__cmpsf2>:
 8000d94:	f04f 0c01 	mov.w	ip, #1
 8000d98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d011      	beq.n	8000dd4 <__cmpsf2+0x40>
 8000db0:	b001      	add	sp, #4
 8000db2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000db6:	bf18      	it	ne
 8000db8:	ea90 0f01 	teqne	r0, r1
 8000dbc:	bf58      	it	pl
 8000dbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc2:	bf88      	it	hi
 8000dc4:	17c8      	asrhi	r0, r1, #31
 8000dc6:	bf38      	it	cc
 8000dc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dcc:	bf18      	it	ne
 8000dce:	f040 0001 	orrne.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	d102      	bne.n	8000de0 <__cmpsf2+0x4c>
 8000dda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dde:	d105      	bne.n	8000dec <__cmpsf2+0x58>
 8000de0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de4:	d1e4      	bne.n	8000db0 <__cmpsf2+0x1c>
 8000de6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dea:	d0e1      	beq.n	8000db0 <__cmpsf2+0x1c>
 8000dec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_cfrcmple>:
 8000df4:	4684      	mov	ip, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4661      	mov	r1, ip
 8000dfa:	e7ff      	b.n	8000dfc <__aeabi_cfcmpeq>

08000dfc <__aeabi_cfcmpeq>:
 8000dfc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dfe:	f7ff ffc9 	bl	8000d94 <__cmpsf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	bf48      	it	mi
 8000e06:	f110 0f00 	cmnmi.w	r0, #0
 8000e0a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e0c <__aeabi_fcmpeq>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff fff4 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e14:	bf0c      	ite	eq
 8000e16:	2001      	moveq	r0, #1
 8000e18:	2000      	movne	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmplt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffea 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmple>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffe0 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e3c:	bf94      	ite	ls
 8000e3e:	2001      	movls	r0, #1
 8000e40:	2000      	movhi	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmpge>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffd2 	bl	8000df4 <__aeabi_cfrcmple>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpgt>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffc8 	bl	8000df4 <__aeabi_cfrcmple>
 8000e64:	bf34      	ite	cc
 8000e66:	2001      	movcc	r0, #1
 8000e68:	2000      	movcs	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_fcmpun>:
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	d102      	bne.n	8000e84 <__aeabi_fcmpun+0x14>
 8000e7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e82:	d108      	bne.n	8000e96 <__aeabi_fcmpun+0x26>
 8000e84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e88:	d102      	bne.n	8000e90 <__aeabi_fcmpun+0x20>
 8000e8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e8e:	d102      	bne.n	8000e96 <__aeabi_fcmpun+0x26>
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	4770      	bx	lr
 8000e96:	f04f 0001 	mov.w	r0, #1
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_f2iz>:
 8000e9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ea4:	d30f      	bcc.n	8000ec6 <__aeabi_f2iz+0x2a>
 8000ea6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eaa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eae:	d90d      	bls.n	8000ecc <__aeabi_f2iz+0x30>
 8000eb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eb8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ebc:	fa23 f002 	lsr.w	r0, r3, r2
 8000ec0:	bf18      	it	ne
 8000ec2:	4240      	negne	r0, r0
 8000ec4:	4770      	bx	lr
 8000ec6:	f04f 0000 	mov.w	r0, #0
 8000eca:	4770      	bx	lr
 8000ecc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_f2iz+0x3a>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d105      	bne.n	8000ee2 <__aeabi_f2iz+0x46>
 8000ed6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eda:	bf08      	it	eq
 8000edc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f04f 0000 	mov.w	r0, #0
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_d2lz>:
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	460c      	mov	r4, r1
 8000eec:	4605      	mov	r5, r0
 8000eee:	4621      	mov	r1, r4
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f7ff fd61 	bl	80009bc <__aeabi_dcmplt>
 8000efa:	b928      	cbnz	r0, 8000f08 <__aeabi_d2lz+0x20>
 8000efc:	4628      	mov	r0, r5
 8000efe:	4621      	mov	r1, r4
 8000f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f04:	f000 b80a 	b.w	8000f1c <__aeabi_d2ulz>
 8000f08:	4628      	mov	r0, r5
 8000f0a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f0e:	f000 f805 	bl	8000f1c <__aeabi_d2ulz>
 8000f12:	4240      	negs	r0, r0
 8000f14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	bf00      	nop

08000f1c <__aeabi_d2ulz>:
 8000f1c:	b5d0      	push	{r4, r6, r7, lr}
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <__aeabi_d2ulz+0x34>)
 8000f22:	4606      	mov	r6, r0
 8000f24:	460f      	mov	r7, r1
 8000f26:	f7ff fad7 	bl	80004d8 <__aeabi_dmul>
 8000f2a:	f7ff fdad 	bl	8000a88 <__aeabi_d2uiz>
 8000f2e:	4604      	mov	r4, r0
 8000f30:	f7ff fa58 	bl	80003e4 <__aeabi_ui2d>
 8000f34:	2200      	movs	r2, #0
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <__aeabi_d2ulz+0x38>)
 8000f38:	f7ff face 	bl	80004d8 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4630      	mov	r0, r6
 8000f42:	4639      	mov	r1, r7
 8000f44:	f7ff f910 	bl	8000168 <__aeabi_dsub>
 8000f48:	f7ff fd9e 	bl	8000a88 <__aeabi_d2uiz>
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f50:	3df00000 	.word	0x3df00000
 8000f54:	41f00000 	.word	0x41f00000

08000f58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a26      	ldr	r2, [pc, #152]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000f8a:	f043 0320 	orr.w	r3, r3, #32
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0320 	and.w	r3, r3, #32
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a20      	ldr	r2, [pc, #128]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_GPIO_Init+0xcc>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd2:	4815      	ldr	r0, [pc, #84]	; (8001028 <MX_GPIO_Init+0xd0>)
 8000fd4:	f003 fa72 	bl	80044bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2106      	movs	r1, #6
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <MX_GPIO_Init+0xd4>)
 8000fde:	f003 fa6d 	bl	80044bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <MX_GPIO_Init+0xd0>)
 8000ffc:	f003 f8da 	bl	80041b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8001000:	2306      	movs	r3, #6
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2302      	movs	r3, #2
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_GPIO_Init+0xd4>)
 8001018:	f003 f8cc 	bl	80041b4 <HAL_GPIO_Init>

}
 800101c:	bf00      	nop
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	40011000 	.word	0x40011000
 800102c:	40010800 	.word	0x40010800

08001030 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_I2C1_Init+0x50>)
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <MX_I2C1_Init+0x54>)
 8001038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_I2C1_Init+0x50>)
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_I2C1_Init+0x58>)
 800103e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_I2C1_Init+0x50>)
 800104e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001052:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_I2C1_Init+0x50>)
 800106e:	f003 fa57 	bl	8004520 <HAL_I2C_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001078:	f000 fdcc 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200002e4 	.word	0x200002e4
 8001084:	40005400 	.word	0x40005400
 8001088:	00061a80 	.word	0x00061a80

0800108c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <HAL_I2C_MspInit+0x70>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d123      	bne.n	80010f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_I2C_MspInit+0x74>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <HAL_I2C_MspInit+0x74>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_I2C_MspInit+0x74>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c4:	23c0      	movs	r3, #192	; 0xc0
 80010c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c8:	2312      	movs	r3, #18
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	480b      	ldr	r0, [pc, #44]	; (8001104 <HAL_I2C_MspInit+0x78>)
 80010d8:	f003 f86c 	bl	80041b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0x74>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_I2C_MspInit+0x74>)
 80010e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e6:	61d3      	str	r3, [r2, #28]
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_I2C_MspInit+0x74>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40005400 	.word	0x40005400
 8001100:	40021000 	.word	0x40021000
 8001104:	40010c00 	.word	0x40010c00

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b598      	push	{r3, r4, r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* Var Init*/

  targetAngle = 0.0;
 800110c:	4b7b      	ldr	r3, [pc, #492]	; (80012fc <main+0x1f4>)
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
  lastError = 0.0;
 8001114:	4b7a      	ldr	r3, [pc, #488]	; (8001300 <main+0x1f8>)
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	601a      	str	r2, [r3, #0]

  kp = 0;
 800111c:	4b79      	ldr	r3, [pc, #484]	; (8001304 <main+0x1fc>)
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
  ki = 0;
 8001124:	4b78      	ldr	r3, [pc, #480]	; (8001308 <main+0x200>)
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
  kd = 0;
 800112c:	4b77      	ldr	r3, [pc, #476]	; (800130c <main+0x204>)
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

  duty = 0;
 8001134:	4b76      	ldr	r3, [pc, #472]	; (8001310 <main+0x208>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
  counter = 0;
 800113a:	4b76      	ldr	r3, [pc, #472]	; (8001314 <main+0x20c>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
  counter2 = 0;
 8001140:	4b75      	ldr	r3, [pc, #468]	; (8001318 <main+0x210>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]

  CONTROL_ANGLE_LIMIT = 10;
 8001146:	4b75      	ldr	r3, [pc, #468]	; (800131c <main+0x214>)
 8001148:	4a75      	ldr	r2, [pc, #468]	; (8001320 <main+0x218>)
 800114a:	601a      	str	r2, [r3, #0]
  END_RISE_UP_ANGLE = 4;
 800114c:	4b75      	ldr	r3, [pc, #468]	; (8001324 <main+0x21c>)
 800114e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001152:	601a      	str	r2, [r3, #0]
  DITHERING_RATE = 0;
 8001154:	4b74      	ldr	r3, [pc, #464]	; (8001328 <main+0x220>)
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
  ANGLE_FILTER = 0.95; // 0.9-0.95 less filter delay - more noise
 800115c:	4b73      	ldr	r3, [pc, #460]	; (800132c <main+0x224>)
 800115e:	4a74      	ldr	r2, [pc, #464]	; (8001330 <main+0x228>)
 8001160:	601a      	str	r2, [r3, #0]
  GYRO_FIXRATE = 0.5;
 8001162:	4b74      	ldr	r3, [pc, #464]	; (8001334 <main+0x22c>)
 8001164:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001168:	601a      	str	r2, [r3, #0]
  GYRO_ANGLE_DELTA_LIMIT = 0.1;
 800116a:	4b73      	ldr	r3, [pc, #460]	; (8001338 <main+0x230>)
 800116c:	4a73      	ldr	r2, [pc, #460]	; (800133c <main+0x234>)
 800116e:	601a      	str	r2, [r3, #0]

  //taken from mpu6050.c
  accelxy_div = 16384.0;
 8001170:	4b73      	ldr	r3, [pc, #460]	; (8001340 <main+0x238>)
 8001172:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001176:	601a      	str	r2, [r3, #0]
  accelz_div = 14418.0;
 8001178:	4b72      	ldr	r3, [pc, #456]	; (8001344 <main+0x23c>)
 800117a:	4a73      	ldr	r2, [pc, #460]	; (8001348 <main+0x240>)
 800117c:	601a      	str	r2, [r3, #0]
  gyro_div = 131.0;
 800117e:	4b73      	ldr	r3, [pc, #460]	; (800134c <main+0x244>)
 8001180:	4a73      	ldr	r2, [pc, #460]	; (8001350 <main+0x248>)
 8001182:	601a      	str	r2, [r3, #0]

  //taken from previous calibration
  AccErrorX = 0.07;
 8001184:	4b73      	ldr	r3, [pc, #460]	; (8001354 <main+0x24c>)
 8001186:	4a74      	ldr	r2, [pc, #464]	; (8001358 <main+0x250>)
 8001188:	601a      	str	r2, [r3, #0]
  AccErrorY = -2.49;
 800118a:	4b74      	ldr	r3, [pc, #464]	; (800135c <main+0x254>)
 800118c:	4a74      	ldr	r2, [pc, #464]	; (8001360 <main+0x258>)
 800118e:	601a      	str	r2, [r3, #0]
  GyroErrorX = -4.79;
 8001190:	4b74      	ldr	r3, [pc, #464]	; (8001364 <main+0x25c>)
 8001192:	4a75      	ldr	r2, [pc, #468]	; (8001368 <main+0x260>)
 8001194:	601a      	str	r2, [r3, #0]
  GyroErrorY = 0.02;
 8001196:	4b75      	ldr	r3, [pc, #468]	; (800136c <main+0x264>)
 8001198:	4a75      	ldr	r2, [pc, #468]	; (8001370 <main+0x268>)
 800119a:	601a      	str	r2, [r3, #0]
  GyroErrorZ = -0.05;
 800119c:	4b75      	ldr	r3, [pc, #468]	; (8001374 <main+0x26c>)
 800119e:	4a76      	ldr	r2, [pc, #472]	; (8001378 <main+0x270>)
 80011a0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a2:	f002 fdc3 	bl	8003d2c <HAL_Init>

  /* USER CODE BEGIN Init */
  run = on;
 80011a6:	4b75      	ldr	r3, [pc, #468]	; (800137c <main+0x274>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
  state = equilibrium;
 80011ac:	4b74      	ldr	r3, [pc, #464]	; (8001380 <main+0x278>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b2:	f000 fc2b 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b6:	f7ff fecf 	bl	8000f58 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ba:	f7ff ff39 	bl	8001030 <MX_I2C1_Init>
  MX_TIM3_Init();
 80011be:	f002 fa71 	bl	80036a4 <MX_TIM3_Init>
  MX_TIM2_Init();
 80011c2:	f002 fa17 	bl	80035f4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80011c6:	f002 fb25 	bl	8003814 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //START TIM1
  HAL_TIM_Base_Start(&htim3);
 80011ca:	486e      	ldr	r0, [pc, #440]	; (8001384 <main+0x27c>)
 80011cc:	f004 fe12 	bl	8005df4 <HAL_TIM_Base_Start>

  while (MPU6050_Init(&hi2c1) == 1);
 80011d0:	bf00      	nop
 80011d2:	486d      	ldr	r0, [pc, #436]	; (8001388 <main+0x280>)
 80011d4:	f000 fd23 	bl	8001c1e <MPU6050_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d0f9      	beq.n	80011d2 <main+0xca>

  //START UART
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 80011de:	2201      	movs	r2, #1
 80011e0:	496a      	ldr	r1, [pc, #424]	; (800138c <main+0x284>)
 80011e2:	486b      	ldr	r0, [pc, #428]	; (8001390 <main+0x288>)
 80011e4:	f005 fca5 	bl	8006b32 <HAL_UART_Receive_IT>

  //START PWM
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	486a      	ldr	r0, [pc, #424]	; (8001394 <main+0x28c>)
 80011ec:	f004 fe9c 	bl	8005f28 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_1, 0);
 80011f0:	4b68      	ldr	r3, [pc, #416]	; (8001394 <main+0x28c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2200      	movs	r2, #0
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Program Started\r\n");
 80011f8:	4867      	ldr	r0, [pc, #412]	; (8001398 <main+0x290>)
 80011fa:	f006 fe0f 	bl	8007e1c <puts>
  HAL_Delay(2000);
 80011fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001202:	f002 fdf5 	bl	8003df0 <HAL_Delay>
  elapsedTime = 0;
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <main+0x294>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
  startTime = 0;
 800120c:	4b64      	ldr	r3, [pc, #400]	; (80013a0 <main+0x298>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
  prevTime = 0;
 8001212:	4b64      	ldr	r3, [pc, #400]	; (80013a4 <main+0x29c>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim3,0);  // Restart the counter value
 8001218:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <main+0x27c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	; 0x24

  while (1){

	  // Read data
	  if (I2C1->SR1 != 0x0){ //BERR or ARLO Flagged0
 8001220:	4b61      	ldr	r3, [pc, #388]	; (80013a8 <main+0x2a0>)
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <main+0x12c>
		  printf("SR1 cleared\r\n");
 8001228:	4860      	ldr	r0, [pc, #384]	; (80013ac <main+0x2a4>)
 800122a:	f006 fdf7 	bl	8007e1c <puts>
		  I2C1->SR1 = 0x0;
 800122e:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <main+0x2a0>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
	  }

	  MPU6050_Read();
 8001234:	f000 fc30 	bl	8001a98 <MPU6050_Read>

	  // Calculating Pitch from accelerometer data

	  //qfp form
	  AccY2 = qfp_fmul(AccY, AccY);
 8001238:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <main+0x2a8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a5c      	ldr	r2, [pc, #368]	; (80013b0 <main+0x2a8>)
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f001 f8e0 	bl	8002408 <qfp_fmul>
 8001248:	4603      	mov	r3, r0
 800124a:	4a5a      	ldr	r2, [pc, #360]	; (80013b4 <main+0x2ac>)
 800124c:	6013      	str	r3, [r2, #0]
	  AccZ2 = qfp_fmul(AccZ, AccZ);
 800124e:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <main+0x2b0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a59      	ldr	r2, [pc, #356]	; (80013b8 <main+0x2b0>)
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f001 f8d5 	bl	8002408 <qfp_fmul>
 800125e:	4603      	mov	r3, r0
 8001260:	4a56      	ldr	r2, [pc, #344]	; (80013bc <main+0x2b4>)
 8001262:	6013      	str	r3, [r2, #0]
	  denominator = qfp_fsqrt(qfp_fadd(AccY, AccZ));
 8001264:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <main+0x2a8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a53      	ldr	r2, [pc, #332]	; (80013b8 <main+0x2b0>)
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fd8e 	bl	8001d90 <qfp_fadd>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fad6 	bl	8002828 <qfp_fsqrt>
 800127c:	4603      	mov	r3, r0
 800127e:	4a50      	ldr	r2, [pc, #320]	; (80013c0 <main+0x2b8>)
 8001280:	6013      	str	r3, [r2, #0]
	  numerator = qfp_fmul(-1, AccX);
 8001282:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <main+0x2bc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	484f      	ldr	r0, [pc, #316]	; (80013c8 <main+0x2c0>)
 800128a:	f001 f8bd 	bl	8002408 <qfp_fmul>
 800128e:	4603      	mov	r3, r0
 8001290:	4a4e      	ldr	r2, [pc, #312]	; (80013cc <main+0x2c4>)
 8001292:	6013      	str	r3, [r2, #0]
	  aux = qfp_fatan2(numerator, denominator);
 8001294:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <main+0x2c4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <main+0x2b8>)
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fc54 	bl	8002b4c <qfp_fatan2>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <main+0x2c8>)
 80012a8:	6013      	str	r3, [r2, #0]
	  accPitch = qfp_fsub(qfp_fmul(aux, qfp_fdiv(180, PI)), AccErrorY);
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <main+0x2c8>)
 80012ac:	681c      	ldr	r4, [r3, #0]
 80012ae:	4949      	ldr	r1, [pc, #292]	; (80013d4 <main+0x2cc>)
 80012b0:	4849      	ldr	r0, [pc, #292]	; (80013d8 <main+0x2d0>)
 80012b2:	f001 f951 	bl	8002558 <qfp_fdiv>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4620      	mov	r0, r4
 80012bc:	f001 f8a4 	bl	8002408 <qfp_fmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <main+0x254>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4610      	mov	r0, r2
 80012ca:	f000 ff67 	bl	800219c <qfp_fsub>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a42      	ldr	r2, [pc, #264]	; (80013dc <main+0x2d4>)
 80012d2:	6013      	str	r3, [r2, #0]

	  //math.h form
	  //accPitch = (atan(-1 * AccX / sqrt(pow(AccY,2) + pow(AccZ,2))) * 180 / PI) - AccErrorY;

	  if(counter == 0){
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <main+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f040 8086 	bne.w	80013ea <main+0x2e2>
		  if(accPitch > 0){
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <main+0x2d4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f04f 0100 	mov.w	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fdb8 	bl	8000e5c <__aeabi_fcmpgt>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d078      	beq.n	80013e4 <main+0x2dc>
			  is_angle_positive = 1;
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <main+0x2d8>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e077      	b.n	80013ea <main+0x2e2>
 80012fa:	bf00      	nop
 80012fc:	2000026c 	.word	0x2000026c
 8001300:	20000278 	.word	0x20000278
 8001304:	200002d4 	.word	0x200002d4
 8001308:	20000284 	.word	0x20000284
 800130c:	20000220 	.word	0x20000220
 8001310:	200002c8 	.word	0x200002c8
 8001314:	20000288 	.word	0x20000288
 8001318:	200002e0 	.word	0x200002e0
 800131c:	2000021c 	.word	0x2000021c
 8001320:	41200000 	.word	0x41200000
 8001324:	20000264 	.word	0x20000264
 8001328:	200002c0 	.word	0x200002c0
 800132c:	20000208 	.word	0x20000208
 8001330:	3f733333 	.word	0x3f733333
 8001334:	20000280 	.word	0x20000280
 8001338:	200002d0 	.word	0x200002d0
 800133c:	3dcccccd 	.word	0x3dcccccd
 8001340:	20000254 	.word	0x20000254
 8001344:	2000023c 	.word	0x2000023c
 8001348:	46614800 	.word	0x46614800
 800134c:	20000234 	.word	0x20000234
 8001350:	43030000 	.word	0x43030000
 8001354:	20000298 	.word	0x20000298
 8001358:	3d8f5c29 	.word	0x3d8f5c29
 800135c:	20000294 	.word	0x20000294
 8001360:	c01f5c29 	.word	0xc01f5c29
 8001364:	200002c4 	.word	0x200002c4
 8001368:	c09947ae 	.word	0xc09947ae
 800136c:	200002b4 	.word	0x200002b4
 8001370:	3ca3d70a 	.word	0x3ca3d70a
 8001374:	20000260 	.word	0x20000260
 8001378:	bd4ccccd 	.word	0xbd4ccccd
 800137c:	200002a8 	.word	0x200002a8
 8001380:	2000025c 	.word	0x2000025c
 8001384:	200003ac 	.word	0x200003ac
 8001388:	200002e4 	.word	0x200002e4
 800138c:	20000390 	.word	0x20000390
 8001390:	2000043c 	.word	0x2000043c
 8001394:	200003f4 	.word	0x200003f4
 8001398:	0800b510 	.word	0x0800b510
 800139c:	20000218 	.word	0x20000218
 80013a0:	200002d8 	.word	0x200002d8
 80013a4:	20000290 	.word	0x20000290
 80013a8:	40005400 	.word	0x40005400
 80013ac:	0800b524 	.word	0x0800b524
 80013b0:	20000228 	.word	0x20000228
 80013b4:	20000238 	.word	0x20000238
 80013b8:	20000270 	.word	0x20000270
 80013bc:	2000024c 	.word	0x2000024c
 80013c0:	2000029c 	.word	0x2000029c
 80013c4:	200002a0 	.word	0x200002a0
 80013c8:	bf800000 	.word	0xbf800000
 80013cc:	20000230 	.word	0x20000230
 80013d0:	20000258 	.word	0x20000258
 80013d4:	40490ff9 	.word	0x40490ff9
 80013d8:	43340000 	.word	0x43340000
 80013dc:	200002dc 	.word	0x200002dc
 80013e0:	200002b8 	.word	0x200002b8
		  } else{
			  is_angle_positive = 0;
 80013e4:	4b90      	ldr	r3, [pc, #576]	; (8001628 <main+0x520>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
		  }
	  }
	  // Correct the outputs with the calculated error values
	  //qfp form
	  GyX = qfp_fsub(GyX, GyroErrorX);
 80013ea:	4b90      	ldr	r3, [pc, #576]	; (800162c <main+0x524>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a90      	ldr	r2, [pc, #576]	; (8001630 <main+0x528>)
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fed1 	bl	800219c <qfp_fsub>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a8b      	ldr	r2, [pc, #556]	; (800162c <main+0x524>)
 80013fe:	6013      	str	r3, [r2, #0]
	  GyY = qfp_fsub(GyY, GyroErrorY);
 8001400:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <main+0x52c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a8c      	ldr	r2, [pc, #560]	; (8001638 <main+0x530>)
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fec6 	bl	800219c <qfp_fsub>
 8001410:	4603      	mov	r3, r0
 8001412:	4a88      	ldr	r2, [pc, #544]	; (8001634 <main+0x52c>)
 8001414:	6013      	str	r3, [r2, #0]
	  GyZ = qfp_fsub(GyZ, GyroErrorZ);
 8001416:	4b89      	ldr	r3, [pc, #548]	; (800163c <main+0x534>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a89      	ldr	r2, [pc, #548]	; (8001640 <main+0x538>)
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f000 febb 	bl	800219c <qfp_fsub>
 8001426:	4603      	mov	r3, r0
 8001428:	4a84      	ldr	r2, [pc, #528]	; (800163c <main+0x534>)
 800142a:	6013      	str	r3, [r2, #0]

	  // COMPLEMENTARY FILTER
	  gyroAngleDelta = qfp_fmul(-1, GyZ);
 800142c:	4b83      	ldr	r3, [pc, #524]	; (800163c <main+0x534>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	4884      	ldr	r0, [pc, #528]	; (8001644 <main+0x53c>)
 8001434:	f000 ffe8 	bl	8002408 <qfp_fmul>
 8001438:	4603      	mov	r3, r0
 800143a:	4a83      	ldr	r2, [pc, #524]	; (8001648 <main+0x540>)
 800143c:	6013      	str	r3, [r2, #0]
	  gyroAngleDelta = qfp_fmul(gyroAngleDelta, dt);
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <main+0x540>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a82      	ldr	r2, [pc, #520]	; (800164c <main+0x544>)
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 ffdd 	bl	8002408 <qfp_fmul>
 800144e:	4603      	mov	r3, r0
 8001450:	4a7d      	ldr	r2, [pc, #500]	; (8001648 <main+0x540>)
 8001452:	6013      	str	r3, [r2, #0]
	  gyroAngleDelta = qfp_fmul(gyroAngleDelta, GYRO_FIXRATE);
 8001454:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <main+0x540>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a7d      	ldr	r2, [pc, #500]	; (8001650 <main+0x548>)
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f000 ffd2 	bl	8002408 <qfp_fmul>
 8001464:	4603      	mov	r3, r0
 8001466:	4a78      	ldr	r2, [pc, #480]	; (8001648 <main+0x540>)
 8001468:	6013      	str	r3, [r2, #0]


	  if(counter == 0){
 800146a:	4b7a      	ldr	r3, [pc, #488]	; (8001654 <main+0x54c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d103      	bne.n	800147a <main+0x372>
		  gyroAngle = accPitch;
 8001472:	4b79      	ldr	r3, [pc, #484]	; (8001658 <main+0x550>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a79      	ldr	r2, [pc, #484]	; (800165c <main+0x554>)
 8001478:	6013      	str	r3, [r2, #0]
	  }

	  if(abs(gyroAngleDelta) > GYRO_ANGLE_DELTA_LIMIT){
 800147a:	4b73      	ldr	r3, [pc, #460]	; (8001648 <main+0x540>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fd0c 	bl	8000e9c <__aeabi_f2iz>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	bfb8      	it	lt
 800148a:	425b      	neglt	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc25 	bl	8000cdc <__aeabi_i2f>
 8001492:	4602      	mov	r2, r0
 8001494:	4b72      	ldr	r3, [pc, #456]	; (8001660 <main+0x558>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f7ff fcde 	bl	8000e5c <__aeabi_fcmpgt>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <main+0x3a6>
		  gyroAngleDelta = 0;
 80014a6:	4b68      	ldr	r3, [pc, #416]	; (8001648 <main+0x540>)
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
	  }
	  gyroAngle = qfp_fadd(gyroAngle, gyroAngleDelta);
 80014ae:	4b6b      	ldr	r3, [pc, #428]	; (800165c <main+0x554>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a65      	ldr	r2, [pc, #404]	; (8001648 <main+0x540>)
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fc69 	bl	8001d90 <qfp_fadd>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a66      	ldr	r2, [pc, #408]	; (800165c <main+0x554>)
 80014c2:	6013      	str	r3, [r2, #0]

	  if(isnan(accPitch)) {
 80014c4:	4b64      	ldr	r3, [pc, #400]	; (8001658 <main+0x550>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fcd0 	bl	8000e70 <__aeabi_fcmpun>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <main+0x3d6>
		  accPitch = 0;
 80014d6:	4b60      	ldr	r3, [pc, #384]	; (8001658 <main+0x550>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
	  }


	  if(counter == 0){
 80014de:	4b5d      	ldr	r3, [pc, #372]	; (8001654 <main+0x54c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d104      	bne.n	80014f0 <main+0x3e8>
		  filteredAngle = accPitch;
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <main+0x550>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a5e      	ldr	r2, [pc, #376]	; (8001664 <main+0x55c>)
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e02d      	b.n	800154c <main+0x444>
	  } else{
		  filteredAngle = qfp_fmul(ANGLE_FILTER, qfp_fadd(filteredAngle, gyroAngleDelta));
 80014f0:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <main+0x560>)
 80014f2:	681c      	ldr	r4, [r3, #0]
 80014f4:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <main+0x55c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a53      	ldr	r2, [pc, #332]	; (8001648 <main+0x540>)
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fc46 	bl	8001d90 <qfp_fadd>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	4620      	mov	r0, r4
 800150a:	f000 ff7d 	bl	8002408 <qfp_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	4a54      	ldr	r2, [pc, #336]	; (8001664 <main+0x55c>)
 8001512:	6013      	str	r3, [r2, #0]
		  aux = qfp_fsub(1, ANGLE_FILTER);
 8001514:	4b54      	ldr	r3, [pc, #336]	; (8001668 <main+0x560>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800151e:	f000 fe3d 	bl	800219c <qfp_fsub>
 8001522:	4603      	mov	r3, r0
 8001524:	4a51      	ldr	r2, [pc, #324]	; (800166c <main+0x564>)
 8001526:	6013      	str	r3, [r2, #0]
		  filteredAngle = qfp_fadd(filteredAngle,  qfp_fmul(aux, accPitch));
 8001528:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <main+0x55c>)
 800152a:	681c      	ldr	r4, [r3, #0]
 800152c:	4b4f      	ldr	r3, [pc, #316]	; (800166c <main+0x564>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a49      	ldr	r2, [pc, #292]	; (8001658 <main+0x550>)
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f000 ff66 	bl	8002408 <qfp_fmul>
 800153c:	4603      	mov	r3, r0
 800153e:	4619      	mov	r1, r3
 8001540:	4620      	mov	r0, r4
 8001542:	f000 fc25 	bl	8001d90 <qfp_fadd>
 8001546:	4603      	mov	r3, r0
 8001548:	4a46      	ldr	r2, [pc, #280]	; (8001664 <main+0x55c>)
 800154a:	6013      	str	r3, [r2, #0]
	  }

	  counter++;
 800154c:	4b41      	ldr	r3, [pc, #260]	; (8001654 <main+0x54c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a40      	ldr	r2, [pc, #256]	; (8001654 <main+0x54c>)
 8001554:	6013      	str	r3, [r2, #0]
	  switch(run){
 8001556:	4b46      	ldr	r3, [pc, #280]	; (8001670 <main+0x568>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <main+0x45e>
 800155e:	2b01      	cmp	r3, #1
 8001560:	f000 8210 	beq.w	8001984 <main+0x87c>

		  elapsedTime = 0;
		  break;

	  default:
		  break;
 8001564:	e23b      	b.n	80019de <main+0x8d6>
		  dt_us = Get_dt_us();
 8001566:	f000 fb3d 	bl	8001be4 <Get_dt_us>
 800156a:	4603      	mov	r3, r0
 800156c:	4a41      	ldr	r2, [pc, #260]	; (8001674 <main+0x56c>)
 800156e:	6013      	str	r3, [r2, #0]
		  elapsedTime += dt_us;
 8001570:	4b41      	ldr	r3, [pc, #260]	; (8001678 <main+0x570>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <main+0x56c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4413      	add	r3, r2
 800157a:	4a3f      	ldr	r2, [pc, #252]	; (8001678 <main+0x570>)
 800157c:	6013      	str	r3, [r2, #0]
		  dt = qfp_fdiv(dt_us, 1000000);
 800157e:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <main+0x56c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fba6 	bl	8000cd4 <__aeabi_ui2f>
 8001588:	4603      	mov	r3, r0
 800158a:	493c      	ldr	r1, [pc, #240]	; (800167c <main+0x574>)
 800158c:	4618      	mov	r0, r3
 800158e:	f000 ffe3 	bl	8002558 <qfp_fdiv>
 8001592:	4603      	mov	r3, r0
 8001594:	4a2d      	ldr	r2, [pc, #180]	; (800164c <main+0x544>)
 8001596:	6013      	str	r3, [r2, #0]
		  switch(state){
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <main+0x578>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b02      	cmp	r3, #2
 800159e:	f000 8196 	beq.w	80018ce <main+0x7c6>
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	f300 81a7 	bgt.w	80018f6 <main+0x7ee>
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 8145 	beq.w	8001838 <main+0x730>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	f040 81a1 	bne.w	80018f6 <main+0x7ee>
			  aux = qfp_fmul(DITHERING_RATE, dt);
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <main+0x57c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a24      	ldr	r2, [pc, #144]	; (800164c <main+0x544>)
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 ff22 	bl	8002408 <qfp_fmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a29      	ldr	r2, [pc, #164]	; (800166c <main+0x564>)
 80015c8:	6013      	str	r3, [r2, #0]
			  if (filteredAngle < targetAngle){
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <main+0x55c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2e      	ldr	r2, [pc, #184]	; (8001688 <main+0x580>)
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fc23 	bl	8000e20 <__aeabi_fcmplt>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00b      	beq.n	80015f8 <main+0x4f0>
				  targetAngle = qfp_fadd(targetAngle, aux);
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <main+0x580>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a21      	ldr	r2, [pc, #132]	; (800166c <main+0x564>)
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fbd0 	bl	8001d90 <qfp_fadd>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a25      	ldr	r2, [pc, #148]	; (8001688 <main+0x580>)
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e00a      	b.n	800160e <main+0x506>
				  targetAngle = qfp_fsub(targetAngle, aux);
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <main+0x580>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <main+0x564>)
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fdca 	bl	800219c <qfp_fsub>
 8001608:	4603      	mov	r3, r0
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <main+0x580>)
 800160c:	6013      	str	r3, [r2, #0]
			  if (targetAngle < -5) targetAngle = -5;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <main+0x580>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	491e      	ldr	r1, [pc, #120]	; (800168c <main+0x584>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fc03 	bl	8000e20 <__aeabi_fcmplt>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d037      	beq.n	8001690 <main+0x588>
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <main+0x580>)
 8001622:	4a1a      	ldr	r2, [pc, #104]	; (800168c <main+0x584>)
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e03f      	b.n	80016a8 <main+0x5a0>
 8001628:	200002b8 	.word	0x200002b8
 800162c:	20000214 	.word	0x20000214
 8001630:	200002c4 	.word	0x200002c4
 8001634:	20000274 	.word	0x20000274
 8001638:	200002b4 	.word	0x200002b4
 800163c:	200002a4 	.word	0x200002a4
 8001640:	20000260 	.word	0x20000260
 8001644:	bf800000 	.word	0xbf800000
 8001648:	20000210 	.word	0x20000210
 800164c:	200002bc 	.word	0x200002bc
 8001650:	20000280 	.word	0x20000280
 8001654:	20000288 	.word	0x20000288
 8001658:	200002dc 	.word	0x200002dc
 800165c:	2000022c 	.word	0x2000022c
 8001660:	200002d0 	.word	0x200002d0
 8001664:	20000240 	.word	0x20000240
 8001668:	20000208 	.word	0x20000208
 800166c:	20000258 	.word	0x20000258
 8001670:	200002a8 	.word	0x200002a8
 8001674:	2000027c 	.word	0x2000027c
 8001678:	20000218 	.word	0x20000218
 800167c:	49742400 	.word	0x49742400
 8001680:	2000025c 	.word	0x2000025c
 8001684:	200002c0 	.word	0x200002c0
 8001688:	2000026c 	.word	0x2000026c
 800168c:	c0a00000 	.word	0xc0a00000
			  else if(targetAngle > 5) targetAngle = 5;
 8001690:	4b9f      	ldr	r3, [pc, #636]	; (8001910 <main+0x808>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	499f      	ldr	r1, [pc, #636]	; (8001914 <main+0x80c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fbe0 	bl	8000e5c <__aeabi_fcmpgt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <main+0x5a0>
 80016a2:	4b9b      	ldr	r3, [pc, #620]	; (8001910 <main+0x808>)
 80016a4:	4a9b      	ldr	r2, [pc, #620]	; (8001914 <main+0x80c>)
 80016a6:	601a      	str	r2, [r3, #0]
			  error = qfp_fsub(targetAngle, filteredAngle);
 80016a8:	4b99      	ldr	r3, [pc, #612]	; (8001910 <main+0x808>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a9a      	ldr	r2, [pc, #616]	; (8001918 <main+0x810>)
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fd72 	bl	800219c <qfp_fsub>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a98      	ldr	r2, [pc, #608]	; (800191c <main+0x814>)
 80016bc:	6013      	str	r3, [r2, #0]
			  dError = qfp_fdiv(qfp_fsub(error, lastError), dt);
 80016be:	4b97      	ldr	r3, [pc, #604]	; (800191c <main+0x814>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a97      	ldr	r2, [pc, #604]	; (8001920 <main+0x818>)
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fd67 	bl	800219c <qfp_fsub>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b94      	ldr	r3, [pc, #592]	; (8001924 <main+0x81c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f000 ff3e 	bl	8002558 <qfp_fdiv>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a92      	ldr	r2, [pc, #584]	; (8001928 <main+0x820>)
 80016e0:	6013      	str	r3, [r2, #0]
			  lastError = error;
 80016e2:	4b8e      	ldr	r3, [pc, #568]	; (800191c <main+0x814>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a8e      	ldr	r2, [pc, #568]	; (8001920 <main+0x818>)
 80016e8:	6013      	str	r3, [r2, #0]
			  if(counter2 == 0){
 80016ea:	4b90      	ldr	r3, [pc, #576]	; (800192c <main+0x824>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <main+0x5f2>
				  dError = 0;
 80016f2:	4b8d      	ldr	r3, [pc, #564]	; (8001928 <main+0x820>)
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
			  sumError = qfp_fadd(sumError, qfp_fmul(error, dt));
 80016fa:	4b8d      	ldr	r3, [pc, #564]	; (8001930 <main+0x828>)
 80016fc:	681c      	ldr	r4, [r3, #0]
 80016fe:	4b87      	ldr	r3, [pc, #540]	; (800191c <main+0x814>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a88      	ldr	r2, [pc, #544]	; (8001924 <main+0x81c>)
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fe7d 	bl	8002408 <qfp_fmul>
 800170e:	4603      	mov	r3, r0
 8001710:	4619      	mov	r1, r3
 8001712:	4620      	mov	r0, r4
 8001714:	f000 fb3c 	bl	8001d90 <qfp_fadd>
 8001718:	4603      	mov	r3, r0
 800171a:	4a85      	ldr	r2, [pc, #532]	; (8001930 <main+0x828>)
 800171c:	6013      	str	r3, [r2, #0]
			  if (sumError < -DUTY_MAX*ICF) sumError = -DUTY_MAX*ICF;
 800171e:	4b84      	ldr	r3, [pc, #528]	; (8001930 <main+0x828>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fe80 	bl	8000428 <__aeabi_f2d>
 8001728:	a375      	add	r3, pc, #468	; (adr r3, 8001900 <main+0x7f8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7ff f945 	bl	80009bc <__aeabi_dcmplt>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <main+0x638>
 8001738:	4b7d      	ldr	r3, [pc, #500]	; (8001930 <main+0x828>)
 800173a:	4a7e      	ldr	r2, [pc, #504]	; (8001934 <main+0x82c>)
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e00f      	b.n	8001760 <main+0x658>
			  else if(sumError > DUTY_MAX*ICF) sumError = DUTY_MAX*ICF;
 8001740:	4b7b      	ldr	r3, [pc, #492]	; (8001930 <main+0x828>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fe6f 	bl	8000428 <__aeabi_f2d>
 800174a:	a36f      	add	r3, pc, #444	; (adr r3, 8001908 <main+0x800>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f952 	bl	80009f8 <__aeabi_dcmpgt>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <main+0x658>
 800175a:	4b75      	ldr	r3, [pc, #468]	; (8001930 <main+0x828>)
 800175c:	4a76      	ldr	r2, [pc, #472]	; (8001938 <main+0x830>)
 800175e:	601a      	str	r2, [r3, #0]
			  pid = qfp_fadd(qfp_fadd(qfp_fmul(kp, error), qfp_fmul(kd, dError)), qfp_fmul(ki, sumError));
 8001760:	4b76      	ldr	r3, [pc, #472]	; (800193c <main+0x834>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6d      	ldr	r2, [pc, #436]	; (800191c <main+0x814>)
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fe4c 	bl	8002408 <qfp_fmul>
 8001770:	4604      	mov	r4, r0
 8001772:	4b73      	ldr	r3, [pc, #460]	; (8001940 <main+0x838>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6c      	ldr	r2, [pc, #432]	; (8001928 <main+0x820>)
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fe43 	bl	8002408 <qfp_fmul>
 8001782:	4603      	mov	r3, r0
 8001784:	4619      	mov	r1, r3
 8001786:	4620      	mov	r0, r4
 8001788:	f000 fb02 	bl	8001d90 <qfp_fadd>
 800178c:	4604      	mov	r4, r0
 800178e:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <main+0x83c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a67      	ldr	r2, [pc, #412]	; (8001930 <main+0x828>)
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fe35 	bl	8002408 <qfp_fmul>
 800179e:	4603      	mov	r3, r0
 80017a0:	4619      	mov	r1, r3
 80017a2:	4620      	mov	r0, r4
 80017a4:	f000 faf4 	bl	8001d90 <qfp_fadd>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a67      	ldr	r2, [pc, #412]	; (8001948 <main+0x840>)
 80017ac:	6013      	str	r3, [r2, #0]
			  control = pid;
 80017ae:	4b66      	ldr	r3, [pc, #408]	; (8001948 <main+0x840>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a66      	ldr	r2, [pc, #408]	; (800194c <main+0x844>)
 80017b4:	6013      	str	r3, [r2, #0]
			  if (control < -DUTY_MAX) control = -DUTY_MAX;
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <main+0x844>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4965      	ldr	r1, [pc, #404]	; (8001950 <main+0x848>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fb2f 	bl	8000e20 <__aeabi_fcmplt>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <main+0x6c8>
 80017c8:	4b60      	ldr	r3, [pc, #384]	; (800194c <main+0x844>)
 80017ca:	4a61      	ldr	r2, [pc, #388]	; (8001950 <main+0x848>)
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e00b      	b.n	80017e8 <main+0x6e0>
			  else if(control > DUTY_MAX) control = DUTY_MAX;
 80017d0:	4b5e      	ldr	r3, [pc, #376]	; (800194c <main+0x844>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	495f      	ldr	r1, [pc, #380]	; (8001954 <main+0x84c>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fb40 	bl	8000e5c <__aeabi_fcmpgt>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <main+0x6e0>
 80017e2:	4b5a      	ldr	r3, [pc, #360]	; (800194c <main+0x844>)
 80017e4:	4a5b      	ldr	r2, [pc, #364]	; (8001954 <main+0x84c>)
 80017e6:	601a      	str	r2, [r3, #0]
			  if(control > 0.0){
 80017e8:	4b58      	ldr	r3, [pc, #352]	; (800194c <main+0x844>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fb33 	bl	8000e5c <__aeabi_fcmpgt>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <main+0x6fc>
				  Set_DIR(1);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f000 f9cd 	bl	8001b9c <Set_DIR>
 8001802:	e002      	b.n	800180a <main+0x702>
				  Set_DIR(0);
 8001804:	2000      	movs	r0, #0
 8001806:	f000 f9c9 	bl	8001b9c <Set_DIR>
			  duty = (uint32_t) abs(control); // first take the sign away and then cast to uint32_t
 800180a:	4b50      	ldr	r3, [pc, #320]	; (800194c <main+0x844>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fb44 	bl	8000e9c <__aeabi_f2iz>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bfb8      	it	lt
 800181a:	425b      	neglt	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <main+0x850>)
 8001820:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <main+0x854>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a4c      	ldr	r2, [pc, #304]	; (8001958 <main+0x850>)
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
			  counter2++;
 800182c:	4b3f      	ldr	r3, [pc, #252]	; (800192c <main+0x824>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	4a3e      	ldr	r2, [pc, #248]	; (800192c <main+0x824>)
 8001834:	6013      	str	r3, [r2, #0]
			  break;
 8001836:	e05f      	b.n	80018f8 <main+0x7f0>
			  if (elapsedTime < riseup_time1){ // elapsed time in microseconds
 8001838:	4b49      	ldr	r3, [pc, #292]	; (8001960 <main+0x858>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a49      	ldr	r2, [pc, #292]	; (8001964 <main+0x85c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d810      	bhi.n	8001864 <main+0x75c>
				  if (is_angle_positive){
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <main+0x860>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <main+0x74a>
					  Set_DIR(1);
 800184a:	2001      	movs	r0, #1
 800184c:	f000 f9a6 	bl	8001b9c <Set_DIR>
 8001850:	e002      	b.n	8001858 <main+0x750>
					  Set_DIR(0);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f9a2 	bl	8001b9c <Set_DIR>
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, RISE_UP_DUTY);
 8001858:	4b40      	ldr	r3, [pc, #256]	; (800195c <main+0x854>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f240 726c 	movw	r2, #1900	; 0x76c
 8001860:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8001862:	e049      	b.n	80018f8 <main+0x7f0>
			  } else if (elapsedTime < riseup_time2){
 8001864:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <main+0x858>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a40      	ldr	r2, [pc, #256]	; (800196c <main+0x864>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d828      	bhi.n	80018c0 <main+0x7b8>
				  if (is_angle_positive){
 800186e:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <main+0x860>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <main+0x776>
					  Set_DIR(0);
 8001876:	2000      	movs	r0, #0
 8001878:	f000 f990 	bl	8001b9c <Set_DIR>
 800187c:	e002      	b.n	8001884 <main+0x77c>
					  Set_DIR(1);
 800187e:	2001      	movs	r0, #1
 8001880:	f000 f98c 	bl	8001b9c <Set_DIR>
				  if(abs(filteredAngle) < END_RISE_UP_ANGLE){
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <main+0x810>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb07 	bl	8000e9c <__aeabi_f2iz>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	bfb8      	it	lt
 8001894:	425b      	neglt	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fa20 	bl	8000cdc <__aeabi_i2f>
 800189c:	4602      	mov	r2, r0
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <main+0x868>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4610      	mov	r0, r2
 80018a6:	f7ff fabb 	bl	8000e20 <__aeabi_fcmplt>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d100      	bne.n	80018b2 <main+0x7aa>
			  break;
 80018b0:	e022      	b.n	80018f8 <main+0x7f0>
					  printf("Rise up success\r\n");
 80018b2:	4830      	ldr	r0, [pc, #192]	; (8001974 <main+0x86c>)
 80018b4:	f006 fab2 	bl	8007e1c <puts>
					  state = equilibrium;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <main+0x870>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
			  break;
 80018be:	e01b      	b.n	80018f8 <main+0x7f0>
				  printf("Rise up sequence failed, turning off\r\n");
 80018c0:	482e      	ldr	r0, [pc, #184]	; (800197c <main+0x874>)
 80018c2:	f006 faab 	bl	8007e1c <puts>
				  run = off;
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <main+0x878>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
			  break;
 80018cc:	e014      	b.n	80018f8 <main+0x7f0>
			  Set_DIR(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f000 f964 	bl	8001b9c <Set_DIR>
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, DUTY_MAX);
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <main+0x854>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80018dc:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(5000);
 80018de:	f241 3088 	movw	r0, #5000	; 0x1388
 80018e2:	f002 fa85 	bl	8003df0 <HAL_Delay>
			  Set_DIR(0);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f958 	bl	8001b9c <Set_DIR>
			  HAL_Delay(5000);
 80018ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80018f0:	f002 fa7e 	bl	8003df0 <HAL_Delay>
			  break;
 80018f4:	e000      	b.n	80018f8 <main+0x7f0>
			  break;
 80018f6:	bf00      	nop
		  break;
 80018f8:	e071      	b.n	80019de <main+0x8d6>
 80018fa:	bf00      	nop
 80018fc:	f3af 8000 	nop.w
 8001900:	cccccccd 	.word	0xcccccccd
 8001904:	c048fccc 	.word	0xc048fccc
 8001908:	cccccccd 	.word	0xcccccccd
 800190c:	4048fccc 	.word	0x4048fccc
 8001910:	2000026c 	.word	0x2000026c
 8001914:	40a00000 	.word	0x40a00000
 8001918:	20000240 	.word	0x20000240
 800191c:	200002b0 	.word	0x200002b0
 8001920:	20000278 	.word	0x20000278
 8001924:	200002bc 	.word	0x200002bc
 8001928:	20000268 	.word	0x20000268
 800192c:	200002e0 	.word	0x200002e0
 8001930:	20000248 	.word	0x20000248
 8001934:	c247e666 	.word	0xc247e666
 8001938:	4247e666 	.word	0x4247e666
 800193c:	200002d4 	.word	0x200002d4
 8001940:	20000220 	.word	0x20000220
 8001944:	20000284 	.word	0x20000284
 8001948:	20000224 	.word	0x20000224
 800194c:	2000020c 	.word	0x2000020c
 8001950:	c4f9e000 	.word	0xc4f9e000
 8001954:	44f9e000 	.word	0x44f9e000
 8001958:	200002c8 	.word	0x200002c8
 800195c:	200003f4 	.word	0x200003f4
 8001960:	20000218 	.word	0x20000218
 8001964:	002dc6bf 	.word	0x002dc6bf
 8001968:	200002b8 	.word	0x200002b8
 800196c:	003d08ff 	.word	0x003d08ff
 8001970:	20000264 	.word	0x20000264
 8001974:	0800b534 	.word	0x0800b534
 8001978:	2000025c 	.word	0x2000025c
 800197c:	0800b548 	.word	0x0800b548
 8001980:	200002a8 	.word	0x200002a8
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <main+0x8d8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2200      	movs	r2, #0
 800198a:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800198c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001990:	4814      	ldr	r0, [pc, #80]	; (80019e4 <main+0x8dc>)
 8001992:	f002 fdab 	bl	80044ec <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8001996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800199a:	f002 fa29 	bl	8003df0 <HAL_Delay>
		  printf("Waiting...\r\n");
 800199e:	4812      	ldr	r0, [pc, #72]	; (80019e8 <main+0x8e0>)
 80019a0:	f006 fa3c 	bl	8007e1c <puts>
		  targetAngle = 0.0;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <main+0x8e4>)
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
		  lastError = 0.0;
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <main+0x8e8>)
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
		  dError = 0.0;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <main+0x8ec>)
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
		  sumError = 0.0;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <main+0x8f0>)
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
		  duty = 0;
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <main+0x8f4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
		  counter = 0;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <main+0x8f8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
		  counter2 = 0;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <main+0x8fc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
		  elapsedTime = 0;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <main+0x900>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
		  break;
 80019dc:	bf00      	nop
	  if (I2C1->SR1 != 0x0){ //BERR or ARLO Flagged0
 80019de:	e41f      	b.n	8001220 <main+0x118>
 80019e0:	200003f4 	.word	0x200003f4
 80019e4:	40011000 	.word	0x40011000
 80019e8:	0800b570 	.word	0x0800b570
 80019ec:	2000026c 	.word	0x2000026c
 80019f0:	20000278 	.word	0x20000278
 80019f4:	20000268 	.word	0x20000268
 80019f8:	20000248 	.word	0x20000248
 80019fc:	200002c8 	.word	0x200002c8
 8001a00:	20000288 	.word	0x20000288
 8001a04:	200002e0 	.word	0x200002e0
 8001a08:	20000218 	.word	0x20000218

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b090      	sub	sp, #64	; 0x40
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	2228      	movs	r2, #40	; 0x28
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fd10 	bl	8007440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a40:	2302      	movs	r3, #2
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0318 	add.w	r3, r7, #24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 fd63 	bl	8005520 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a60:	f000 f8d8 	bl	8001c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 ffce 	bl	8005a20 <HAL_RCC_ClockConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a8a:	f000 f8c3 	bl	8001c14 <Error_Handler>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3740      	adds	r7, #64	; 0x40
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <MPU6050_Read>:
float measure_calc_routine_duration(){
	return (float)HAL_GetTick()/counter2;

}

void MPU6050_Read(){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001a9c:	4934      	ldr	r1, [pc, #208]	; (8001b70 <MPU6050_Read+0xd8>)
 8001a9e:	4835      	ldr	r0, [pc, #212]	; (8001b74 <MPU6050_Read+0xdc>)
 8001aa0:	f000 f914 	bl	8001ccc <MPU6050_Read_Accel>
	MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8001aa4:	4932      	ldr	r1, [pc, #200]	; (8001b70 <MPU6050_Read+0xd8>)
 8001aa6:	4833      	ldr	r0, [pc, #204]	; (8001b74 <MPU6050_Read+0xdc>)
 8001aa8:	f000 f941 	bl	8001d2e <MPU6050_Read_Gyro>

	//cast raw values to int32_t, make them fix16_t and divide by corrector value from mpu6050.c
	AccX = qfp_fdiv((float)MPU6050.Accel_X_RAW, accelxy_div);
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <MPU6050_Read+0xd8>)
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f912 	bl	8000cdc <__aeabi_i2f>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <MPU6050_Read+0xe0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f000 fd49 	bl	8002558 <qfp_fdiv>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <MPU6050_Read+0xe4>)
 8001aca:	6013      	str	r3, [r2, #0]
	AccY = qfp_fdiv((float)MPU6050.Accel_Y_RAW, accelxy_div);
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <MPU6050_Read+0xd8>)
 8001ace:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f902 	bl	8000cdc <__aeabi_i2f>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <MPU6050_Read+0xe0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f000 fd39 	bl	8002558 <qfp_fdiv>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <MPU6050_Read+0xe8>)
 8001aea:	6013      	str	r3, [r2, #0]
	AccZ = qfp_fdiv((float)MPU6050.Accel_Z_RAW, accelz_div);
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <MPU6050_Read+0xd8>)
 8001aee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f8f2 	bl	8000cdc <__aeabi_i2f>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <MPU6050_Read+0xec>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4619      	mov	r1, r3
 8001b00:	4610      	mov	r0, r2
 8001b02:	f000 fd29 	bl	8002558 <qfp_fdiv>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <MPU6050_Read+0xf0>)
 8001b0a:	6013      	str	r3, [r2, #0]
	GyX = qfp_fdiv((float)MPU6050.Gyro_X_RAW, gyro_div);
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MPU6050_Read+0xd8>)
 8001b0e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f8e2 	bl	8000cdc <__aeabi_i2f>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MPU6050_Read+0xf4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f000 fd19 	bl	8002558 <qfp_fdiv>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <MPU6050_Read+0xf8>)
 8001b2a:	6013      	str	r3, [r2, #0]
	GyY = qfp_fdiv((float)MPU6050.Gyro_Y_RAW, gyro_div);
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <MPU6050_Read+0xd8>)
 8001b2e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f8d2 	bl	8000cdc <__aeabi_i2f>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MPU6050_Read+0xf4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4610      	mov	r0, r2
 8001b42:	f000 fd09 	bl	8002558 <qfp_fdiv>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MPU6050_Read+0xfc>)
 8001b4a:	6013      	str	r3, [r2, #0]
	GyZ = qfp_fdiv((float)MPU6050.Gyro_Z_RAW, gyro_div);
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <MPU6050_Read+0xd8>)
 8001b4e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f8c2 	bl	8000cdc <__aeabi_i2f>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MPU6050_Read+0xf4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4610      	mov	r0, r2
 8001b62:	f000 fcf9 	bl	8002558 <qfp_fdiv>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <MPU6050_Read+0x100>)
 8001b6a:	6013      	str	r3, [r2, #0]

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000338 	.word	0x20000338
 8001b74:	200002e4 	.word	0x200002e4
 8001b78:	20000254 	.word	0x20000254
 8001b7c:	200002a0 	.word	0x200002a0
 8001b80:	20000228 	.word	0x20000228
 8001b84:	2000023c 	.word	0x2000023c
 8001b88:	20000270 	.word	0x20000270
 8001b8c:	20000234 	.word	0x20000234
 8001b90:	20000214 	.word	0x20000214
 8001b94:	20000274 	.word	0x20000274
 8001b98:	200002a4 	.word	0x200002a4

08001b9c <Set_DIR>:

void Set_DIR(uint8_t dir){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
	if(dir == 1){
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10a      	bne.n	8001bc2 <Set_DIR+0x26>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	2102      	movs	r1, #2
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <Set_DIR+0x44>)
 8001bb2:	f002 fc83 	bl	80044bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2104      	movs	r1, #4
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <Set_DIR+0x44>)
 8001bbc:	f002 fc7e 	bl	80044bc <HAL_GPIO_WritePin>
	} else{
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, RESET);
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, SET);
	}
}
 8001bc0:	e009      	b.n	8001bd6 <Set_DIR+0x3a>
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	4806      	ldr	r0, [pc, #24]	; (8001be0 <Set_DIR+0x44>)
 8001bc8:	f002 fc78 	bl	80044bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2104      	movs	r1, #4
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <Set_DIR+0x44>)
 8001bd2:	f002 fc73 	bl	80044bc <HAL_GPIO_WritePin>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40010800 	.word	0x40010800

08001be4 <Get_dt_us>:

uint32_t Get_dt_us(){
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
	uint32_t dt_us;
	dt_us = __HAL_TIM_GET_COUNTER(&htim3)*10;  // TIM3 clock 0.1MHz which is 10us per tick
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <Get_dt_us+0x2c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0);  // Restart the counter value
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <Get_dt_us+0x2c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
	return dt_us;
 8001c02:	687b      	ldr	r3, [r7, #4]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200003ac 	.word	0x200003ac

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <Error_Handler+0x8>

08001c1e <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b088      	sub	sp, #32
 8001c22:	af04      	add	r7, sp, #16
 8001c24:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001c26:	2364      	movs	r3, #100	; 0x64
 8001c28:	9302      	str	r3, [sp, #8]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	f107 030f 	add.w	r3, r7, #15
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2301      	movs	r3, #1
 8001c36:	2275      	movs	r2, #117	; 0x75
 8001c38:	21d0      	movs	r1, #208	; 0xd0
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f002 feae 	bl	800499c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b68      	cmp	r3, #104	; 0x68
 8001c44:	d13d      	bne.n	8001cc2 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001c4a:	2364      	movs	r3, #100	; 0x64
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	f107 030e 	add.w	r3, r7, #14
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	226b      	movs	r2, #107	; 0x6b
 8001c5c:	21d0      	movs	r1, #208	; 0xd0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f002 fda2 	bl	80047a8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001c64:	2307      	movs	r3, #7
 8001c66:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001c68:	2364      	movs	r3, #100	; 0x64
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	f107 030e 	add.w	r3, r7, #14
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2301      	movs	r3, #1
 8001c78:	2219      	movs	r2, #25
 8001c7a:	21d0      	movs	r1, #208	; 0xd0
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f002 fd93 	bl	80047a8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001c86:	2364      	movs	r3, #100	; 0x64
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	f107 030e 	add.w	r3, r7, #14
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2301      	movs	r3, #1
 8001c96:	221c      	movs	r2, #28
 8001c98:	21d0      	movs	r1, #208	; 0xd0
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f002 fd84 	bl	80047a8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ca4:	2364      	movs	r3, #100	; 0x64
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	f107 030e 	add.w	r3, r7, #14
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	221b      	movs	r2, #27
 8001cb6:	21d0      	movs	r1, #208	; 0xd0
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f002 fd75 	bl	80047a8 <HAL_I2C_Mem_Write>
        return 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <MPU6050_Init+0xa6>
    }
    return 1;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af04      	add	r7, sp, #16
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001cd6:	2364      	movs	r3, #100	; 0x64
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2306      	movs	r3, #6
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	223b      	movs	r2, #59	; 0x3b
 8001ce8:	21d0      	movs	r1, #208	; 0xd0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f002 fe56 	bl	800499c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001cf0:	7a3b      	ldrb	r3, [r7, #8]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	7a7b      	ldrb	r3, [r7, #9]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001d02:	7abb      	ldrb	r3, [r7, #10]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001d14:	7b3b      	ldrb	r3, [r7, #12]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	7b7b      	ldrb	r3, [r7, #13]
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	809a      	strh	r2, [r3, #4]

    //commented to save time
    //DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
    //DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    //DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b088      	sub	sp, #32
 8001d32:	af04      	add	r7, sp, #16
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001d38:	2364      	movs	r3, #100	; 0x64
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	2243      	movs	r2, #67	; 0x43
 8001d4a:	21d0      	movs	r1, #208	; 0xd0
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f002 fe25 	bl	800499c <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001d52:	7a3b      	ldrb	r3, [r7, #8]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	7a7b      	ldrb	r3, [r7, #9]
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001d64:	7abb      	ldrb	r3, [r7, #10]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	4313      	orrs	r3, r2
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	849a      	strh	r2, [r3, #36]	; 0x24

    //commented to save time
    //DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
    //DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
    //DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <qfp_fadd>:

.section .text.qfp.faddfsub,"ax",%progbits
.balign 4
.thumb_func
qfp_fadd:
 ubfx r2,r0,#23,#8        @ extract exponents
 8001d90:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 ubfx r3,r1,#23,#8
 8001d94:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 cbz r3,0f                @ y 0/denormal?
 8001d98:	b363      	cbz	r3, 8001df4 <fadd_pp+0x44>
10:
 cbz r2,1f                @ x 0/denormal?
 8001d9a:	b3e2      	cbz	r2, 8001e16 <fadd_pp+0x66>
20:
 cmp r3,#0xff             @ y Inf/NaN?
 8001d9c:	2bff      	cmp	r3, #255	; 0xff
 beq 2f
 8001d9e:	d05d      	beq.n	8001e5c <fadd_pp+0xac>
 cmp r2,#0xff             @ x Inf/NaN?
 8001da0:	2aff      	cmp	r2, #255	; 0xff
 beq 3f
 8001da2:	d04a      	beq.n	8001e3a <fadd_pp+0x8a>

 lsls r1,#1               @ shift up y, test sign
 8001da4:	0049      	lsls	r1, r1, #1
 bcs fadd_m
 8001da6:	f080 8183 	bcs.w	80020b0 <fadd_m>
 lsls r0,#1               @ shift up x, test sign
 8001daa:	0040      	lsls	r0, r0, #1
 bcs fadd_mp
 8001dac:	f080 80c9 	bcs.w	8001f42 <fadd_mp>

08001db0 <fadd_pp>:

fadd_pp:                  @ positive+positive
 movs r12,#1              @ insert implied 1:s
 8001db0:	f05f 0c01 	movs.w	ip, #1
 bfi r0,r12,#24,#8
 8001db4:	f36c 601f 	bfi	r0, ip, #24, #8
 bfi r1,r12,#24,#8
 8001db8:	f36c 611f 	bfi	r1, ip, #24, #8
 subs r12,r2,r3           @ difference of exponents
 8001dbc:	ebb2 0c03 	subs.w	ip, r2, r3
 bmi 104f                 @ ye>xe?
 8001dc0:	f100 808e 	bmi.w	8001ee0 <fadd_pp+0x130>
 fadd_s0a r0,r1,r2,r3,0   @ fadd_pp is continued below
 8001dc4:	f1dc 031f 	rsbs	r3, ip, #31
 8001dc8:	f100 8082 	bmi.w	8001ed0 <fadd_pp+0x120>
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	fa21 f10c 	lsr.w	r1, r1, ip
 8001dd4:	1840      	adds	r0, r0, r1
 8001dd6:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8001dda:	d26d      	bcs.n	8001eb8 <fadd_pp+0x108>
 8001ddc:	f1a0 7080 	sub.w	r0, r0, #16777216	; 0x1000000
 8001de0:	0840      	lsrs	r0, r0, #1
 8001de2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	bf18      	it	ne
 8001dea:	4770      	bxne	lr
 8001dec:	bf28      	it	cs
 8001dee:	f020 0001 	biccs.w	r0, r0, #1
 8001df2:	4770      	bx	lr

0:                        @ here y 0/denormal
 cmp r2,#0x80
 8001df4:	2a80      	cmp	r2, #128	; 0x80
 bge 30f                  @ x exponent large? treat y as zero
 8001df6:	da1d      	bge.n	8001e34 <fadd_pp+0x84>
 cmp r2,#0
 8001df8:	2a00      	cmp	r2, #0
 beq 50f                  @ x also 0/denormal?
 8001dfa:	d049      	beq.n	8001e90 <fadd_pp+0xe0>
 lsr r12,r1,#31           @ save y sign
 8001dfc:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 lsls r1,#1               @ shift out y sign bit
 8001e00:	0049      	lsls	r1, r1, #1
 clz r3,r1                @ normalise y
 8001e02:	fab1 f381 	clz	r3, r1
 lsls r1,r3
 8001e06:	4099      	lsls	r1, r3
 beq 30f                  @ y zero?
 8001e08:	d014      	beq.n	8001e34 <fadd_pp+0x84>
 lsrs r1,#8               @ shift back to Q23 position
 8001e0a:	0a09      	lsrs	r1, r1, #8
 orr r1,r1,r12,lsl#31     @ restore sign
 8001e0c:	ea41 71cc 	orr.w	r1, r1, ip, lsl #31
 rsb r3,#8                @ adjust exponent
 8001e10:	f1c3 0308 	rsb	r3, r3, #8
 b 10b                    @ and continue, treating y as normal value
 8001e14:	e7c1      	b.n	8001d9a <qfp_fadd+0xa>

1:                        @ here x 0/denormal
 cmp r3,#0x80
 8001e16:	2b80      	cmp	r3, #128	; 0x80
 bge 40f                  @ y exponent large? treat x as zero
 8001e18:	da16      	bge.n	8001e48 <fadd_pp+0x98>
 lsr r12,r0,#31           @ save x sign
 8001e1a:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
 lsls r0,#1               @ shift out x sign bit
 8001e1e:	0040      	lsls	r0, r0, #1
 clz r2,r0                @ normalise x
 8001e20:	fab0 f280 	clz	r2, r0
 lsls r0,r2
 8001e24:	4090      	lsls	r0, r2
 beq 40f                  @ x zero?
 8001e26:	d00f      	beq.n	8001e48 <fadd_pp+0x98>
 lsrs r0,#8               @ shift back to Q23 position
 8001e28:	0a00      	lsrs	r0, r0, #8
 orr r0,r0,r12,lsl#31     @ restore sign
 8001e2a:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 rsb r2,#8                @ adjust exponent
 8001e2e:	f1c2 0208 	rsb	r2, r2, #8
 b 20b                    @ and continue, treating x as normal value
 8001e32:	e7b3      	b.n	8001d9c <qfp_fadd+0xc>

.balign 4
30:                       @ here x>>y
 cmp r2,#0xff
 8001e34:	2aff      	cmp	r2, #255	; 0xff
 it ne
 8001e36:	bf18      	it	ne
 bxne r14                 @ x finite? return it
 8001e38:	4770      	bxne	lr
3:                        @ x Inf/NaN
 lsls r12,r0,#9           @ x NaN?
 8001e3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 it ne
 8001e3e:	bf18      	it	ne
 orrne r0,#0x00400000     @ return Inf or modified NaN
 8001e40:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 bx r14
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

.balign 4
40:                       @ here y>>x
 mov r0,r1                @ by default return y
 8001e48:	4608      	mov	r0, r1
 cmp r3,#0xff             @ y finite? return it
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 it ne
 8001e4c:	bf18      	it	ne
 bxne r14
 8001e4e:	4770      	bxne	lr
 lsls r12,r0,#9           @ y NaN?
 8001e50:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 it ne
 8001e54:	bf18      	it	ne
 orrne r0,#0x00400000     @ return Inf or modified NaN
 8001e56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 bx r14
 8001e5a:	4770      	bx	lr

.balign 4
2:                        @ here y is Inf/NaN
 lsls r12,r1,#9           @ y NaN?
 8001e5c:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 itt ne
 8001e60:	bf1c      	itt	ne
 orrne r0,r1,#0x00400000  @ return modified NaN
 8001e62:	f441 0080 	orrne.w	r0, r1, #4194304	; 0x400000
 bxne r14
 8001e66:	4770      	bxne	lr
                          @ here y Inf
 cmp r2,#0xff
 8001e68:	2aff      	cmp	r2, #255	; 0xff
 itt ne                   @ x finite?
 8001e6a:	bf1c      	itt	ne
 movne r0,r1
 8001e6c:	4608      	movne	r0, r1
 bxne r14                 @ return y
 8001e6e:	4770      	bxne	lr
 lsls r12,r0,#9           @ x NaN?
 8001e70:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 itt ne
 8001e74:	bf1c      	itt	ne
 orrne r0,#0x00400000     @ return modified NaN
 8001e76:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 bxne r14
 8001e7a:	4770      	bxne	lr
                          @ here x Inf, y Inf
 teq r0,r1
 8001e7c:	ea90 0f01 	teq	r0, r1
 it eq
 8001e80:	bf08      	it	eq
 bxeq r14                 @ same signs? return it
 8001e82:	4770      	bxeq	lr
 mov r0,#0xff000000       @ otherwise return NaN
 8001e84:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 orr r0,#0x00c00000
 8001e88:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 bx r14
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

.balign 4
50:                       @ here both x,y 0/denormal
 cmp r0,#0x80000000       @ -0+-0?
 8001e90:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 itt eq
 8001e94:	bf04      	itt	eq
 cmpeq r1,#0x80000000     @ return -0
 8001e96:	f1b1 4f00 	cmpeq.w	r1, #2147483648	; 0x80000000
 bxeq r14
 8001e9a:	4770      	bxeq	lr
 cmp r0,#0
 8001e9c:	2800      	cmp	r0, #0
 it mi
 8001e9e:	bf48      	it	mi
 rsbmi r0,#0x80000000     @ x negative? make 2's complement
 8001ea0:	f1c0 4000 	rsbmi	r0, r0, #2147483648	; 0x80000000
 cmp r1,#0
 8001ea4:	2900      	cmp	r1, #0
 it mi
 8001ea6:	bf48      	it	mi
 rsbmi r1,#0x80000000     @ y negative? make 2's complement
 8001ea8:	f1c1 4100 	rsbmi	r1, r1, #2147483648	; 0x80000000
 adds r0,r1               @ direct addition
 8001eac:	1840      	adds	r0, r0, r1
 it mi
 8001eae:	bf48      	it	mi
 rsbmi r0,#0x80000000     @ convert back to sign-magnitude
 8001eb0:	f1c0 4000 	rsbmi	r0, r0, #2147483648	; 0x80000000
 bx r14
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop


 fadd_s0b r0,r1,r2,r3,0   @ continuation of fadd_pp
 8001eb8:	2afe      	cmp	r2, #254	; 0xfe
 8001eba:	da0d      	bge.n	8001ed8 <fadd_pp+0x128>
 8001ebc:	0880      	lsrs	r0, r0, #2
 8001ebe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001ec2:	b10b      	cbz	r3, 8001ec8 <fadd_pp+0x118>
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	bf28      	it	cs
 8001eca:	f020 0001 	biccs.w	r0, r0, #1
 8001ece:	4770      	bx	lr
 8001ed0:	0840      	lsrs	r0, r0, #1
 8001ed2:	f362 50de 	bfi	r0, r2, #23, #8
 8001ed6:	4770      	bx	lr
 8001ed8:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
.balign 4
104:
 subs r12,r3,r2           @ here ye>xe: exchange macro paramters
 8001ee0:	ebb3 0c02 	subs.w	ip, r3, r2
 fadd_s0 r1,r0,r3,r2,0
 8001ee4:	f1dc 021f 	rsbs	r2, ip, #31
 8001ee8:	d420      	bmi.n	8001f2c <fadd_pp+0x17c>
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	fa20 f00c 	lsr.w	r0, r0, ip
 8001ef2:	1808      	adds	r0, r1, r0
 8001ef4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8001ef8:	d20c      	bcs.n	8001f14 <fadd_pp+0x164>
 8001efa:	f1a0 7080 	sub.w	r0, r0, #16777216	; 0x1000000
 8001efe:	0840      	lsrs	r0, r0, #1
 8001f00:	eb40 50c3 	adc.w	r0, r0, r3, lsl #23
 8001f04:	0052      	lsls	r2, r2, #1
 8001f06:	bf18      	it	ne
 8001f08:	4770      	bxne	lr
 8001f0a:	bf28      	it	cs
 8001f0c:	f020 0001 	biccs.w	r0, r0, #1
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	2bfe      	cmp	r3, #254	; 0xfe
 8001f16:	da0d      	bge.n	8001f34 <fadd_pp+0x184>
 8001f18:	0880      	lsrs	r0, r0, #2
 8001f1a:	eb40 50c3 	adc.w	r0, r0, r3, lsl #23
 8001f1e:	b10a      	cbz	r2, 8001f24 <fadd_pp+0x174>
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	bf28      	it	cs
 8001f26:	f020 0001 	biccs.w	r0, r0, #1
 8001f2a:	4770      	bx	lr
 8001f2c:	0848      	lsrs	r0, r1, #1
 8001f2e:	f363 50de 	bfi	r0, r3, #23, #8
 8001f32:	4770      	bx	lr
 8001f34:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <fsub_m>:

.balign 4
fsub_m:
 lsls r1,#1               @ shift up y, test sign
 8001f3c:	0049      	lsls	r1, r1, #1
 bcc fadd_mm              @ drop into addition
 8001f3e:	f0c0 80ba 	bcc.w	80020b6 <fadd_mm>

08001f42 <fadd_mp>:
                          @ drop into fadd_mp

fadd_mp:                  @ negative+positive
 cmp r2,r3                @ which has larger magnitude?
 8001f42:	429a      	cmp	r2, r3
 it eq
 8001f44:	bf08      	it	eq
 cmpeq r0,r1
 8001f46:	4288      	cmpeq	r0, r1
 blt fadd_mp_xlty
 8001f48:	db60      	blt.n	800200c <fadd_mp_xlty>
 fsub_s0 r0,r1,r2,r3,1    @ |x|>=|y|, subtract with negative result
 8001f4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001f4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001f52:	f051 7180 	orrs.w	r1, r1, #16777216	; 0x1000000
 8001f56:	eba2 0303 	sub.w	r3, r2, r3
 8001f5a:	fa21 fc03 	lsr.w	ip, r1, r3
 8001f5e:	f1c3 0320 	rsb	r3, r3, #32
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	b14b      	cbz	r3, 8001f7c <fadd_mp+0x3a>
 8001f68:	eb70 000c 	sbcs.w	r0, r0, ip
 8001f6c:	d41e      	bmi.n	8001fac <fadd_mp+0x6a>
 8001f6e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001f72:	0840      	lsrs	r0, r0, #1
 8001f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	ebb0 000c 	subs.w	r0, r0, ip
 8001f80:	d40a      	bmi.n	8001f98 <fadd_mp+0x56>
 8001f82:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001f86:	0840      	lsrs	r0, r0, #1
 8001f88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001f8c:	bf38      	it	cc
 8001f8e:	4770      	bxcc	lr
 8001f90:	f020 0001 	bic.w	r0, r0, #1
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	f510 0f00 	cmn.w	r0, #8388608	; 0x800000
 8001f9c:	db1e      	blt.n	8001fdc <fadd_mp+0x9a>
 8001f9e:	2a01      	cmp	r2, #1
 8001fa0:	d016      	beq.n	8001fd0 <fadd_mp+0x8e>
 8001fa2:	eb00 50c2 	add.w	r0, r0, r2, lsl #23
 8001fa6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001faa:	4770      	bx	lr
 8001fac:	f510 0f00 	cmn.w	r0, #8388608	; 0x800000
 8001fb0:	db14      	blt.n	8001fdc <fadd_mp+0x9a>
 8001fb2:	2a01      	cmp	r2, #1
 8001fb4:	d00c      	beq.n	8001fd0 <fadd_mp+0x8e>
 8001fb6:	425b      	negs	r3, r3
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001fbe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001fc2:	bf38      	it	cc
 8001fc4:	4770      	bxcc	lr
 8001fc6:	bf18      	it	ne
 8001fc8:	4770      	bxne	lr
 8001fca:	f020 0001 	bic.w	r0, r0, #1
 8001fce:	4770      	bx	lr
 8001fd0:	f100 7080 	add.w	r0, r0, #16777216	; 0x1000000
 8001fd4:	0840      	lsrs	r0, r0, #1
 8001fd6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001fda:	4770      	bx	lr
 8001fdc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
 8001fe0:	d00c      	beq.n	8001ffc <fadd_mp+0xba>
 8001fe2:	fab0 f380 	clz	r3, r0
 8001fe6:	3b08      	subs	r3, #8
 8001fe8:	1ad2      	subs	r2, r2, r3
 8001fea:	3a01      	subs	r2, #1
 8001fec:	fa00 f003 	lsl.w	r0, r0, r3
 8001ff0:	dd06      	ble.n	8002000 <fadd_mp+0xbe>
 8001ff2:	f362 50de 	bfi	r0, r2, #23, #8
 8001ff6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001ffa:	4770      	bx	lr
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	4770      	bx	lr
 8002000:	f1c2 0201 	rsb	r2, r2, #1
 8002004:	40d0      	lsrs	r0, r2
 8002006:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800200a:	4770      	bx	lr

0800200c <fadd_mp_xlty>:
.balign 4
fadd_mp_xlty:
 fsub_s0 r1,r0,r3,r2,0    @ |x|<|y|, subtract with positive result
 800200c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002010:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002014:	f050 7080 	orrs.w	r0, r0, #16777216	; 0x1000000
 8002018:	eba3 0202 	sub.w	r2, r3, r2
 800201c:	fa20 fc02 	lsr.w	ip, r0, r2
 8002020:	f1c2 0220 	rsb	r2, r2, #32
 8002024:	fa00 f202 	lsl.w	r2, r0, r2
 8002028:	b132      	cbz	r2, 8002038 <fadd_mp_xlty+0x2c>
 800202a:	eb71 010c 	sbcs.w	r1, r1, ip
 800202e:	d417      	bmi.n	8002060 <fadd_mp_xlty+0x54>
 8002030:	0849      	lsrs	r1, r1, #1
 8002032:	eb41 50c3 	adc.w	r0, r1, r3, lsl #23
 8002036:	4770      	bx	lr
 8002038:	ebb1 010c 	subs.w	r1, r1, ip
 800203c:	d408      	bmi.n	8002050 <fadd_mp_xlty+0x44>
 800203e:	0849      	lsrs	r1, r1, #1
 8002040:	eb41 50c3 	adc.w	r0, r1, r3, lsl #23
 8002044:	bf38      	it	cc
 8002046:	4770      	bxcc	lr
 8002048:	f020 0001 	bic.w	r0, r0, #1
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 8002054:	db18      	blt.n	8002088 <fadd_mp_xlty+0x7c>
 8002056:	2b01      	cmp	r3, #1
 8002058:	d012      	beq.n	8002080 <fadd_mp_xlty+0x74>
 800205a:	eb01 50c3 	add.w	r0, r1, r3, lsl #23
 800205e:	4770      	bx	lr
 8002060:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 8002064:	db10      	blt.n	8002088 <fadd_mp_xlty+0x7c>
 8002066:	2b01      	cmp	r3, #1
 8002068:	d00a      	beq.n	8002080 <fadd_mp_xlty+0x74>
 800206a:	4252      	negs	r2, r2
 800206c:	0052      	lsls	r2, r2, #1
 800206e:	eb41 50c3 	adc.w	r0, r1, r3, lsl #23
 8002072:	bf38      	it	cc
 8002074:	4770      	bxcc	lr
 8002076:	bf18      	it	ne
 8002078:	4770      	bxne	lr
 800207a:	f020 0001 	bic.w	r0, r0, #1
 800207e:	4770      	bx	lr
 8002080:	f101 7080 	add.w	r0, r1, #16777216	; 0x1000000
 8002084:	0840      	lsrs	r0, r0, #1
 8002086:	4770      	bx	lr
 8002088:	f111 7180 	adds.w	r1, r1, #16777216	; 0x1000000
 800208c:	d00a      	beq.n	80020a4 <fadd_mp_xlty+0x98>
 800208e:	fab1 f281 	clz	r2, r1
 8002092:	3a08      	subs	r2, #8
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	3b01      	subs	r3, #1
 8002098:	fa01 f002 	lsl.w	r0, r1, r2
 800209c:	dd04      	ble.n	80020a8 <fadd_mp_xlty+0x9c>
 800209e:	f363 50de 	bfi	r0, r3, #23, #8
 80020a2:	4770      	bx	lr
 80020a4:	2000      	movs	r0, #0
 80020a6:	4770      	bx	lr
 80020a8:	f1c3 0301 	rsb	r3, r3, #1
 80020ac:	40d8      	lsrs	r0, r3
 80020ae:	4770      	bx	lr

080020b0 <fadd_m>:

.balign 4
fadd_m:
 lsls r0,#1               @ x negative?
 80020b0:	0040      	lsls	r0, r0, #1
 bcc fadd_pm
 80020b2:	f0c0 8085 	bcc.w	80021c0 <fadd_pm>

080020b6 <fadd_mm>:
fadd_mm:                  @ negative+negative
 movs r12,#1              @ insert implied 1:s
 80020b6:	f05f 0c01 	movs.w	ip, #1
 bfi r0,r12,#24,#8
 80020ba:	f36c 601f 	bfi	r0, ip, #24, #8
 bfi r1,r12,#24,#8
 80020be:	f36c 611f 	bfi	r1, ip, #24, #8
 subs r12,r2,r3           @ difference of exponents
 80020c2:	ebb2 0c03 	subs.w	ip, r2, r3
 bmi 4f                   @ ye>xe?
 80020c6:	d433      	bmi.n	8002130 <fadd_mm+0x7a>
 fadd_s0 r0,r1,r2,r3,1
 80020c8:	f1dc 031f 	rsbs	r3, ip, #31
 80020cc:	d424      	bmi.n	8002118 <fadd_mm+0x62>
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	fa21 f10c 	lsr.w	r1, r1, ip
 80020d6:	1840      	adds	r0, r0, r1
 80020d8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80020dc:	d20e      	bcs.n	80020fc <fadd_mm+0x46>
 80020de:	f1a0 7080 	sub.w	r0, r0, #16777216	; 0x1000000
 80020e2:	0840      	lsrs	r0, r0, #1
 80020e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80020e8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	bf18      	it	ne
 80020f0:	4770      	bxne	lr
 80020f2:	bf28      	it	cs
 80020f4:	f020 0001 	biccs.w	r0, r0, #1
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	2afe      	cmp	r2, #254	; 0xfe
 80020fe:	da11      	bge.n	8002124 <fadd_mm+0x6e>
 8002100:	0880      	lsrs	r0, r0, #2
 8002102:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002106:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800210a:	b10b      	cbz	r3, 8002110 <fadd_mm+0x5a>
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	bf28      	it	cs
 8002112:	f020 0001 	biccs.w	r0, r0, #1
 8002116:	4770      	bx	lr
 8002118:	0840      	lsrs	r0, r0, #1
 800211a:	f362 50de 	bfi	r0, r2, #23, #8
 800211e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002122:	4770      	bx	lr
 8002124:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8002128:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
.balign 4
4:
 subs r12,r3,r2           @ here ye>xe: exchange macro paramters
 8002130:	ebb3 0c02 	subs.w	ip, r3, r2
 fadd_s0 r1,r0,r3,r2,1
 8002134:	f1dc 021f 	rsbs	r2, ip, #31
 8002138:	d424      	bmi.n	8002184 <fadd_mm+0xce>
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	fa20 f00c 	lsr.w	r0, r0, ip
 8002142:	1808      	adds	r0, r1, r0
 8002144:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8002148:	d20e      	bcs.n	8002168 <fadd_mm+0xb2>
 800214a:	f1a0 7080 	sub.w	r0, r0, #16777216	; 0x1000000
 800214e:	0840      	lsrs	r0, r0, #1
 8002150:	eb40 50c3 	adc.w	r0, r0, r3, lsl #23
 8002154:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002158:	0052      	lsls	r2, r2, #1
 800215a:	bf18      	it	ne
 800215c:	4770      	bxne	lr
 800215e:	bf28      	it	cs
 8002160:	f020 0001 	biccs.w	r0, r0, #1
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	2bfe      	cmp	r3, #254	; 0xfe
 800216a:	da11      	bge.n	8002190 <fadd_mm+0xda>
 800216c:	0880      	lsrs	r0, r0, #2
 800216e:	eb40 50c3 	adc.w	r0, r0, r3, lsl #23
 8002172:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002176:	b10a      	cbz	r2, 800217c <fadd_mm+0xc6>
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	bf28      	it	cs
 800217e:	f020 0001 	biccs.w	r0, r0, #1
 8002182:	4770      	bx	lr
 8002184:	0848      	lsrs	r0, r1, #1
 8002186:	f363 50de 	bfi	r0, r3, #23, #8
 800218a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800218e:	4770      	bx	lr
 8002190:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8002194:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <qfp_fsub>:

.balign 4
.thumb_func
qfp_fsub:
 ubfx r2,r0,#23,#8        @ extract exponents
 800219c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 ubfx r3,r1,#23,#8
 80021a0:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 cbz r2,0f                @ x 0/denormal?
 80021a4:	b392      	cbz	r2, 800220c <fadd_pm+0x4c>
10:
 cbz r3,1f                @ y 0/denormal?
 80021a6:	b39b      	cbz	r3, 8002210 <fadd_pm+0x50>
20:
 cmp r2,#0xff             @ x Inf/NaN?
 80021a8:	2aff      	cmp	r2, #255	; 0xff
 beq 2f
 80021aa:	f000 80ff 	beq.w	80023ac <fadd_pm_xlty+0x118>
 cmp r3,#0xff             @ y Inf/NaN?
 80021ae:	2bff      	cmp	r3, #255	; 0xff
 beq 3f
 80021b0:	f000 80e7 	beq.w	8002382 <fadd_pm_xlty+0xee>

 lsls r0,#1               @ shift up x, test sign
 80021b4:	0040      	lsls	r0, r0, #1
 bcs fsub_m
 80021b6:	f4bf aec1 	bcs.w	8001f3c <fsub_m>
 lsls r1,#1               @ shift up y, test sign
 80021ba:	0049      	lsls	r1, r1, #1
 bcs fadd_pp              @ drop into addition
 80021bc:	f4bf adf8 	bcs.w	8001db0 <fadd_pp>

080021c0 <fadd_pm>:
                          @ drop into fadd_pm

fadd_pm:                  @ positive+negative
 cmp r2,r3                @ which has larger magnitude?
 80021c0:	429a      	cmp	r2, r3
 it eq
 80021c2:	bf08      	it	eq
 cmpeq r0,r1
 80021c4:	4288      	cmpeq	r0, r1
 blt fadd_pm_xlty
 80021c6:	db65      	blt.n	8002294 <fadd_pm_xlty>
 fsub_s0a r0,r1,r2,r3,0   @ |x|>=|y|, subtract with positive result
 80021c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80021cc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80021d0:	f051 7180 	orrs.w	r1, r1, #16777216	; 0x1000000
 80021d4:	eba2 0303 	sub.w	r3, r2, r3
 80021d8:	fa21 fc03 	lsr.w	ip, r1, r3
 80021dc:	f1c3 0320 	rsb	r3, r3, #32
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	b133      	cbz	r3, 80021f4 <fadd_pm+0x34>
 80021e6:	eb70 000c 	sbcs.w	r0, r0, ip
 80021ea:	d42b      	bmi.n	8002244 <fadd_pm+0x84>
 80021ec:	0840      	lsrs	r0, r0, #1
 80021ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80021f2:	4770      	bx	lr
 80021f4:	ebb0 000c 	subs.w	r0, r0, ip
 80021f8:	d41c      	bmi.n	8002234 <fadd_pm+0x74>
 80021fa:	0840      	lsrs	r0, r0, #1
 80021fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002200:	bf38      	it	cc
 8002202:	4770      	bxcc	lr
 8002204:	f020 0001 	bic.w	r0, r0, #1
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
                          @ fadd_pm is continued below

.balign 4
0:                        @ here x 0/denormal
 b 100f                   @ continue below
 800220c:	e0a2      	b.n	8002354 <fadd_pm_xlty+0xc0>
 800220e:	bf00      	nop

.balign 4
1:                        @ here y 0/denormal
 cmp r2,#0x80
 8002210:	2a80      	cmp	r2, #128	; 0x80
 bge 40f                  @ x exponent large? treat y as zero
 8002212:	f280 80c1 	bge.w	8002398 <fadd_pm_xlty+0x104>
 lsr r12,r1,#31           @ save y sign
 8002216:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 lsls r1,#1               @ shift out y sign bit
 800221a:	0049      	lsls	r1, r1, #1
 clz r3,r1                @ normalise y
 800221c:	fab1 f381 	clz	r3, r1
 lsls r1,r3
 8002220:	4099      	lsls	r1, r3
 beq 40f                  @ y zero?
 8002222:	f000 80b9 	beq.w	8002398 <fadd_pm_xlty+0x104>
 lsrs r1,#8               @ shift back to Q23 position
 8002226:	0a09      	lsrs	r1, r1, #8
 orr r1,r1,r12,lsl#31     @ restore sign
 8002228:	ea41 71cc 	orr.w	r1, r1, ip, lsl #31
 rsb r3,#8                @ adjust exponent
 800222c:	f1c3 0308 	rsb	r3, r3, #8
 b 20b                    @ and continue, treating y as normal value
 8002230:	e7ba      	b.n	80021a8 <qfp_fsub+0xc>
 8002232:	bf00      	nop

.balign 4
 fsub_s0b r0,r1,r2,r3,0   @ continuation of fadd_pm
 8002234:	f510 0f00 	cmn.w	r0, #8388608	; 0x800000
 8002238:	db18      	blt.n	800226c <fadd_pm+0xac>
 800223a:	2a01      	cmp	r2, #1
 800223c:	d012      	beq.n	8002264 <fadd_pm+0xa4>
 800223e:	eb00 50c2 	add.w	r0, r0, r2, lsl #23
 8002242:	4770      	bx	lr
 8002244:	f510 0f00 	cmn.w	r0, #8388608	; 0x800000
 8002248:	db10      	blt.n	800226c <fadd_pm+0xac>
 800224a:	2a01      	cmp	r2, #1
 800224c:	d00a      	beq.n	8002264 <fadd_pm+0xa4>
 800224e:	425b      	negs	r3, r3
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002256:	bf38      	it	cc
 8002258:	4770      	bxcc	lr
 800225a:	bf18      	it	ne
 800225c:	4770      	bxne	lr
 800225e:	f020 0001 	bic.w	r0, r0, #1
 8002262:	4770      	bx	lr
 8002264:	f100 7080 	add.w	r0, r0, #16777216	; 0x1000000
 8002268:	0840      	lsrs	r0, r0, #1
 800226a:	4770      	bx	lr
 800226c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
 8002270:	d00a      	beq.n	8002288 <fadd_pm+0xc8>
 8002272:	fab0 f380 	clz	r3, r0
 8002276:	3b08      	subs	r3, #8
 8002278:	1ad2      	subs	r2, r2, r3
 800227a:	3a01      	subs	r2, #1
 800227c:	fa00 f003 	lsl.w	r0, r0, r3
 8002280:	dd04      	ble.n	800228c <fadd_pm+0xcc>
 8002282:	f362 50de 	bfi	r0, r2, #23, #8
 8002286:	4770      	bx	lr
 8002288:	2000      	movs	r0, #0
 800228a:	4770      	bx	lr
 800228c:	f1c2 0201 	rsb	r2, r2, #1
 8002290:	40d0      	lsrs	r0, r2
 8002292:	4770      	bx	lr

08002294 <fadd_pm_xlty>:
.balign 4
fadd_pm_xlty:
 fsub_s0 r1,r0,r3,r2,1    @ |x|<|y|, subtract with negative result
 8002294:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002298:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800229c:	f050 7080 	orrs.w	r0, r0, #16777216	; 0x1000000
 80022a0:	eba3 0202 	sub.w	r2, r3, r2
 80022a4:	fa20 fc02 	lsr.w	ip, r0, r2
 80022a8:	f1c2 0220 	rsb	r2, r2, #32
 80022ac:	fa00 f202 	lsl.w	r2, r0, r2
 80022b0:	b142      	cbz	r2, 80022c4 <fadd_pm_xlty+0x30>
 80022b2:	eb71 010c 	sbcs.w	r1, r1, ip
 80022b6:	d41d      	bmi.n	80022f4 <fadd_pm_xlty+0x60>
 80022b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80022bc:	0849      	lsrs	r1, r1, #1
 80022be:	eb41 50c3 	adc.w	r0, r1, r3, lsl #23
 80022c2:	4770      	bx	lr
 80022c4:	ebb1 010c 	subs.w	r1, r1, ip
 80022c8:	d40a      	bmi.n	80022e0 <fadd_pm_xlty+0x4c>
 80022ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80022ce:	0849      	lsrs	r1, r1, #1
 80022d0:	eb41 50c3 	adc.w	r0, r1, r3, lsl #23
 80022d4:	bf38      	it	cc
 80022d6:	4770      	bxcc	lr
 80022d8:	f020 0001 	bic.w	r0, r0, #1
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 80022e4:	db1e      	blt.n	8002324 <fadd_pm_xlty+0x90>
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d016      	beq.n	8002318 <fadd_pm_xlty+0x84>
 80022ea:	eb01 50c3 	add.w	r0, r1, r3, lsl #23
 80022ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80022f2:	4770      	bx	lr
 80022f4:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 80022f8:	db14      	blt.n	8002324 <fadd_pm_xlty+0x90>
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d00c      	beq.n	8002318 <fadd_pm_xlty+0x84>
 80022fe:	4252      	negs	r2, r2
 8002300:	0052      	lsls	r2, r2, #1
 8002302:	eb41 50c3 	adc.w	r0, r1, r3, lsl #23
 8002306:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800230a:	bf38      	it	cc
 800230c:	4770      	bxcc	lr
 800230e:	bf18      	it	ne
 8002310:	4770      	bxne	lr
 8002312:	f020 0001 	bic.w	r0, r0, #1
 8002316:	4770      	bx	lr
 8002318:	f101 7080 	add.w	r0, r1, #16777216	; 0x1000000
 800231c:	0840      	lsrs	r0, r0, #1
 800231e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002322:	4770      	bx	lr
 8002324:	f111 7180 	adds.w	r1, r1, #16777216	; 0x1000000
 8002328:	d00c      	beq.n	8002344 <fadd_pm_xlty+0xb0>
 800232a:	fab1 f281 	clz	r2, r1
 800232e:	3a08      	subs	r2, #8
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	3b01      	subs	r3, #1
 8002334:	fa01 f002 	lsl.w	r0, r1, r2
 8002338:	dd06      	ble.n	8002348 <fadd_pm_xlty+0xb4>
 800233a:	f363 50de 	bfi	r0, r3, #23, #8
 800233e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002342:	4770      	bx	lr
 8002344:	2000      	movs	r0, #0
 8002346:	4770      	bx	lr
 8002348:	f1c3 0301 	rsb	r3, r3, #1
 800234c:	40d8      	lsrs	r0, r3
 800234e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002352:	4770      	bx	lr

.balign 4
100:
 cmp r3,#0x80
 8002354:	2b80      	cmp	r3, #128	; 0x80
 bge 30f                  @ y exponent large? treat x as zero
 8002356:	da0f      	bge.n	8002378 <fadd_pm_xlty+0xe4>
 cmp r3,#0
 8002358:	2b00      	cmp	r3, #0
 beq 50f                  @ y also 0/denormal?
 800235a:	d03f      	beq.n	80023dc <fadd_pm_xlty+0x148>
 lsr r12,r0,#31           @ save x sign
 800235c:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
 lsls r0,#1               @ shift out x sign bit
 8002360:	0040      	lsls	r0, r0, #1
 clz r2,r0                @ normalise x
 8002362:	fab0 f280 	clz	r2, r0
 lsls r0,r2
 8002366:	4090      	lsls	r0, r2
 beq 30f                  @ x zero?
 8002368:	d006      	beq.n	8002378 <fadd_pm_xlty+0xe4>
 lsrs r0,#8               @ shift back to Q23 position
 800236a:	0a00      	lsrs	r0, r0, #8
 orr r0,r0,r12,lsl#31     @ restore sign
 800236c:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 rsb r2,#8                @ adjust exponent
 8002370:	f1c2 0208 	rsb	r2, r2, #8
 b 10b                    @ and continue, treating x as normal value
 8002374:	e717      	b.n	80021a6 <qfp_fsub+0xa>
 8002376:	bf00      	nop

.balign 4
30:                       @ here y>>x
 cmp r3,#0xff
 8002378:	2bff      	cmp	r3, #255	; 0xff
 itt ne
 800237a:	bf1c      	itt	ne
 eorne r0,r1,#0x80000000
 800237c:	f081 4000 	eorne.w	r0, r1, #2147483648	; 0x80000000
 bxne r14                 @ y finite? return -y
 8002380:	4770      	bxne	lr
3:                        @ y Inf/NaN
 lsls r12,r1,#9           @ y NaN?
 8002382:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 mov r0,r1
 8002386:	4608      	mov	r0, r1
 itt ne
 8002388:	bf1c      	itt	ne
 orrne r0,#0x00400000     @ return modified NaN
 800238a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 bxne r14
 800238e:	4770      	bxne	lr
 eor r0,#0x80000000       @ return -Inf
 8002390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 bx r14
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop

.balign 4
40:                       @ here x>>y
 cmp r2,#0xff             @ x finite? return it
 8002398:	2aff      	cmp	r2, #255	; 0xff
 it ne
 800239a:	bf18      	it	ne
 bxne r14
 800239c:	4770      	bxne	lr
 lsls r12,r0,#9           @ x NaN?
 800239e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 it ne
 80023a2:	bf18      	it	ne
 orrne r0,#0x00400000     @ return Inf or modified NaN
 80023a4:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 bx r14
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

.balign 4
2:                        @ here x is Inf/NaN
 lsls r12,r0,#9           @ x NaN?
 80023ac:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 itt ne
 80023b0:	bf1c      	itt	ne
 orrne r0,#0x00400000     @ return modified NaN
 80023b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 bxne r14
 80023b6:	4770      	bxne	lr
                          @ here x Inf
 cmp r3,#0xff
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 it ne                    @ y finite?
 80023ba:	bf18      	it	ne
 bxne r14                 @ return x
 80023bc:	4770      	bxne	lr
 lsls r12,r1,#9           @ y NaN?
 80023be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 itt ne
 80023c2:	bf1c      	itt	ne
 orrne r0,r1,#0x00400000  @ return modified NaN
 80023c4:	f441 0080 	orrne.w	r0, r1, #4194304	; 0x400000
 bxne r14
 80023c8:	4770      	bxne	lr
                          @ here x Inf, y Inf
 teq r0,r1
 80023ca:	ea90 0f01 	teq	r0, r1
 it ne
 80023ce:	bf18      	it	ne
 bxne r14                 @ differing signs? return x
 80023d0:	4770      	bxne	lr
 mov r0,#0xff000000       @ otherwise return NaN
 80023d2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 orr r0,#0x00c00000
 80023d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 bx r14
 80023da:	4770      	bx	lr

.balign 4
50:                       @ here both x,y 0/denormal
 eor r1,#0x80000000       @ negate y
 80023dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 cmp r0,#0x80000000       @ -0+-0?
 80023e0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 itt eq
 80023e4:	bf04      	itt	eq
 cmpeq r1,#0x80000000     @ return -0
 80023e6:	f1b1 4f00 	cmpeq.w	r1, #2147483648	; 0x80000000
 bxeq r14
 80023ea:	4770      	bxeq	lr
 cmp r0,#0
 80023ec:	2800      	cmp	r0, #0
 it mi
 80023ee:	bf48      	it	mi
 rsbmi r0,#0x80000000     @ x negative? make 2's complement
 80023f0:	f1c0 4000 	rsbmi	r0, r0, #2147483648	; 0x80000000
 cmp r1,#0
 80023f4:	2900      	cmp	r1, #0
 it mi
 80023f6:	bf48      	it	mi
 rsbmi r1,#0x80000000     @ y negative? make 2's complement
 80023f8:	f1c1 4100 	rsbmi	r1, r1, #2147483648	; 0x80000000
 adds r0,r1               @ direct addition
 80023fc:	1840      	adds	r0, r0, r1
 it mi
 80023fe:	bf48      	it	mi
 rsbmi r0,#0x80000000     @ convert back to sign-magnitude
 8002400:	f1c0 4000 	rsbmi	r0, r0, #2147483648	; 0x80000000
 bx r14
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop

08002408 <qfp_fmul>:

.section .text.qfp.fmul,"ax",%progbits
.balign 4
.thumb_func
qfp_fmul:
 eors r2,r0,r1
 8002408:	ea90 0201 	eors.w	r2, r0, r1
 ands r12,r2,#0x80000000  @ save sign of result
 800240c:	f012 4c00 	ands.w	ip, r2, #2147483648	; 0x80000000
 ubfx r3,r1,#23,#8        @ y exponent
 8002410:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 cbz r3,fmul_y_0          @ y 0/denormal?
 8002414:	b1f3      	cbz	r3, 8002454 <fmul_y_0>
 cmp r3,#0xff
 8002416:	2bff      	cmp	r3, #255	; 0xff
 beq fmul_y_inf           @ y Inf/Nan?
 8002418:	f000 8084 	beq.w	8002524 <fmul_y_inf>
11:
 ubfx r2,r0,#23,#8        @ x exponent
 800241c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 cbz r2,fmul_x_0          @ x 0/denormal?
 8002420:	b332      	cbz	r2, 8002470 <fmul_x_0>
 cmp r2,#0xff
 8002422:	2aff      	cmp	r2, #255	; 0xff
 beq fmul_x_inf           @ x Inf/Nan?
 8002424:	f000 8092 	beq.w	800254c <fmul_x_inf>
10:

 add r3,r3,r2             @ result exponent+254
 8002428:	4413      	add	r3, r2
 lsls r0,#9               @ x Q32 with no implied 1
 800242a:	0240      	lsls	r0, r0, #9
 lsls r1,#8               @ y Q31
 800242c:	0209      	lsls	r1, r1, #8
 orr r1,r1,#0x80000000    @ ... with implied 1
 800242e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 umull r2,r0,r0,r1        @ (x-1)y Q63
 8002432:	fba0 2001 	umull	r2, r0, r0, r1
 adds r0,r1               @ xy Q63
 8002436:	1840      	adds	r0, r0, r1
 bcc 0f                   @ will result need to be shifted down one place?
 8002438:	d32e      	bcc.n	8002498 <fmul_x_0+0x28>

 subs r3,#126             @ correct exponent (implied 1 present)
 800243a:	3b7e      	subs	r3, #126	; 0x7e
 ble 5f                   @ result 0/denormal?
 800243c:	dd4a      	ble.n	80024d4 <fmul_x_0+0x64>
 cmp r3,#255
 800243e:	2bff      	cmp	r3, #255	; 0xff
 bge 4f                   @ result Inf?
 8002440:	da42      	bge.n	80024c8 <fmul_x_0+0x58>
 orrs r2,r2,r0,lsl#24
 8002442:	ea52 6200 	orrs.w	r2, r2, r0, lsl #24
 beq 1f                   @ sticky bits 0?
 8002446:	d01d      	beq.n	8002484 <fmul_x_0+0x14>
 lsrs r0,#9               @ pack result
 8002448:	0a40      	lsrs	r0, r0, #9
 adc r0,r0,r3,lsl#23      @ rounding and exponent
 800244a:	eb40 50c3 	adc.w	r0, r0, r3, lsl #23
 orr r0,r0,r12            @ sign
 800244e:	ea40 000c 	orr.w	r0, r0, ip
 bx r14
 8002452:	4770      	bx	lr

08002454 <fmul_y_0>:

.balign 4
fmul_y_0:                 @ here y 0/denormal
 ubfx r2,r0,#23,#8        @ x exponent
 8002454:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 cmp r2,#0xff
 8002458:	2aff      	cmp	r2, #255	; 0xff
 beq 111f                 @ x Inf/NaN?
 800245a:	d055      	beq.n	8002508 <fmul_x_0+0x98>
 bics r1,r1,#0x80000000   @ clear sign
 800245c:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 beq 8f                   @ y=0, x finite, so result is zero
 8002460:	d050      	beq.n	8002504 <fmul_x_0+0x94>
 clz r3,r1                @ y denormal: make normal...
 8002462:	fab1 f381 	clz	r3, r1
 subs r3,#8
 8002466:	3b08      	subs	r3, #8
 lsls r1,r3
 8002468:	4099      	lsls	r1, r3
 rsb r3,#1                @ ... and fix exponent
 800246a:	f1c3 0301 	rsb	r3, r3, #1
 b 11b
 800246e:	e7d5      	b.n	800241c <qfp_fmul+0x14>

08002470 <fmul_x_0>:

.balign 4
fmul_x_0:                 @ x 0/denormal
 bics r0,#0x80000000
 8002470:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 beq 8f                   @ x=0? 0 result
 8002474:	d046      	beq.n	8002504 <fmul_x_0+0x94>
 clz r2,r0                @ x denormal: make normal...
 8002476:	fab0 f280 	clz	r2, r0
 subs r2,#8
 800247a:	3a08      	subs	r2, #8
 lsls r0,r2
 800247c:	4090      	lsls	r0, r2
 rsb r2,#1                @ ... and fix exponent
 800247e:	f1c2 0201 	rsb	r2, r2, #1
 b 10b
 8002482:	e7d1      	b.n	8002428 <qfp_fmul+0x20>

.balign 4
1:                        @ sticky bits 0
 lsrs r0,#9               @ pack result
 8002484:	0a40      	lsrs	r0, r0, #9
 adc r0,r0,r3,lsl#23      @ rounding and exponent
 8002486:	eb40 50c3 	adc.w	r0, r0, r3, lsl #23
 it cs
 800248a:	bf28      	it	cs
 biccs r0,#1              @ round to even
 800248c:	f020 0001 	biccs.w	r0, r0, #1
 orr r0,r0,r12            @ sign
 8002490:	ea40 000c 	orr.w	r0, r0, ip
 bx r14
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop

.balign 4
0:                        @ result must be shifted down one place
 subs r3,#128             @ correct exponent (implied 1 absent)
 8002498:	3b80      	subs	r3, #128	; 0x80
 ble 3f                   @ result 0/denormal?
 800249a:	dd21      	ble.n	80024e0 <fmul_x_0+0x70>
 cmp r3,#254
 800249c:	2bfe      	cmp	r3, #254	; 0xfe
 bge 4f                   @ result Inf?
 800249e:	da13      	bge.n	80024c8 <fmul_x_0+0x58>
 orrs r2,r2,r0,lsl#25
 80024a0:	ea52 6240 	orrs.w	r2, r2, r0, lsl #25
 beq 2f                   @ sticky bits 0?
 80024a4:	d006      	beq.n	80024b4 <fmul_x_0+0x44>
 lsrs r0,#8               @ pack result
 80024a6:	0a00      	lsrs	r0, r0, #8
 adc r0,r0,r3,lsl#23
 80024a8:	eb40 50c3 	adc.w	r0, r0, r3, lsl #23
 orr r0,r0,r12
 80024ac:	ea40 000c 	orr.w	r0, r0, ip
 bx r14
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop

.balign 4
2:                        @ sticky bits 0
 lsrs r0,#8 @ pack result
 80024b4:	0a00      	lsrs	r0, r0, #8
 adc r0,r0,r3,lsl#23
 80024b6:	eb40 50c3 	adc.w	r0, r0, r3, lsl #23
 it cs
 80024ba:	bf28      	it	cs
 biccs r0,#1              @ round to even
 80024bc:	f020 0001 	biccs.w	r0, r0, #1
 orr r0,r0,r12
 80024c0:	ea40 000c 	orr.w	r0, r0, ip
 bx r14
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop

.balign 4
4:                        @ return +/- Inf
 mov r0,#0x7f800000
 80024c8:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 orr r0,r0,r12
 80024cc:	ea40 000c 	orr.w	r0, r0, ip
 bx r14
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

.balign 4
5:                        @ 0/denormal result
 subs r3,#1               @ get shift
 80024d4:	3b01      	subs	r3, #1
 subs r3,#0               @ set carry
 80024d6:	3b00      	subs	r3, #0
 rrxs r0,r0               @ shift in implied 1
 80024d8:	ea5f 0030 	movs.w	r0, r0, rrx
 rrxs r2,r2
 80024dc:	ea5f 0232 	movs.w	r2, r2, rrx
3:
 adds r3,#25              @ will become 0?
 80024e0:	3319      	adds	r3, #25
 ble 8f
 80024e2:	dd0f      	ble.n	8002504 <fmul_x_0+0x94>
 lsls r1,r0,r3            @ double-length shift
 80024e4:	fa10 f103 	lsls.w	r1, r0, r3
 orrs r2,r2,r1
 80024e8:	430a      	orrs	r2, r1
 rsb r3,#33
 80024ea:	f1c3 0321 	rsb	r3, r3, #33	; 0x21
 lsrs r0,r3               @ sticky bits
 80024ee:	40d8      	lsrs	r0, r3
 bcc 9f                   @ not a potential tie?
 80024f0:	d304      	bcc.n	80024fc <fmul_x_0+0x8c>
 adds r0,#1               @ rounding...
 80024f2:	3001      	adds	r0, #1
 cmp r2,#0
 80024f4:	2a00      	cmp	r2, #0
 it eq
 80024f6:	bf08      	it	eq
 biceq r0,#1              @ ... to even
 80024f8:	f020 0001 	biceq.w	r0, r0, #1
9:
 orr r0,r0,r12
 80024fc:	ea40 000c 	orr.w	r0, r0, ip
 bx r14
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop

.balign 4
8:
 mov r0,r12               @ 0 result with sign
 8002504:	4660      	mov	r0, ip
 bx r14
 8002506:	4770      	bx	lr

.balign 4
111:                      @ here y 0/denormal, x Inf/NaN
 lsls r2,r0,#9
 8002508:	0242      	lsls	r2, r0, #9
 bne 2f                   @ x NaN?
 800250a:	d107      	bne.n	800251c <fmul_x_0+0xac>
 bics r1,r1,#0x80000000
 800250c:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 bne 3f                   @ y<>0?
 8002510:	d115      	bne.n	800253e <fmul_y_inf+0x1a>
4:
 mov r0,#0xff000000       @ y=0, x Inf: return NaN
 8002512:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 orr r0,r0,#0x00c00000
 8002516:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 bx r14
 800251a:	4770      	bx	lr

.balign 4
2:
 orr r0,r0,#0x00400000    @ return modified x NaN
 800251c:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 bx r14
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop

08002524 <fmul_y_inf>:

.balign 4
fmul_y_inf:               @ here y Inf/NaN
 lsls r3,r1,#9
 8002524:	024b      	lsls	r3, r1, #9
 beq 0f                   @ y Inf?
 8002526:	d003      	beq.n	8002530 <fmul_y_inf+0xc>
 orr r0,r1,#0x00400000    @ return modified y NaN
 8002528:	f441 0080 	orr.w	r0, r1, #4194304	; 0x400000
 bx r14
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
.balign 4
0:                        @ here y Inf
 ubfx r2,r0,#23,#8        @ x exponent
 8002530:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 cmp r2,#0xff
 8002534:	2aff      	cmp	r2, #255	; 0xff
 beq 1f                   @ x Inf/NaN?
 8002536:	d005      	beq.n	8002544 <fmul_y_inf+0x20>
 bics r0,#0x80000000
 8002538:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 beq 4b                   @ y=Inf, x=0? return NaN
 800253c:	d0e9      	beq.n	8002512 <fmul_x_0+0xa2>
3:
 orr r0,r12,#0x7f800000   @ x<>0, y Inf: return signed Inf
 800253e:	f04c 40ff 	orr.w	r0, ip, #2139095040	; 0x7f800000
 bx r14
 8002542:	4770      	bx	lr

.balign 4
1:                        @ here y Inf, x Inf/NaN
 lsls r2,r0,#9
 8002544:	0242      	lsls	r2, r0, #9
 beq 3b                   @ x Inf? return Inf
 8002546:	d0fa      	beq.n	800253e <fmul_y_inf+0x1a>
 b 2f                     @ x NaN: return modified x NaN
 8002548:	e002      	b.n	8002550 <fmul_x_inf+0x4>
 800254a:	bf00      	nop

0800254c <fmul_x_inf>:

.balign 4
fmul_x_inf:               @ x Inf/NaN, y normal
 lsls r2,r0,#9
 800254c:	0242      	lsls	r2, r0, #9
 beq 3b                   @ x Inf? return Inf
 800254e:	d0f6      	beq.n	800253e <fmul_y_inf+0x1a>
2: @ x NaN
 orr r0,r0,#0x00400000    @ return modified x NaN
 8002550:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 bx r14
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop

08002558 <qfp_fdiv>:

.section .text.qfp.fdiv,"ax",%progbits
.balign 4
.thumb_func
qfp_fdiv:
 eor r12,r0,r1
 8002558:	ea80 0c01 	eor.w	ip, r0, r1
 lsr r12,#31              @ sign bit of result in r12b0
 800255c:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 ubfx r2,r0,#23,#8        @ extract x exponent
 8002560:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 ubfx r3,r1,#23,#8        @ extract y exponent
 8002564:	f3c1 53c7 	ubfx	r3, r1, #23, #8

 cbz r2,fdiv_x_0          @ x 0/denormal?
 8002568:	b342      	cbz	r2, 80025bc <fdiv_x_0>
 cmp r2,#0xff
 800256a:	2aff      	cmp	r2, #255	; 0xff
 beq fdiv_x_inf           @ x Inf/NaN?
 800256c:	f000 80c4 	beq.w	80026f8 <fdiv_x_inf>
10:

 cbz r3,fdiv_y_0          @ y 0/denormal?
 8002570:	b383      	cbz	r3, 80025d4 <fdiv_y_0>
 cmp r3,#0xff
 8002572:	2bff      	cmp	r3, #255	; 0xff
 beq fdiv_y_inf           @ y Inf/NaN?
 8002574:	f000 80d2 	beq.w	800271c <fdiv_y_inf>
11:

 subs r2,r3               @ difference in exponents
 8002578:	1ad2      	subs	r2, r2, r3
 movs r3,#1
 800257a:	2301      	movs	r3, #1
 bfi r0,r3,#23,#9         @ insert implied 1:s
 800257c:	f363 50df 	bfi	r0, r3, #23, #9
 bfi r1,r3,#23,#9
 8002580:	f363 51df 	bfi	r1, r3, #23, #9
 cmp r0,r1                @ mantissa of x < mantissa of y?
 8002584:	4288      	cmp	r0, r1
 blo 1f
 8002586:	d32f      	bcc.n	80025e8 <fdiv_y_0+0x14>
                          @ x>=y
 adds r2,#126             @ add exponent offset
 8002588:	327e      	adds	r2, #126	; 0x7e
 cmp r2,#0xfe             @ will result be 0/denormal/Inf?
 800258a:	2afe      	cmp	r2, #254	; 0xfe
 bhs 50f
 800258c:	d250      	bcs.n	8002630 <fdiv_y_0+0x5c>
 add r12,r2,r12,lsl#8     @ add in sign bit
 800258e:	eb02 2c0c 	add.w	ip, r2, ip, lsl #8
 div_s0 0                 @ perform division
 8002592:	0200      	lsls	r0, r0, #8
 8002594:	09ca      	lsrs	r2, r1, #7
 8002596:	fbb0 f3f2 	udiv	r3, r0, r2
 800259a:	01c0      	lsls	r0, r0, #7
 800259c:	fb01 0013 	mls	r0, r1, r3, r0
 80025a0:	0080      	lsls	r0, r0, #2
 80025a2:	fb90 f2f2 	sdiv	r2, r0, r2
 80025a6:	01c0      	lsls	r0, r0, #7
 80025a8:	fb01 0012 	mls	r0, r1, r2, r0
 80025ac:	eb02 2243 	add.w	r2, r2, r3, lsl #9
 80025b0:	4288      	cmp	r0, r1
 80025b2:	d233      	bcs.n	800261c <fdiv_y_0+0x48>
6:
 lsrs r0,r2,#1            @ get rounding bit
 80025b4:	0850      	lsrs	r0, r2, #1
 adc r0,r0,r12,lsl#23     @ round and pack
 80025b6:	eb40 50cc 	adc.w	r0, r0, ip, lsl #23
 bx r14                   @ there can be no rounding tie if the result is normal (exercise for the reader)
 80025ba:	4770      	bx	lr

080025bc <fdiv_x_0>:

.balign 4
fdiv_x_0:                 @ x 0/denormal
 bics r0,#0x80000000
 80025bc:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 beq 30f                  @ x=0?
 80025c0:	f000 808c 	beq.w	80026dc <fdiv_y_0+0x108>
 clz r2,r0                @ x denormal: make normal and fix exponent
 80025c4:	fab0 f280 	clz	r2, r0
 subs r2,#8
 80025c8:	3a08      	subs	r2, #8
 lsls r0,r2
 80025ca:	4090      	lsls	r0, r2
 rsb r2,#1
 80025cc:	f1c2 0201 	rsb	r2, r2, #1
 b 10b
 80025d0:	e7ce      	b.n	8002570 <qfp_fdiv+0x18>
 80025d2:	bf00      	nop

080025d4 <fdiv_y_0>:

.balign 4
fdiv_y_0:                 @ y 0/denormal
 bics r1,#0x80000000
 80025d4:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 beq 70f                  @ y=0, x finite? return +/-Inf
 80025d8:	d07a      	beq.n	80026d0 <fdiv_y_0+0xfc>
 clz r3,r1                @ y denormal: make normal and fix exponent
 80025da:	fab1 f381 	clz	r3, r1
 subs r3,#8
 80025de:	3b08      	subs	r3, #8
 lsls r1,r3
 80025e0:	4099      	lsls	r1, r3
 rsb r3,#1
 80025e2:	f1c3 0301 	rsb	r3, r3, #1
 b 11b
 80025e6:	e7c7      	b.n	8002578 <qfp_fdiv+0x20>

.balign 4
1:                        @ x<y
 adds r2,#125             @ add exponent offset
 80025e8:	327d      	adds	r2, #125	; 0x7d
 cmp r2,#0xfe             @ will result be 0/denormal/Inf?
 80025ea:	2afe      	cmp	r2, #254	; 0xfe
 bhs 60f
 80025ec:	d238      	bcs.n	8002660 <fdiv_y_0+0x8c>
 add r12,r2,r12,lsl#8     @ add in sign bit
 80025ee:	eb02 2c0c 	add.w	ip, r2, ip, lsl #8
 div_s0 1                 @ perform division
 80025f2:	0200      	lsls	r0, r0, #8
 80025f4:	0a0a      	lsrs	r2, r1, #8
 80025f6:	fbb0 f3f2 	udiv	r3, r0, r2
 80025fa:	0200      	lsls	r0, r0, #8
 80025fc:	fb01 0013 	mls	r0, r1, r3, r0
 8002600:	0040      	lsls	r0, r0, #1
 8002602:	fb90 f2f2 	sdiv	r2, r0, r2
 8002606:	0200      	lsls	r0, r0, #8
 8002608:	fb01 0012 	mls	r0, r1, r2, r0
 800260c:	eb02 2243 	add.w	r2, r2, r3, lsl #9
 8002610:	4288      	cmp	r0, r1
 8002612:	d203      	bcs.n	800261c <fdiv_y_0+0x48>
6:
 lsrs r0,r2,#1            @ get rounding bit
 8002614:	0850      	lsrs	r0, r2, #1
 adc r0,r0,r12,lsl#23     @ round and pack
 8002616:	eb40 50cc 	adc.w	r0, r0, ip, lsl #23
 bx r14
 800261a:	4770      	bx	lr
@ Here we trap the case where the remainder is out of range
@ because the (approximate) division quotient is not correct.
@ By this point the x<y and x>=y cases can be treated together.
.balign 4
4:
 blt 5f                   @ negative remainder?
 800261c:	db04      	blt.n	8002628 <fdiv_y_0+0x54>
7:
 adds r2,#1               @ increment quotient
 800261e:	3201      	adds	r2, #1
 subs r0,r1               @ adjust remainder
 8002620:	1a40      	subs	r0, r0, r1
 cmp r0,r1                @ finished?
 8002622:	4288      	cmp	r0, r1
 blo 6b
 8002624:	d3f6      	bcc.n	8002614 <fdiv_y_0+0x40>
 b 7b
 8002626:	e7fa      	b.n	800261e <fdiv_y_0+0x4a>
.balign 4
5:
 subs r2,#1               @ decrement quotient
 8002628:	3a01      	subs	r2, #1
 adds r0,r1               @ adjust remainder
 800262a:	1840      	adds	r0, r0, r1
 bpl 6b                   @ finished?
 800262c:	d5f2      	bpl.n	8002614 <fdiv_y_0+0x40>
 b 5b
 800262e:	e7fb      	b.n	8002628 <fdiv_y_0+0x54>

.balign 4
50:                       @ x>=y, denormal or infinte result
 bge 70f                  @ infinite result?
 8002630:	da4e      	bge.n	80026d0 <fdiv_y_0+0xfc>
 rsbs r2,#1               @ shift for denormal result
 8002632:	f1d2 0201 	rsbs	r2, r2, #1
 add r12,r2,r12,lsl#31    @ save in r12
 8002636:	eb02 7ccc 	add.w	ip, r2, ip, lsl #31
 div_s0 0                 @ perform division
 800263a:	0200      	lsls	r0, r0, #8
 800263c:	09ca      	lsrs	r2, r1, #7
 800263e:	fbb0 f3f2 	udiv	r3, r0, r2
 8002642:	01c0      	lsls	r0, r0, #7
 8002644:	fb01 0013 	mls	r0, r1, r3, r0
 8002648:	0080      	lsls	r0, r0, #2
 800264a:	fb90 f2f2 	sdiv	r2, r0, r2
 800264e:	01c0      	lsls	r0, r0, #7
 8002650:	fb01 0012 	mls	r0, r1, r2, r0
 8002654:	eb02 2243 	add.w	r2, r2, r3, lsl #9
 8002658:	4288      	cmp	r0, r1
 800265a:	d22f      	bcs.n	80026bc <fdiv_y_0+0xe8>
 b 6f
 800265c:	e016      	b.n	800268c <fdiv_y_0+0xb8>
 800265e:	bf00      	nop

.balign 4
60:                       @ x<y, denormal or infinte result
 bge 70f                  @ infinite result?
 8002660:	da36      	bge.n	80026d0 <fdiv_y_0+0xfc>
 rsbs r2,#1               @ shift for denormal result
 8002662:	f1d2 0201 	rsbs	r2, r2, #1
 add r12,r2,r12,lsl#31    @ save in r12
 8002666:	eb02 7ccc 	add.w	ip, r2, ip, lsl #31
 div_s0 1                 @ perform division
 800266a:	0200      	lsls	r0, r0, #8
 800266c:	0a0a      	lsrs	r2, r1, #8
 800266e:	fbb0 f3f2 	udiv	r3, r0, r2
 8002672:	0200      	lsls	r0, r0, #8
 8002674:	fb01 0013 	mls	r0, r1, r3, r0
 8002678:	0040      	lsls	r0, r0, #1
 800267a:	fb90 f2f2 	sdiv	r2, r0, r2
 800267e:	0200      	lsls	r0, r0, #8
 8002680:	fb01 0012 	mls	r0, r1, r2, r0
 8002684:	eb02 2243 	add.w	r2, r2, r3, lsl #9
 8002688:	4288      	cmp	r0, r1
 800268a:	d217      	bcs.n	80026bc <fdiv_y_0+0xe8>
6:
 rsb r3,r12,#33           @ complementary shift
 800268c:	f1cc 0321 	rsb	r3, ip, #33	; 0x21
 lsls r3,r2,r3            @ bits about to be shifted off (less one)
 8002690:	fa12 f303 	lsls.w	r3, r2, r3
 orrs r0,r3               @ OR sticky bits with remainder
 8002694:	4318      	orrs	r0, r3
 beq 8f                   @ sticky bits 0?
 8002696:	d007      	beq.n	80026a8 <fdiv_y_0+0xd4>
 lsrs r0,r2,r12           @ shift down result
 8002698:	fa32 f00c 	lsrs.w	r0, r2, ip
 bic r12,#0xff
 800269c:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 adc r0,r0,r12            @ round and pack
 80026a0:	eb40 000c 	adc.w	r0, r0, ip
 bx r14
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop

.balign 4
8:                        @ sticky bits 0: possibly tied rounding case
 lsrs r0,r2,r12           @ shift down result
 80026a8:	fa32 f00c 	lsrs.w	r0, r2, ip
 bic r12,#0xff
 80026ac:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 adc r0,r0,r12
 80026b0:	eb40 000c 	adc.w	r0, r0, ip
 it cs                    @ tied?
 80026b4:	bf28      	it	cs
 biccs r0,#1              @ round to even
 80026b6:	f020 0001 	biccs.w	r0, r0, #1
 bx r14
 80026ba:	4770      	bx	lr

@ Here we trap the case where the remainder is out of range
@ when the result is denormal.
.balign 4
4:
 blt 5f                   @ negative remainder?
 80026bc:	db04      	blt.n	80026c8 <fdiv_y_0+0xf4>
7:
 adds r2,#1               @ increment quotient
 80026be:	3201      	adds	r2, #1
 subs r0,r1               @ adjust remainder
 80026c0:	1a40      	subs	r0, r0, r1
 cmp r0,r1                @ finished?
 80026c2:	4288      	cmp	r0, r1
 blo 6b
 80026c4:	d3e2      	bcc.n	800268c <fdiv_y_0+0xb8>
 b 7b
 80026c6:	e7fa      	b.n	80026be <fdiv_y_0+0xea>
.balign 4
5:
 subs r2,#1               @ decrement quotient
 80026c8:	3a01      	subs	r2, #1
 adds r0,r1               @ adjust remainder
 80026ca:	1840      	adds	r0, r0, r1
 bpl 6b                   @ finished?
 80026cc:	d5de      	bpl.n	800268c <fdiv_y_0+0xb8>
 b 5b
 80026ce:	e7fb      	b.n	80026c8 <fdiv_y_0+0xf4>

.balign 4
70:                       @ return signed infinity
 lsl r0,r12,#31
 80026d0:	ea4f 70cc 	mov.w	r0, ip, lsl #31
 orr r0,#0x7f800000
 80026d4:	f040 40ff 	orr.w	r0, r0, #2139095040	; 0x7f800000
 bx r14
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

.balign 4
30:                       @ x zero
 lsls r3,r1,#1            @ test y
 80026dc:	004b      	lsls	r3, r1, #1
 beq 31f                  @ 0/0? NaN
 80026de:	d005      	beq.n	80026ec <fdiv_y_0+0x118>
 cmp r3,#0xff000000
 80026e0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 bls 32f                  @ y not NaN?
 80026e4:	d91c      	bls.n	8002720 <fdiv_y_inf+0x4>
33:
 orr r0,r1,#0x00400000    @ return modified y NaN
 80026e6:	f441 0080 	orr.w	r0, r1, #4194304	; 0x400000
 bx r14
 80026ea:	4770      	bx	lr

.balign 4
31:                       @ return NaN
 mov r0,#0xff000000
 80026ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 orr r0,r0,#0x00c00000
 80026f0:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 bx r14
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop

080026f8 <fdiv_x_inf>:

.balign 4
fdiv_x_inf:               @ x Inf/NaN
 lsls r2,r0,#9
 80026f8:	0242      	lsls	r2, r0, #9
 beq 0f                   @ x Inf?
 80026fa:	d003      	beq.n	8002704 <fdiv_x_inf+0xc>
 orr r0,r0,#0x00400000    @ return modified x NaN
 80026fc:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 bx r14
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
.balign 4
0:                        @ x Inf
 cmp r3,#0xff
 8002704:	2bff      	cmp	r3, #255	; 0xff
 beq 1f                   @ y Inf/NaN?
 8002706:	d005      	beq.n	8002714 <fdiv_x_inf+0x1c>
 mov r0,#0x7f800000       @ x Inf y finite: return +/-Inf
 8002708:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 orr r0,r0,r12,lsl#31
 800270c:	ea40 70cc 	orr.w	r0, r0, ip, lsl #31
 bx r14
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop

.balign 4
1:                        @ y Inf/NaN
 lsls r3,r1,#9
 8002714:	024b      	lsls	r3, r1, #9
 bne 33b                  @ y NaN?
 8002716:	d1e6      	bne.n	80026e6 <fdiv_y_0+0x112>
 b 31b                    @ x Inf y Inf: return NaN
 8002718:	e7e8      	b.n	80026ec <fdiv_y_0+0x118>
 800271a:	bf00      	nop

0800271c <fdiv_y_inf>:

.balign 4
fdiv_y_inf:               @ y Inf/NaN
 lsls r3,r1,#9
 800271c:	024b      	lsls	r3, r1, #9
 bne 33b                  @ y NaN?
 800271e:	d1e2      	bne.n	80026e6 <fdiv_y_0+0x112>
32:
 lsl r0,r12,#31           @ return +/-0
 8002720:	ea4f 70cc 	mov.w	r0, ip, lsl #31
 bx r14
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop

08002728 <rsqrt_t0>:
 8002728:	b7b7b6b5 	.word	0xb7b7b6b5
 800272c:	babab9b8 	.word	0xbabab9b8
 8002730:	bdbcbcbb 	.word	0xbdbcbcbb
 8002734:	c0bfbebe 	.word	0xc0bfbebe
 8002738:	c2c2c1c0 	.word	0xc2c2c1c0
 800273c:	c5c4c4c3 	.word	0xc5c4c4c3
 8002740:	c8c7c6c6 	.word	0xc8c7c6c6
 8002744:	cac9c9c8 	.word	0xcac9c9c8
 8002748:	cdcccbcb 	.word	0xcdcccbcb
 800274c:	cfcececd 	.word	0xcfcececd
 8002750:	d2d1d0d0 	.word	0xd2d1d0d0
 8002754:	d4d3d3d2 	.word	0xd4d3d3d2
 8002758:	d6d6d5d5 	.word	0xd6d6d5d5
 800275c:	d9d8d8d7 	.word	0xd9d8d8d7
 8002760:	dbdbdad9 	.word	0xdbdbdad9
 8002764:	dddddcdc 	.word	0xdddddcdc
 8002768:	e0dfdfde 	.word	0xe0dfdfde
 800276c:	e2e1e1e0 	.word	0xe2e1e1e0
 8002770:	e4e4e3e3 	.word	0xe4e4e3e3
 8002774:	e6e6e5e5 	.word	0xe6e6e5e5
 8002778:	e9e8e8e7 	.word	0xe9e8e8e7
 800277c:	ebeaeae9 	.word	0xebeaeae9
 8002780:	ededeceb 	.word	0xededeceb
 8002784:	efefeeee 	.word	0xefefeeee
 8002788:	f1f1f0f0 	.word	0xf1f1f0f0
 800278c:	f3f3f2f2 	.word	0xf3f3f2f2
 8002790:	f6f5f4f4 	.word	0xf6f5f4f4
 8002794:	f8f7f7f6 	.word	0xf8f7f7f6
 8002798:	faf9f9f8 	.word	0xfaf9f9f8
 800279c:	fcfbfbfa 	.word	0xfcfbfbfa
 80027a0:	fefdfdfc 	.word	0xfefdfdfc
 80027a4:	fffffffe 	.word	0xfffffffe

080027a8 <rsqrt_t1>:
 80027a8:	82818180 	.word	0x82818180
 80027ac:	84838382 	.word	0x84838382
 80027b0:	86858584 	.word	0x86858584
 80027b4:	88878786 	.word	0x88878786
 80027b8:	89898888 	.word	0x89898888
 80027bc:	8b8b8a8a 	.word	0x8b8b8a8a
 80027c0:	8d8d8c8c 	.word	0x8d8d8c8c
 80027c4:	8f8e8e8e 	.word	0x8f8e8e8e
 80027c8:	9190908f 	.word	0x9190908f
 80027cc:	92929291 	.word	0x92929291
 80027d0:	94949393 	.word	0x94949393
 80027d4:	96959595 	.word	0x96959595
 80027d8:	98979796 	.word	0x98979796
 80027dc:	99999898 	.word	0x99999898
 80027e0:	9b9b9a9a 	.word	0x9b9b9a9a
 80027e4:	9d9c9c9b 	.word	0x9d9c9c9b
 80027e8:	9e9e9d9d 	.word	0x9e9e9d9d
 80027ec:	a09f9f9f 	.word	0xa09f9f9f
 80027f0:	a1a1a1a0 	.word	0xa1a1a1a0
 80027f4:	a3a3a2a2 	.word	0xa3a3a2a2
 80027f8:	a5a4a4a3 	.word	0xa5a4a4a3
 80027fc:	a6a6a5a5 	.word	0xa6a6a5a5
 8002800:	a8a7a7a6 	.word	0xa8a7a7a6
 8002804:	a9a9a8a8 	.word	0xa9a9a8a8
 8002808:	abaaaaaa 	.word	0xabaaaaaa
 800280c:	acacabab 	.word	0xacacabab
 8002810:	aeadadad 	.word	0xaeadadad
 8002814:	afafaeae 	.word	0xafafaeae
 8002818:	b1b0b0af 	.word	0xb1b0b0af
 800281c:	b2b2b1b1 	.word	0xb2b2b1b1
 8002820:	b3b3b3b2 	.word	0xb3b3b3b2
 8002824:	b5b4b4b4 	.word	0xb5b4b4b4

08002828 <qfp_fsqrt>:
.byte 175,176,176,177,177,177,178,178,178,179,179,179,180,180,180,181

.balign 4
.thumb_func
qfp_fsqrt:
 bic r2,r0,#0xff000000    @ clear exponent
 8002828:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
 orr r2,#0x00800000       @ insert implied 1
 800282c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 asrs r1,r0,#24
 8002830:	1601      	asrs	r1, r0, #24
 bmi 1f                   @ negative argument?
 8002832:	d47d      	bmi.n	8002930 <qfp_fsqrt+0x108>
 bcs 2f                   @ odd exponent?
 8002834:	d234      	bcs.n	80028a0 <qfp_fsqrt+0x78>
 beq 3f                   @ zero exponent?
 8002836:	d06d      	beq.n	8002914 <qfp_fsqrt+0xec>
9:                        @ here we have even exponent (e.g. 2<=x<4 Q22)
 add r12,r1,#0x3e         @ exponent 80->7f, 82->80 etc.
 8002838:	f101 0c3e 	add.w	ip, r1, #62	; 0x3e
 ubfx r3,r2,#16,#7        @ extract 7 mantissa bits
 800283c:	f3c2 4306 	ubfx	r3, r2, #16, #7
 adr r0,rsqrt_t0
 8002840:	f2af 101c 	subw	r0, pc, #284	; 0x11c
 ldrb r0,[r0,r3]          @ first approximation to result Q7
 8002844:	5cc0      	ldrb	r0, [r0, r3]
 mul r3,r0,r0             @ approximation squared Q14
 8002846:	fb00 f300 	mul.w	r3, r0, r0
 sub r1,r2,r3,lsl#8       @ first remainder Q22
 800284a:	eba2 2103 	sub.w	r1, r2, r3, lsl #8
 lsls r1,#14              @ Q36
 800284e:	0389      	lsls	r1, r1, #14
 sdiv r1,r1,r0            @ first correction*2 Q36/Q7=Q29
 8002850:	fb91 f1f0 	sdiv	r1, r1, r0
 lsls r0,#7               @ Q14
 8002854:	01c0      	lsls	r0, r0, #7
 add r0,r0,r1,asr#16      @ add in correction Q14
 8002856:	eb00 4021 	add.w	r0, r0, r1, asr #16
 mul r3,r0,r0             @ Q28
 800285a:	fb00 f300 	mul.w	r3, r0, r0
 rsb r1,r3,r2,lsl#6       @ second remainder Q28
 800285e:	ebc3 1182 	rsb	r1, r3, r2, lsl #6
 lsls r1,#9               @ Q37
 8002862:	0249      	lsls	r1, r1, #9
 sdiv r1,r1,r0            @ second correction*2 Q37/Q14=Q23
 8002864:	fb91 f1f0 	sdiv	r1, r1, r0
 add r0,r1,r0,lsl#10      @ add in correction Q24
 8002868:	eb01 2080 	add.w	r0, r1, r0, lsl #10
 mul r3,r0,r0             @ Q48
 800286c:	fb00 f300 	mul.w	r3, r0, r0
 rsbs r3,r3,r2,lsl#26     @ remainder Q48
 8002870:	ebd3 6382 	rsbs	r3, r3, r2, lsl #26
 bmi 4f                   @ when approximation is not exact, remainder happens always to be negative
 8002874:	d404      	bmi.n	8002880 <qfp_fsqrt+0x58>
 lsrs r0,#1               @ Q23 result
 8002876:	0840      	lsrs	r0, r0, #1
 adc r0,r0,r12,lsl#23     @ pack and round (rounding can never tie)
 8002878:	eb40 50cc 	adc.w	r0, r0, ip, lsl #23
 bx r14
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

.balign 4
4:                        @ here approximation was too high
 subs r0,#1               @ adjust result
 8002880:	3801      	subs	r0, #1
 mul r3,r0,r0
 8002882:	fb00 f300 	mul.w	r3, r0, r0
 rsbs r3,r3,r2,lsl#26     @ recompute remainder Q48
 8002886:	ebd3 6382 	rsbs	r3, r3, r2, lsl #26
 bmi 5f                   @ still incorrect?
 800288a:	d403      	bmi.n	8002894 <qfp_fsqrt+0x6c>
 lsrs r0,#1               @ pack and round
 800288c:	0840      	lsrs	r0, r0, #1
 adc r0,r0,r12,lsl#23
 800288e:	eb40 50cc 	adc.w	r0, r0, ip, lsl #23
 bx r14
 8002892:	4770      	bx	lr
.balign 4
5:
 subs r0,#1               @ worst-case error is 2ulps at Q24
 8002894:	3801      	subs	r0, #1
 lsrs r0,#1               @ pack and round
 8002896:	0840      	lsrs	r0, r0, #1
 adc r0,r0,r12,lsl#23
 8002898:	eb40 50cc 	adc.w	r0, r0, ip, lsl #23
 bx r14
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop

.balign 4
2:                        @ here we have odd exponent (e.g. 1<=x<2 Q23)
 cmp r1,#0x7f
 80028a0:	297f      	cmp	r1, #127	; 0x7f
 beq 6f                   @ +Inf/NaN?
 80028a2:	d033      	beq.n	800290c <qfp_fsqrt+0xe4>
 add r12,r1,#0x3f         @ exponent 7f->7f, 81->80 etc.
 80028a4:	f101 0c3f 	add.w	ip, r1, #63	; 0x3f
 ubfx r3,r2,#16,#7        @ extract 7 mantissa bits
 80028a8:	f3c2 4306 	ubfx	r3, r2, #16, #7
 adr r0,rsqrt_t1
 80028ac:	f2af 1008 	subw	r0, pc, #264	; 0x108
 ldrb r0,[r0,r3]          @ first approximation to result Q7
 80028b0:	5cc0      	ldrb	r0, [r0, r3]
 mul r3,r0,r0             @ approximation squared Q14
 80028b2:	fb00 f300 	mul.w	r3, r0, r0
 sub r1,r2,r3,lsl#9       @ first remainder Q23
 80028b6:	eba2 2143 	sub.w	r1, r2, r3, lsl #9
 lsls r1,#13              @ Q36
 80028ba:	0349      	lsls	r1, r1, #13
 sdiv r1,r1,r0            @ first correction*2 Q36/Q7=Q29
 80028bc:	fb91 f1f0 	sdiv	r1, r1, r0
 lsls r0,#7               @ Q14
 80028c0:	01c0      	lsls	r0, r0, #7
 add r0,r0,r1,asr#16      @ add in correction Q14
 80028c2:	eb00 4021 	add.w	r0, r0, r1, asr #16
 mul r3,r0,r0             @ Q28
 80028c6:	fb00 f300 	mul.w	r3, r0, r0
 rsb r1,r3,r2,lsl#5       @ second remainder Q28
 80028ca:	ebc3 1142 	rsb	r1, r3, r2, lsl #5
 lsls r1,#9               @ Q37
 80028ce:	0249      	lsls	r1, r1, #9
 sdiv r1,r1,r0            @ second correction*2 Q37/Q14=Q23
 80028d0:	fb91 f1f0 	sdiv	r1, r1, r0
 add r0,r1,r0,lsl#10      @ add in correction Q24
 80028d4:	eb01 2080 	add.w	r0, r1, r0, lsl #10
 mul r3,r0,r0             @ Q48
 80028d8:	fb00 f300 	mul.w	r3, r0, r0
 rsbs r3,r3,r2,lsl#25     @ remainder Q48
 80028dc:	ebd3 6342 	rsbs	r3, r3, r2, lsl #25
 bmi 4f                   @ when approximation is not exact, remainder happens always to be negative
 80028e0:	d404      	bmi.n	80028ec <qfp_fsqrt+0xc4>
 lsrs r0,#1               @ Q23 result
 80028e2:	0840      	lsrs	r0, r0, #1
 adc r0,r0,r12,lsl#23     @ pack and round (rounding can never tie)
 80028e4:	eb40 50cc 	adc.w	r0, r0, ip, lsl #23
 bx r14
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop

.balign 4
4:                        @ here approximation was too high
 subs r0,#1               @ adjust result
 80028ec:	3801      	subs	r0, #1
 mul r3,r0,r0
 80028ee:	fb00 f300 	mul.w	r3, r0, r0
 rsbs r3,r3,r2,lsl#25     @ recompute remainder Q48
 80028f2:	ebd3 6342 	rsbs	r3, r3, r2, lsl #25
 bmi 5f                   @ still incorrect?
 80028f6:	d403      	bmi.n	8002900 <qfp_fsqrt+0xd8>
 lsrs r0,#1               @ pack and round
 80028f8:	0840      	lsrs	r0, r0, #1
 adc r0,r0,r12,lsl#23
 80028fa:	eb40 50cc 	adc.w	r0, r0, ip, lsl #23
 bx r14
 80028fe:	4770      	bx	lr
.balign 4
5:
 subs r0,#1               @ worst-case error is 2ulps at Q24
 8002900:	3801      	subs	r0, #1
 lsrs r0,#1               @ pack and round
 8002902:	0840      	lsrs	r0, r0, #1
 adc r0,r0,r12,lsl#23
 8002904:	eb40 50cc 	adc.w	r0, r0, ip, lsl #23
 bx r14
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

.balign 4
6:                        @ +Inf/NaN
 lsls r1,r0,#9
 800290c:	0241      	lsls	r1, r0, #9
 bne 7f                   @ NaN? return modified NaN
 800290e:	d117      	bne.n	8002940 <qfp_fsqrt+0x118>
8:
 bx r14                   @ return +Inf
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop

.balign 4
3:                        @ 0/denormal
 cmp r0,#0
 8002914:	2800      	cmp	r0, #0
 beq 8b                   @ +0? return it
 8002916:	d0fb      	beq.n	8002910 <qfp_fsqrt+0xe8>
 clz r1,r0
 8002918:	fab0 f180 	clz	r1, r0
 subs r2,r1,#8
 800291c:	f1b1 0208 	subs.w	r2, r1, #8
 lsl r2,r0,r2             @ normalise
 8002920:	fa00 f202 	lsl.w	r2, r0, r2
 rsb r1,#9                @ adjust exponent
 8002924:	f1c1 0109 	rsb	r1, r1, #9
 lsrs r1,#1
 8002928:	0849      	lsrs	r1, r1, #1
 bcc 9b                   @ even exponent?
 800292a:	d385      	bcc.n	8002838 <qfp_fsqrt+0x10>
 b 2b                     @ odd exponent
 800292c:	e7b8      	b.n	80028a0 <qfp_fsqrt+0x78>
 800292e:	bf00      	nop

.balign 4
1:                        @ negative argument
 cmp r0,#0x80000000       @ -0? return it
 8002930:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 beq 8b
 8002934:	d0ec      	beq.n	8002910 <qfp_fsqrt+0xe8>
 cmn r0,#0x00800000       @ NaN? return modified NaN
 8002936:	f510 0f00 	cmn.w	r0, #8388608	; 0x800000
 bhi 7f
 800293a:	d801      	bhi.n	8002940 <qfp_fsqrt+0x118>
 mov r0,#0xff000000       @ finite negative argument: return NaN
 800293c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
7:
 orr r0,#0x00c00000
 8002940:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 bx r14
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop

08002948 <atan_t0>:
 8002948:	00000000 	.word	0x00000000
 800294c:	01fffd55 	.word	0x01fffd55
 8002950:	03ffeaab 	.word	0x03ffeaab
 8002954:	05ffb806 	.word	0x05ffb806
 8002958:	07ff556f 	.word	0x07ff556f
 800295c:	09feb2f9 	.word	0x09feb2f9
 8002960:	0bfdc0c2 	.word	0x0bfdc0c2
 8002964:	0dfc6ef9 	.word	0x0dfc6ef9
 8002968:	0ffaaddc 	.word	0x0ffaaddc
 800296c:	11f86dbf 	.word	0x11f86dbf
 8002970:	13f59f0e 	.word	0x13f59f0e
 8002974:	15f23250 	.word	0x15f23250
 8002978:	17ee1826 	.word	0x17ee1826
 800297c:	19e94154 	.word	0x19e94154
 8002980:	1be39ebe 	.word	0x1be39ebe
 8002984:	1ddd2170 	.word	0x1ddd2170
 8002988:	1fd5ba9b 	.word	0x1fd5ba9b
 800298c:	21cd5b9a 	.word	0x21cd5b9a
 8002990:	23c3f5f6 	.word	0x23c3f5f6
 8002994:	25b97b66 	.word	0x25b97b66
 8002998:	27adddd2 	.word	0x27adddd2
 800299c:	29a10f54 	.word	0x29a10f54
 80029a0:	2b93023c 	.word	0x2b93023c
 80029a4:	2d83a913 	.word	0x2d83a913
 80029a8:	2f72f698 	.word	0x2f72f698
 80029ac:	3160ddc5 	.word	0x3160ddc5
 80029b0:	334d51d3 	.word	0x334d51d3
 80029b4:	35384637 	.word	0x35384637
 80029b8:	3721aea5 	.word	0x3721aea5
 80029bc:	39097f15 	.word	0x39097f15
 80029c0:	3aefabbe 	.word	0x3aefabbe
 80029c4:	3cd4291d 	.word	0x3cd4291d
 80029c8:	3eb6ebf2 	.word	0x3eb6ebf2
 80029cc:	4097e944 	.word	0x4097e944
 80029d0:	4277165f 	.word	0x4277165f
 80029d4:	445468d9 	.word	0x445468d9
 80029d8:	462fd68c 	.word	0x462fd68c
 80029dc:	480955a0 	.word	0x480955a0
 80029e0:	49e0dc81 	.word	0x49e0dc81
 80029e4:	4bb661ea 	.word	0x4bb661ea
 80029e8:	4d89dcdc 	.word	0x4d89dcdc
 80029ec:	4f5b44a5 	.word	0x4f5b44a5
 80029f0:	512a90db 	.word	0x512a90db
 80029f4:	52f7b962 	.word	0x52f7b962
 80029f8:	54c2b665 	.word	0x54c2b665
 80029fc:	568b805d 	.word	0x568b805d
 8002a00:	5852100c 	.word	0x5852100c
 8002a04:	5a165e7d 	.word	0x5a165e7d
 8002a08:	5bd86508 	.word	0x5bd86508
 8002a0c:	5d981d4a 	.word	0x5d981d4a
 8002a10:	5f55812e 	.word	0x5f55812e
 8002a14:	61108ae3 	.word	0x61108ae3
 8002a18:	62c934e5 	.word	0x62c934e5
 8002a1c:	647f79f3 	.word	0x647f79f3
 8002a20:	66335515 	.word	0x66335515
 8002a24:	67e4c198 	.word	0x67e4c198
 8002a28:	6993bb0f 	.word	0x6993bb0f
 8002a2c:	6b403d51 	.word	0x6b403d51
 8002a30:	6cea4477 	.word	0x6cea4477
 8002a34:	6e91ccde 	.word	0x6e91ccde
 8002a38:	7036d325 	.word	0x7036d325
 8002a3c:	71d9542b 	.word	0x71d9542b
 8002a40:	73794d0d 	.word	0x73794d0d
 8002a44:	7516bb28 	.word	0x7516bb28
 8002a48:	76b19c16 	.word	0x76b19c16
 8002a4c:	7849edac 	.word	0x7849edac
 8002a50:	79dfadfc 	.word	0x79dfadfc
 8002a54:	7b72db51 	.word	0x7b72db51
 8002a58:	7d03742d 	.word	0x7d03742d
 8002a5c:	7e91774c 	.word	0x7e91774c
 8002a60:	801ce39e 	.word	0x801ce39e
 8002a64:	81a5b849 	.word	0x81a5b849
 8002a68:	832bf4a7 	.word	0x832bf4a7
 8002a6c:	84af9843 	.word	0x84af9843
 8002a70:	8630a2db 	.word	0x8630a2db
 8002a74:	87af145b 	.word	0x87af145b
 8002a78:	892aece0 	.word	0x892aece0
 8002a7c:	8aa42cb2 	.word	0x8aa42cb2
 8002a80:	8c1ad446 	.word	0x8c1ad446
 8002a84:	8d8ee43d 	.word	0x8d8ee43d
 8002a88:	8f005d5f 	.word	0x8f005d5f
 8002a8c:	906f409f 	.word	0x906f409f
 8002a90:	91db8f16 	.word	0x91db8f16
 8002a94:	93454a03 	.word	0x93454a03
 8002a98:	94ac72ca 	.word	0x94ac72ca
 8002a9c:	96110af0 	.word	0x96110af0
 8002aa0:	97731420 	.word	0x97731420
 8002aa4:	98d29024 	.word	0x98d29024
 8002aa8:	9a2f80e6 	.word	0x9a2f80e6
 8002aac:	9b89e870 	.word	0x9b89e870
 8002ab0:	9ce1c8e7 	.word	0x9ce1c8e7
 8002ab4:	9e37248e 	.word	0x9e37248e
 8002ab8:	9f89fdc5 	.word	0x9f89fdc5
 8002abc:	a0da5703 	.word	0xa0da5703
 8002ac0:	a22832dc 	.word	0xa22832dc
 8002ac4:	a37393f8 	.word	0xa37393f8
 8002ac8:	a4bc7d19 	.word	0xa4bc7d19
 8002acc:	a602f117 	.word	0xa602f117
 8002ad0:	a746f2de 	.word	0xa746f2de
 8002ad4:	a888856e 	.word	0xa888856e
 8002ad8:	a9c7abdc 	.word	0xa9c7abdc
 8002adc:	ab04694e 	.word	0xab04694e
 8002ae0:	ac3ec0fc 	.word	0xac3ec0fc
 8002ae4:	ad76b62d 	.word	0xad76b62d
 8002ae8:	aeac4c39 	.word	0xaeac4c39
 8002aec:	afdf8687 	.word	0xafdf8687
 8002af0:	b110688b 	.word	0xb110688b
 8002af4:	b23ef5c7 	.word	0xb23ef5c7
 8002af8:	b36b31c9 	.word	0xb36b31c9
 8002afc:	b495202b 	.word	0xb495202b
 8002b00:	b5bcc490 	.word	0xb5bcc490
 8002b04:	b6e222a9 	.word	0xb6e222a9
 8002b08:	b8053e2c 	.word	0xb8053e2c
 8002b0c:	b9261ada 	.word	0xb9261ada
 8002b10:	ba44bc7e 	.word	0xba44bc7e
 8002b14:	bb6126e6 	.word	0xbb6126e6
 8002b18:	bc7b5deb 	.word	0xbc7b5deb
 8002b1c:	bd936569 	.word	0xbd936569
 8002b20:	bea94145 	.word	0xbea94145
 8002b24:	bfbcf566 	.word	0xbfbcf566
 8002b28:	c0ce85b9 	.word	0xc0ce85b9
 8002b2c:	c1ddf62e 	.word	0xc1ddf62e
 8002b30:	c2eb4abb 	.word	0xc2eb4abb
 8002b34:	c3f68757 	.word	0xc3f68757
 8002b38:	c4ffaffb 	.word	0xc4ffaffb
 8002b3c:	c606c8a3 	.word	0xc606c8a3
 8002b40:	c70bd54d 	.word	0xc70bd54d
 8002b44:	c80ed9f7 	.word	0xc80ed9f7
 8002b48:	c90fdaa2 	.word	0xc90fdaa2

08002b4c <qfp_fatan2>:
.endm

.balign 4
.thumb_func
qfp_fatan2:
 ubfx r3,r1,#23,#8        @ extract x exponent
 8002b4c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 ubfx r2,r0,#23,#8        @ extract y exponent
 8002b50:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 cbz r3,86f               @ x 0/denormal?
 8002b54:	b1d3      	cbz	r3, 8002b8c <qfp_fatan2+0x40>
 cmp r3,#0xff
 8002b56:	2bff      	cmp	r3, #255	; 0xff
 beq 87f                  @ x Inf/NaN?
 8002b58:	d052      	beq.n	8002c00 <qfp_fatan2+0xb4>
62:
 cbz r2,84f               @ y 0/denormal?
 8002b5a:	b32a      	cbz	r2, 8002ba8 <qfp_fatan2+0x5c>
 cmp r2,#0xff
 8002b5c:	2aff      	cmp	r2, #255	; 0xff
 beq 85f                  @ y Inf/NaN?
 8002b5e:	d059      	beq.n	8002c14 <qfp_fatan2+0xc8>
42:

 movs r12,#1
 8002b60:	f05f 0c01 	movs.w	ip, #1
 bfi r0,r12,#23,#8        @ insert implied 1:s
 8002b64:	f36c 50de 	bfi	r0, ip, #23, #8
 bfi r1,r12,#23,#8        @ now both Q23 1..2 plus sign bit
 8002b68:	f36c 51de 	bfi	r1, ip, #23, #8
 lsls r1,#1               @ Q24
 8002b6c:	0049      	lsls	r1, r1, #1
 bcs 1f                   @ x<0?
 8002b6e:	f080 8235 	bcs.w	8002fdc <qfp_fatan2+0x490>
 lsls r0,#1               @ Q24
 8002b72:	0040      	lsls	r0, r0, #1
 bcs 2f                   @ y<0?
 8002b74:	f080 8140 	bcs.w	8002df8 <qfp_fatan2+0x2ac>
                          @ here x positive, y positive
 subs r2,r3               @ exponent difference ey-ex
 8002b78:	1ad2      	subs	r2, r2, r3
 it eq
 8002b7a:	bf08      	it	eq
 cmpeq r0,r1
 8002b7c:	4288      	cmpeq	r0, r1
 bge 3f                   @ |y|>|x|?
 8002b7e:	f280 80c7 	bge.w	8002d10 <qfp_fatan2+0x1c4>
 rsbs r2,#0               @ exponent difference ex-ey
 8002b82:	4252      	negs	r2, r2
 cmp r2,#5
 8002b84:	2a05      	cmp	r2, #5
 bhi 4f                   @ ex-ey>5?
 8002b86:	f200 8085 	bhi.w	8002c94 <qfp_fatan2+0x148>
 b 99f
 8002b8a:	e04d      	b.n	8002c28 <qfp_fatan2+0xdc>

.balign 4
86:
 lsls r1,#1               @ x 0/denormal: save sign
 8002b8c:	0049      	lsls	r1, r1, #1
 beq 61f                  @ x=0?
 8002b8e:	d019      	beq.n	8002bc4 <qfp_fatan2+0x78>
 clz r3,r1
 8002b90:	fab1 f381 	clz	r3, r1
 lsl r1,r3                @ normalise
 8002b94:	fa01 f103 	lsl.w	r1, r1, r3
 lsr r1,#7                @ Q23
 8002b98:	ea4f 11d1 	mov.w	r1, r1, lsr #7
 rrxs r1,r1               @ restore sign
 8002b9c:	ea5f 0131 	movs.w	r1, r1, rrx
 rsb r3,#8                @ fix exponent
 8002ba0:	f1c3 0308 	rsb	r3, r3, #8
 b 62b
 8002ba4:	e7d9      	b.n	8002b5a <qfp_fatan2+0xe>
 8002ba6:	bf00      	nop

.balign 4
84:
 lsls r0,#1               @ y 0/denormal: save sign
 8002ba8:	0040      	lsls	r0, r0, #1
 beq 41f                  @ y=0?
 8002baa:	d021      	beq.n	8002bf0 <qfp_fatan2+0xa4>
 clz r2,r0
 8002bac:	fab0 f280 	clz	r2, r0
 lsl r0,r2                @ normalise
 8002bb0:	fa00 f002 	lsl.w	r0, r0, r2
 lsr r0,#7                @ Q23
 8002bb4:	ea4f 10d0 	mov.w	r0, r0, lsr #7
 rrxs r0,r0               @ restore sign
 8002bb8:	ea5f 0030 	movs.w	r0, r0, rrx
 rsb r2,#8                @ fix exponent
 8002bbc:	f1c2 0208 	rsb	r2, r2, #8
 b 42b
 8002bc0:	e7ce      	b.n	8002b60 <qfp_fatan2+0x14>
 8002bc2:	bf00      	nop

.balign 4
61:                       @ x is +/-0
 rrxs r1,r1               @ restore sign
 8002bc4:	ea5f 0131 	movs.w	r1, r1, rrx
 lsls r12,r0,#1
 8002bc8:	ea5f 0c40 	movs.w	ip, r0, lsl #1
 beq 63f                  @ y also +/-0?
 8002bcc:	d004      	beq.n	8002bd8 <qfp_fatan2+0x8c>
 orr r1,r1,#0x00800000
 8002bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 mvn r3,#256              @ treat 0 as very small (signed) value
 8002bd2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 b 62b
 8002bd6:	e7c0      	b.n	8002b5a <qfp_fatan2+0xe>

.balign 4
63:                       @ both x and y are 0
 movlong r0,0x40490fdb*2  @ pi in IEEE format <<1
 8002bd8:	f641 70b6 	movw	r0, #8118	; 0x1fb6
 8002bdc:	f2c8 0092 	movt	r0, #32914	; 0x8092
 teq r1,#0                @ x=+0?
 8002be0:	f091 0f00 	teq	r1, #0
 it eq
 8002be4:	bf08      	it	eq
 moveq r0,#0              @ then result is signed zero
 8002be6:	2000      	moveq	r0, #0
 rrxs r0,r0               @ bring in sign bit from y
 8002be8:	ea5f 0030 	movs.w	r0, r0, rrx
 bx r14
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop

.balign 4
41:                       @ y is +/-0
 rrxs r0,r0               @ restore sign
 8002bf0:	ea5f 0030 	movs.w	r0, r0, rrx
 orr r0,r0,#0x00800000
 8002bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 mvn r2,#256              @ treat 0 as very small (signed) value
 8002bf8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 b 42b
 8002bfc:	e7b0      	b.n	8002b60 <qfp_fatan2+0x14>
 8002bfe:	bf00      	nop

.balign 4
87:                       @ x is Inf or NaN
 lsls r3,r1,#9
 8002c00:	024b      	lsls	r3, r1, #9
 beq 71f                  @ x=Inf?
 8002c02:	d003      	beq.n	8002c0c <qfp_fatan2+0xc0>
 orr r0,r1,#0x00400000    @ return modified NaN
 8002c04:	f441 0080 	orr.w	r0, r1, #4194304	; 0x400000
 bx r14
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
.balign 4
71:
 mov r3,#1024             @ treat Inf as very large (signed) value
 8002c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 b 62b
 8002c10:	e7a3      	b.n	8002b5a <qfp_fatan2+0xe>
 8002c12:	bf00      	nop

.balign 4
85:                       @ y is Inf or NaN
 lsls r2,r0,#9
 8002c14:	0242      	lsls	r2, r0, #9
 beq 51f                  @ y=Inf?
 8002c16:	d003      	beq.n	8002c20 <qfp_fatan2+0xd4>
 orr r0,r0,#0x00400000    @ return modified NaN
 8002c18:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 bx r14
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
.balign 4
51:
 mov r2,#1024             @ treat Inf as very large (signed) value
 8002c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 b 42b
 8002c24:	e79c      	b.n	8002b60 <qfp_fatan2+0x14>
 8002c26:	bf00      	nop

.balign 4
99:
 atan_s0 r0,r1            @ compute result
 8002c28:	01c0      	lsls	r0, r0, #7
 8002c2a:	40d0      	lsrs	r0, r2
 8002c2c:	fbb0 f2f1 	udiv	r2, r0, r1
 8002c30:	f2af 23ec 	subw	r3, pc, #748	; 0x2ec
 8002c34:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 8002c38:	fb02 0311 	mls	r3, r2, r1, r0
 8002c3c:	0a40      	lsrs	r0, r0, #9
 8002c3e:	4350      	muls	r0, r2
 8002c40:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002c44:	015b      	lsls	r3, r3, #5
 8002c46:	0a4a      	lsrs	r2, r1, #9
 8002c48:	fb93 f2f2 	sdiv	r2, r3, r2
 8002c4c:	eb0c 4c02 	add.w	ip, ip, r2, lsl #16
 8002c50:	fb02 f002 	mul.w	r0, r2, r2
 8002c54:	4350      	muls	r0, r2
 8002c56:	eb00 00a0 	add.w	r0, r0, r0, asr #2
 8002c5a:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8002c5e:	eb00 2020 	add.w	r0, r0, r0, asr #8
 8002c62:	ebac 4ca0 	sub.w	ip, ip, r0, asr #18
 8002c66:	1218      	asrs	r0, r3, #8
 8002c68:	4350      	muls	r0, r2
 8002c6a:	eb01 30e0 	add.w	r0, r1, r0, asr #15
 8002c6e:	0849      	lsrs	r1, r1, #1
 8002c70:	4351      	muls	r1, r2
 8002c72:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
 8002c76:	0bc0      	lsrs	r0, r0, #15
 8002c78:	fb93 f0f0 	sdiv	r0, r3, r0
 8002c7c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 atan_s1 0x7d
 8002c80:	fab0 f180 	clz	r1, r0
 8002c84:	4088      	lsls	r0, r1
 8002c86:	f1c1 017d 	rsb	r1, r1, #125	; 0x7d
 8002c8a:	0a00      	lsrs	r0, r0, #8
 8002c8c:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
.balign 4
4:
 atan_s2 r0,r1            @ compute result
 8002c94:	01c0      	lsls	r0, r0, #7
 8002c96:	0109      	lsls	r1, r1, #4
 8002c98:	ea5f 3c11 	movs.w	ip, r1, lsr #12
 8002c9c:	fbb0 f3fc 	udiv	r3, r0, ip
 8002ca0:	0300      	lsls	r0, r0, #12
 8002ca2:	fb03 0011 	mls	r0, r3, r1, r0
 8002ca6:	0080      	lsls	r0, r0, #2
 8002ca8:	fb90 f0fc 	sdiv	r0, r0, ip
 8002cac:	eb10 3083 	adds.w	r0, r0, r3, lsl #14
 8002cb0:	2aff      	cmp	r2, #255	; 0xff
 8002cb2:	bfc8      	it	gt
 8002cb4:	22ff      	movgt	r2, #255	; 0xff
 8002cb6:	0bc1      	lsrs	r1, r0, #15
 8002cb8:	fb01 f301 	mul.w	r3, r1, r1
 8002cbc:	0bdb      	lsrs	r3, r3, #15
 8002cbe:	4359      	muls	r1, r3
 8002cc0:	40d1      	lsrs	r1, r2
 8002cc2:	40d1      	lsrs	r1, r2
 8002cc4:	eb01 0191 	add.w	r1, r1, r1, lsr #2
 8002cc8:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 8002ccc:	eb01 2111 	add.w	r1, r1, r1, lsr #8
 8002cd0:	3108      	adds	r1, #8
 8002cd2:	1a40      	subs	r0, r0, r1
 8002cd4:	0a09      	lsrs	r1, r1, #8
 8002cd6:	4359      	muls	r1, r3
 8002cd8:	40d1      	lsrs	r1, r2
 8002cda:	40d1      	lsrs	r1, r2
 8002cdc:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 atan_s3 0
 8002ce0:	fab0 f380 	clz	r3, r0
 8002ce4:	4098      	lsls	r0, r3
 8002ce6:	441a      	add	r2, r3
 8002ce8:	f1b2 0380 	subs.w	r3, r2, #128	; 0x80
 8002cec:	dc06      	bgt.n	8002cfc <qfp_fatan2+0x1b0>
 8002cee:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8002cf2:	0a00      	lsrs	r0, r0, #8
 8002cf4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	dc05      	bgt.n	8002d0c <qfp_fatan2+0x1c0>
 8002d00:	40d8      	lsrs	r0, r3
 8002d02:	0a00      	lsrs	r0, r0, #8
 8002d04:	f140 0000 	adc.w	r0, r0, #0
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	4770      	bx	lr

.balign 4
3:
 cmp r2,#5
 8002d10:	2a05      	cmp	r2, #5
 bhi 4f                   @ ey-ex>5?
 8002d12:	d83b      	bhi.n	8002d8c <qfp_fatan2+0x240>
 atan_s0 r1,r0            @ compute first octant result
 8002d14:	01c9      	lsls	r1, r1, #7
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	fbb1 f2f0 	udiv	r2, r1, r0
 8002d1c:	f2af 33d8 	subw	r3, pc, #984	; 0x3d8
 8002d20:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 8002d24:	fb02 1310 	mls	r3, r2, r0, r1
 8002d28:	0a49      	lsrs	r1, r1, #9
 8002d2a:	4351      	muls	r1, r2
 8002d2c:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 8002d30:	015b      	lsls	r3, r3, #5
 8002d32:	0a4a      	lsrs	r2, r1, #9
 8002d34:	fb93 f2f2 	sdiv	r2, r3, r2
 8002d38:	eb0c 4c02 	add.w	ip, ip, r2, lsl #16
 8002d3c:	fb02 f002 	mul.w	r0, r2, r2
 8002d40:	4350      	muls	r0, r2
 8002d42:	eb00 00a0 	add.w	r0, r0, r0, asr #2
 8002d46:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8002d4a:	eb00 2020 	add.w	r0, r0, r0, asr #8
 8002d4e:	ebac 4ca0 	sub.w	ip, ip, r0, asr #18
 8002d52:	1218      	asrs	r0, r3, #8
 8002d54:	4350      	muls	r0, r2
 8002d56:	eb01 30e0 	add.w	r0, r1, r0, asr #15
 8002d5a:	0849      	lsrs	r1, r1, #1
 8002d5c:	4351      	muls	r1, r2
 8002d5e:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
 8002d62:	0bc0      	lsrs	r0, r0, #15
 8002d64:	fb93 f0f0 	sdiv	r0, r3, r0
 8002d68:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 movlong r1,0xC90FDAA2    @ pi/2 Q31
 8002d6c:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 8002d70:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 sub r0,r1,r0,lsr#1       @ subtract from pi/2
 8002d74:	eba1 0050 	sub.w	r0, r1, r0, lsr #1
 atan_s1 0x7e
 8002d78:	fab0 f180 	clz	r1, r0
 8002d7c:	4088      	lsls	r0, r1
 8002d7e:	f1c1 017e 	rsb	r1, r1, #126	; 0x7e
 8002d82:	0a00      	lsrs	r0, r0, #8
 8002d84:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
.balign 4
4:
 atan_s2 r1,r0            @ compute first octant result
 8002d8c:	01c9      	lsls	r1, r1, #7
 8002d8e:	0100      	lsls	r0, r0, #4
 8002d90:	ea5f 3c10 	movs.w	ip, r0, lsr #12
 8002d94:	fbb1 f3fc 	udiv	r3, r1, ip
 8002d98:	0309      	lsls	r1, r1, #12
 8002d9a:	fb03 1110 	mls	r1, r3, r0, r1
 8002d9e:	0089      	lsls	r1, r1, #2
 8002da0:	fb91 f1fc 	sdiv	r1, r1, ip
 8002da4:	eb11 3083 	adds.w	r0, r1, r3, lsl #14
 8002da8:	2aff      	cmp	r2, #255	; 0xff
 8002daa:	bfc8      	it	gt
 8002dac:	22ff      	movgt	r2, #255	; 0xff
 8002dae:	0bc1      	lsrs	r1, r0, #15
 8002db0:	fb01 f301 	mul.w	r3, r1, r1
 8002db4:	0bdb      	lsrs	r3, r3, #15
 8002db6:	4359      	muls	r1, r3
 8002db8:	40d1      	lsrs	r1, r2
 8002dba:	40d1      	lsrs	r1, r2
 8002dbc:	eb01 0191 	add.w	r1, r1, r1, lsr #2
 8002dc0:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 8002dc4:	eb01 2111 	add.w	r1, r1, r1, lsr #8
 8002dc8:	3108      	adds	r1, #8
 8002dca:	1a40      	subs	r0, r0, r1
 8002dcc:	0a09      	lsrs	r1, r1, #8
 8002dce:	4359      	muls	r1, r3
 8002dd0:	40d1      	lsrs	r1, r2
 8002dd2:	40d1      	lsrs	r1, r2
 8002dd4:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 lsrs r0,r2               @ return to fixed point
 8002dd8:	40d0      	lsrs	r0, r2
 movlong r1,0xC90FDAA2    @ pi/2 Q31
 8002dda:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 8002dde:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 sub r0,r1,r0,lsl#2       @ subtract from pi/2
 8002de2:	eba1 0080 	sub.w	r0, r1, r0, lsl #2
 atan_s1 0x7e
 8002de6:	fab0 f180 	clz	r1, r0
 8002dea:	4088      	lsls	r0, r1
 8002dec:	f1c1 017e 	rsb	r1, r1, #126	; 0x7e
 8002df0:	0a00      	lsrs	r0, r0, #8
 8002df2:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 8002df6:	4770      	bx	lr

.balign 4
2:                        @ here x positive, y negative
 subs r2,r3               @ exponent difference ey-ex
 8002df8:	1ad2      	subs	r2, r2, r3
 it eq
 8002dfa:	bf08      	it	eq
 cmpeq r0,r1
 8002dfc:	4288      	cmpeq	r0, r1
 bge 3f                   @ |y|>|x|?
 8002dfe:	da79      	bge.n	8002ef4 <qfp_fatan2+0x3a8>
 rsbs r2,#0               @ exponent difference ex-ey
 8002e00:	4252      	negs	r2, r2
 cmp r2,#5
 8002e02:	2a05      	cmp	r2, #5
 bhi 4f                   @ ex-ey>5?
 8002e04:	d836      	bhi.n	8002e74 <qfp_fatan2+0x328>
 atan_s0 r0,r1            @ compute result
 8002e06:	01c0      	lsls	r0, r0, #7
 8002e08:	40d0      	lsrs	r0, r2
 8002e0a:	fbb0 f2f1 	udiv	r2, r0, r1
 8002e0e:	f2af 43c8 	subw	r3, pc, #1224	; 0x4c8
 8002e12:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 8002e16:	fb02 0311 	mls	r3, r2, r1, r0
 8002e1a:	0a40      	lsrs	r0, r0, #9
 8002e1c:	4350      	muls	r0, r2
 8002e1e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002e22:	015b      	lsls	r3, r3, #5
 8002e24:	0a4a      	lsrs	r2, r1, #9
 8002e26:	fb93 f2f2 	sdiv	r2, r3, r2
 8002e2a:	eb0c 4c02 	add.w	ip, ip, r2, lsl #16
 8002e2e:	fb02 f002 	mul.w	r0, r2, r2
 8002e32:	4350      	muls	r0, r2
 8002e34:	eb00 00a0 	add.w	r0, r0, r0, asr #2
 8002e38:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8002e3c:	eb00 2020 	add.w	r0, r0, r0, asr #8
 8002e40:	ebac 4ca0 	sub.w	ip, ip, r0, asr #18
 8002e44:	1218      	asrs	r0, r3, #8
 8002e46:	4350      	muls	r0, r2
 8002e48:	eb01 30e0 	add.w	r0, r1, r0, asr #15
 8002e4c:	0849      	lsrs	r1, r1, #1
 8002e4e:	4351      	muls	r1, r2
 8002e50:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
 8002e54:	0bc0      	lsrs	r0, r0, #15
 8002e56:	fb93 f0f0 	sdiv	r0, r3, r0
 8002e5a:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 atan_s1x 0x7d,0x100
 8002e5e:	fab0 f180 	clz	r1, r0
 8002e62:	4088      	lsls	r0, r1
 8002e64:	f1c1 017d 	rsb	r1, r1, #125	; 0x7d
 8002e68:	f511 7180 	adds.w	r1, r1, #256	; 0x100
 8002e6c:	0a00      	lsrs	r0, r0, #8
 8002e6e:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 8002e72:	4770      	bx	lr
.balign 4
4:
 atan_s2 r0,r1            @ compute result
 8002e74:	01c0      	lsls	r0, r0, #7
 8002e76:	0109      	lsls	r1, r1, #4
 8002e78:	ea5f 3c11 	movs.w	ip, r1, lsr #12
 8002e7c:	fbb0 f3fc 	udiv	r3, r0, ip
 8002e80:	0300      	lsls	r0, r0, #12
 8002e82:	fb03 0011 	mls	r0, r3, r1, r0
 8002e86:	0080      	lsls	r0, r0, #2
 8002e88:	fb90 f0fc 	sdiv	r0, r0, ip
 8002e8c:	eb10 3083 	adds.w	r0, r0, r3, lsl #14
 8002e90:	2aff      	cmp	r2, #255	; 0xff
 8002e92:	bfc8      	it	gt
 8002e94:	22ff      	movgt	r2, #255	; 0xff
 8002e96:	0bc1      	lsrs	r1, r0, #15
 8002e98:	fb01 f301 	mul.w	r3, r1, r1
 8002e9c:	0bdb      	lsrs	r3, r3, #15
 8002e9e:	4359      	muls	r1, r3
 8002ea0:	40d1      	lsrs	r1, r2
 8002ea2:	40d1      	lsrs	r1, r2
 8002ea4:	eb01 0191 	add.w	r1, r1, r1, lsr #2
 8002ea8:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 8002eac:	eb01 2111 	add.w	r1, r1, r1, lsr #8
 8002eb0:	3108      	adds	r1, #8
 8002eb2:	1a40      	subs	r0, r0, r1
 8002eb4:	0a09      	lsrs	r1, r1, #8
 8002eb6:	4359      	muls	r1, r3
 8002eb8:	40d1      	lsrs	r1, r2
 8002eba:	40d1      	lsrs	r1, r2
 8002ebc:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 atan_s3 1
 8002ec0:	fab0 f380 	clz	r3, r0
 8002ec4:	4098      	lsls	r0, r3
 8002ec6:	441a      	add	r2, r3
 8002ec8:	f1b2 0380 	subs.w	r3, r2, #128	; 0x80
 8002ecc:	dc06      	bgt.n	8002edc <qfp_fatan2+0x390>
 8002ece:	f5c2 72c0 	rsb	r2, r2, #384	; 0x180
 8002ed2:	0a00      	lsrs	r0, r0, #8
 8002ed4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	dc05      	bgt.n	8002eec <qfp_fatan2+0x3a0>
 8002ee0:	40d8      	lsrs	r0, r3
 8002ee2:	0a00      	lsrs	r0, r0, #8
 8002ee4:	f140 4000 	adc.w	r0, r0, #2147483648	; 0x80000000
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop

.balign 4
3:
 cmp r2,#5
 8002ef4:	2a05      	cmp	r2, #5
 bhi 4f                   @ ey-ex>5?
 8002ef6:	d83b      	bhi.n	8002f70 <qfp_fatan2+0x424>
 atan_s0 r1,r0            @ compute first octant result
 8002ef8:	01c9      	lsls	r1, r1, #7
 8002efa:	40d1      	lsrs	r1, r2
 8002efc:	fbb1 f2f0 	udiv	r2, r1, r0
 8002f00:	f2af 53bc 	subw	r3, pc, #1468	; 0x5bc
 8002f04:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 8002f08:	fb02 1310 	mls	r3, r2, r0, r1
 8002f0c:	0a49      	lsrs	r1, r1, #9
 8002f0e:	4351      	muls	r1, r2
 8002f10:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 8002f14:	015b      	lsls	r3, r3, #5
 8002f16:	0a4a      	lsrs	r2, r1, #9
 8002f18:	fb93 f2f2 	sdiv	r2, r3, r2
 8002f1c:	eb0c 4c02 	add.w	ip, ip, r2, lsl #16
 8002f20:	fb02 f002 	mul.w	r0, r2, r2
 8002f24:	4350      	muls	r0, r2
 8002f26:	eb00 00a0 	add.w	r0, r0, r0, asr #2
 8002f2a:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8002f2e:	eb00 2020 	add.w	r0, r0, r0, asr #8
 8002f32:	ebac 4ca0 	sub.w	ip, ip, r0, asr #18
 8002f36:	1218      	asrs	r0, r3, #8
 8002f38:	4350      	muls	r0, r2
 8002f3a:	eb01 30e0 	add.w	r0, r1, r0, asr #15
 8002f3e:	0849      	lsrs	r1, r1, #1
 8002f40:	4351      	muls	r1, r2
 8002f42:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
 8002f46:	0bc0      	lsrs	r0, r0, #15
 8002f48:	fb93 f0f0 	sdiv	r0, r3, r0
 8002f4c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 movlong r1,0xC90FDAA2    @ pi/2 Q31
 8002f50:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 8002f54:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 sub r0,r1,r0,lsr#1       @ subtract from pi/2
 8002f58:	eba1 0050 	sub.w	r0, r1, r0, lsr #1
 atan_s1 0x17e
 8002f5c:	fab0 f180 	clz	r1, r0
 8002f60:	4088      	lsls	r0, r1
 8002f62:	f5c1 71bf 	rsb	r1, r1, #382	; 0x17e
 8002f66:	0a00      	lsrs	r0, r0, #8
 8002f68:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
.balign 4
4:
 atan_s2 r1,r0            @ compute first octant result
 8002f70:	01c9      	lsls	r1, r1, #7
 8002f72:	0100      	lsls	r0, r0, #4
 8002f74:	ea5f 3c10 	movs.w	ip, r0, lsr #12
 8002f78:	fbb1 f3fc 	udiv	r3, r1, ip
 8002f7c:	0309      	lsls	r1, r1, #12
 8002f7e:	fb03 1110 	mls	r1, r3, r0, r1
 8002f82:	0089      	lsls	r1, r1, #2
 8002f84:	fb91 f1fc 	sdiv	r1, r1, ip
 8002f88:	eb11 3083 	adds.w	r0, r1, r3, lsl #14
 8002f8c:	2aff      	cmp	r2, #255	; 0xff
 8002f8e:	bfc8      	it	gt
 8002f90:	22ff      	movgt	r2, #255	; 0xff
 8002f92:	0bc1      	lsrs	r1, r0, #15
 8002f94:	fb01 f301 	mul.w	r3, r1, r1
 8002f98:	0bdb      	lsrs	r3, r3, #15
 8002f9a:	4359      	muls	r1, r3
 8002f9c:	40d1      	lsrs	r1, r2
 8002f9e:	40d1      	lsrs	r1, r2
 8002fa0:	eb01 0191 	add.w	r1, r1, r1, lsr #2
 8002fa4:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 8002fa8:	eb01 2111 	add.w	r1, r1, r1, lsr #8
 8002fac:	3108      	adds	r1, #8
 8002fae:	1a40      	subs	r0, r0, r1
 8002fb0:	0a09      	lsrs	r1, r1, #8
 8002fb2:	4359      	muls	r1, r3
 8002fb4:	40d1      	lsrs	r1, r2
 8002fb6:	40d1      	lsrs	r1, r2
 8002fb8:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 lsrs r0,r2               @ return to fixed point
 8002fbc:	40d0      	lsrs	r0, r2
 movlong r1,0xC90FDAA2    @ pi/2 Q31
 8002fbe:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 8002fc2:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 sub r0,r1,r0,lsl#2       @ subtract from pi/2
 8002fc6:	eba1 0080 	sub.w	r0, r1, r0, lsl #2
 atan_s1 0x17e
 8002fca:	fab0 f180 	clz	r1, r0
 8002fce:	4088      	lsls	r0, r1
 8002fd0:	f5c1 71bf 	rsb	r1, r1, #382	; 0x17e
 8002fd4:	0a00      	lsrs	r0, r0, #8
 8002fd6:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 8002fda:	4770      	bx	lr

.balign 4
1:                        @ here x<0
 lsls r0,#1
 8002fdc:	0040      	lsls	r0, r0, #1
 bcs 2f                   @ y<0?
 8002fde:	f080 80ed 	bcs.w	80031bc <qfp_fatan2+0x670>
                          @ here x negative, y positive
 subs r2,r3               @ exponent difference ey-ex
 8002fe2:	1ad2      	subs	r2, r2, r3
 it eq
 8002fe4:	bf08      	it	eq
 cmpeq r0,r1
 8002fe6:	4288      	cmpeq	r0, r1
 bge 3f                   @ |y|>|x|?
 8002fe8:	da74      	bge.n	80030d4 <qfp_fatan2+0x588>
 rsbs r2,#0               @ exponent difference ex-ey
 8002fea:	4252      	negs	r2, r2
 cmp r2,#5
 8002fec:	2a05      	cmp	r2, #5
 bhi 4f                   @ ex-ey>5?
 8002fee:	d83b      	bhi.n	8003068 <qfp_fatan2+0x51c>
 atan_s0 r0,r1            @ compute result
 8002ff0:	01c0      	lsls	r0, r0, #7
 8002ff2:	40d0      	lsrs	r0, r2
 8002ff4:	fbb0 f2f1 	udiv	r2, r0, r1
 8002ff8:	f2af 63b4 	subw	r3, pc, #1716	; 0x6b4
 8002ffc:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 8003000:	fb02 0311 	mls	r3, r2, r1, r0
 8003004:	0a40      	lsrs	r0, r0, #9
 8003006:	4350      	muls	r0, r2
 8003008:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800300c:	015b      	lsls	r3, r3, #5
 800300e:	0a4a      	lsrs	r2, r1, #9
 8003010:	fb93 f2f2 	sdiv	r2, r3, r2
 8003014:	eb0c 4c02 	add.w	ip, ip, r2, lsl #16
 8003018:	fb02 f002 	mul.w	r0, r2, r2
 800301c:	4350      	muls	r0, r2
 800301e:	eb00 00a0 	add.w	r0, r0, r0, asr #2
 8003022:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8003026:	eb00 2020 	add.w	r0, r0, r0, asr #8
 800302a:	ebac 4ca0 	sub.w	ip, ip, r0, asr #18
 800302e:	1218      	asrs	r0, r3, #8
 8003030:	4350      	muls	r0, r2
 8003032:	eb01 30e0 	add.w	r0, r1, r0, asr #15
 8003036:	0849      	lsrs	r1, r1, #1
 8003038:	4351      	muls	r1, r2
 800303a:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
 800303e:	0bc0      	lsrs	r0, r0, #15
 8003040:	fb93 f0f0 	sdiv	r0, r3, r0
 8003044:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 movlong r1,0xC90FDAA2    @ pi Q30
 8003048:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 800304c:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 sub r0,r1,r0,lsr#2       @ subtract from pi
 8003050:	eba1 0090 	sub.w	r0, r1, r0, lsr #2
 atan_s1 0x7f
 8003054:	fab0 f180 	clz	r1, r0
 8003058:	4088      	lsls	r0, r1
 800305a:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800305e:	0a00      	lsrs	r0, r0, #8
 8003060:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
.balign 4
4:
 atan_s2 r0,r1            @ compute result
 8003068:	01c0      	lsls	r0, r0, #7
 800306a:	0109      	lsls	r1, r1, #4
 800306c:	ea5f 3c11 	movs.w	ip, r1, lsr #12
 8003070:	fbb0 f3fc 	udiv	r3, r0, ip
 8003074:	0300      	lsls	r0, r0, #12
 8003076:	fb03 0011 	mls	r0, r3, r1, r0
 800307a:	0080      	lsls	r0, r0, #2
 800307c:	fb90 f0fc 	sdiv	r0, r0, ip
 8003080:	eb10 3083 	adds.w	r0, r0, r3, lsl #14
 8003084:	2aff      	cmp	r2, #255	; 0xff
 8003086:	bfc8      	it	gt
 8003088:	22ff      	movgt	r2, #255	; 0xff
 800308a:	0bc1      	lsrs	r1, r0, #15
 800308c:	fb01 f301 	mul.w	r3, r1, r1
 8003090:	0bdb      	lsrs	r3, r3, #15
 8003092:	4359      	muls	r1, r3
 8003094:	40d1      	lsrs	r1, r2
 8003096:	40d1      	lsrs	r1, r2
 8003098:	eb01 0191 	add.w	r1, r1, r1, lsr #2
 800309c:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 80030a0:	eb01 2111 	add.w	r1, r1, r1, lsr #8
 80030a4:	3108      	adds	r1, #8
 80030a6:	1a40      	subs	r0, r0, r1
 80030a8:	0a09      	lsrs	r1, r1, #8
 80030aa:	4359      	muls	r1, r3
 80030ac:	40d1      	lsrs	r1, r2
 80030ae:	40d1      	lsrs	r1, r2
 80030b0:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 lsrs r0,r2               @ return to fixed point
 80030b4:	40d0      	lsrs	r0, r2
 movlong r1,0xC90FDAA2    @ pi Q30
 80030b6:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 80030ba:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 sub r0,r1,r0,lsl#1       @ subtract from pi
 80030be:	eba1 0040 	sub.w	r0, r1, r0, lsl #1
 atan_s1 0x7f
 80030c2:	fab0 f180 	clz	r1, r0
 80030c6:	4088      	lsls	r0, r1
 80030c8:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 80030cc:	0a00      	lsrs	r0, r0, #8
 80030ce:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 80030d2:	4770      	bx	lr

.balign 4
3:
 cmp r2,#5
 80030d4:	2a05      	cmp	r2, #5
 bhi 4f                   @ ey-ex>5?
 80030d6:	d83b      	bhi.n	8003150 <qfp_fatan2+0x604>
 atan_s0 r1,r0            @ compute result
 80030d8:	01c9      	lsls	r1, r1, #7
 80030da:	40d1      	lsrs	r1, r2
 80030dc:	fbb1 f2f0 	udiv	r2, r1, r0
 80030e0:	f2af 739c 	subw	r3, pc, #1948	; 0x79c
 80030e4:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 80030e8:	fb02 1310 	mls	r3, r2, r0, r1
 80030ec:	0a49      	lsrs	r1, r1, #9
 80030ee:	4351      	muls	r1, r2
 80030f0:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 80030f4:	015b      	lsls	r3, r3, #5
 80030f6:	0a4a      	lsrs	r2, r1, #9
 80030f8:	fb93 f2f2 	sdiv	r2, r3, r2
 80030fc:	eb0c 4c02 	add.w	ip, ip, r2, lsl #16
 8003100:	fb02 f002 	mul.w	r0, r2, r2
 8003104:	4350      	muls	r0, r2
 8003106:	eb00 00a0 	add.w	r0, r0, r0, asr #2
 800310a:	eb00 1020 	add.w	r0, r0, r0, asr #4
 800310e:	eb00 2020 	add.w	r0, r0, r0, asr #8
 8003112:	ebac 4ca0 	sub.w	ip, ip, r0, asr #18
 8003116:	1218      	asrs	r0, r3, #8
 8003118:	4350      	muls	r0, r2
 800311a:	eb01 30e0 	add.w	r0, r1, r0, asr #15
 800311e:	0849      	lsrs	r1, r1, #1
 8003120:	4351      	muls	r1, r2
 8003122:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
 8003126:	0bc0      	lsrs	r0, r0, #15
 8003128:	fb93 f0f0 	sdiv	r0, r3, r0
 800312c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 movlong r1,0x6487ED51    @ pi/2 Q30
 8003130:	f64e 5151 	movw	r1, #60753	; 0xed51
 8003134:	f2c6 4187 	movt	r1, #25735	; 0x6487
 add r0,r1,r0,lsr#2       @ add pi/2
 8003138:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 atan_s1 0x7f
 800313c:	fab0 f180 	clz	r1, r0
 8003140:	4088      	lsls	r0, r1
 8003142:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8003146:	0a00      	lsrs	r0, r0, #8
 8003148:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
.balign 4
4:
 atan_s2 r1,r0            @ compute result
 8003150:	01c9      	lsls	r1, r1, #7
 8003152:	0100      	lsls	r0, r0, #4
 8003154:	ea5f 3c10 	movs.w	ip, r0, lsr #12
 8003158:	fbb1 f3fc 	udiv	r3, r1, ip
 800315c:	0309      	lsls	r1, r1, #12
 800315e:	fb03 1110 	mls	r1, r3, r0, r1
 8003162:	0089      	lsls	r1, r1, #2
 8003164:	fb91 f1fc 	sdiv	r1, r1, ip
 8003168:	eb11 3083 	adds.w	r0, r1, r3, lsl #14
 800316c:	2aff      	cmp	r2, #255	; 0xff
 800316e:	bfc8      	it	gt
 8003170:	22ff      	movgt	r2, #255	; 0xff
 8003172:	0bc1      	lsrs	r1, r0, #15
 8003174:	fb01 f301 	mul.w	r3, r1, r1
 8003178:	0bdb      	lsrs	r3, r3, #15
 800317a:	4359      	muls	r1, r3
 800317c:	40d1      	lsrs	r1, r2
 800317e:	40d1      	lsrs	r1, r2
 8003180:	eb01 0191 	add.w	r1, r1, r1, lsr #2
 8003184:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 8003188:	eb01 2111 	add.w	r1, r1, r1, lsr #8
 800318c:	3108      	adds	r1, #8
 800318e:	1a40      	subs	r0, r0, r1
 8003190:	0a09      	lsrs	r1, r1, #8
 8003192:	4359      	muls	r1, r3
 8003194:	40d1      	lsrs	r1, r2
 8003196:	40d1      	lsrs	r1, r2
 8003198:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 lsrs r0,r2               @ return to fixed point
 800319c:	40d0      	lsrs	r0, r2
 movlong r1,0xC90FDAA2    @ pi/2 Q31
 800319e:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 80031a2:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 add r0,r1,r0,lsl#2       @ add pi/2
 80031a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 atan_s1 0x7e
 80031aa:	fab0 f180 	clz	r1, r0
 80031ae:	4088      	lsls	r0, r1
 80031b0:	f1c1 017e 	rsb	r1, r1, #126	; 0x7e
 80031b4:	0a00      	lsrs	r0, r0, #8
 80031b6:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 80031ba:	4770      	bx	lr

2:                        @ here x negative, y negative
 subs r2,r3               @ exponent difference ey-ex
 80031bc:	1ad2      	subs	r2, r2, r3
 it eq
 80031be:	bf08      	it	eq
 cmpeq r0,r1
 80031c0:	4288      	cmpeq	r0, r1
 bge 3f                   @ |y|>|x|?
 80031c2:	da77      	bge.n	80032b4 <qfp_fatan2+0x768>
 rsbs r2,#0               @ exponent difference ex-ey
 80031c4:	4252      	negs	r2, r2
 cmp r2,#5
 80031c6:	2a05      	cmp	r2, #5
 bhi 4f                   @ ex-ey>5?
 80031c8:	d83c      	bhi.n	8003244 <qfp_fatan2+0x6f8>
 atan_s0 r0,r1            @ compute result
 80031ca:	01c0      	lsls	r0, r0, #7
 80031cc:	40d0      	lsrs	r0, r2
 80031ce:	fbb0 f2f1 	udiv	r2, r0, r1
 80031d2:	f6af 038c 	subw	r3, pc, #2188	; 0x88c
 80031d6:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 80031da:	fb02 0311 	mls	r3, r2, r1, r0
 80031de:	0a40      	lsrs	r0, r0, #9
 80031e0:	4350      	muls	r0, r2
 80031e2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80031e6:	015b      	lsls	r3, r3, #5
 80031e8:	0a4a      	lsrs	r2, r1, #9
 80031ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80031ee:	eb0c 4c02 	add.w	ip, ip, r2, lsl #16
 80031f2:	fb02 f002 	mul.w	r0, r2, r2
 80031f6:	4350      	muls	r0, r2
 80031f8:	eb00 00a0 	add.w	r0, r0, r0, asr #2
 80031fc:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8003200:	eb00 2020 	add.w	r0, r0, r0, asr #8
 8003204:	ebac 4ca0 	sub.w	ip, ip, r0, asr #18
 8003208:	1218      	asrs	r0, r3, #8
 800320a:	4350      	muls	r0, r2
 800320c:	eb01 30e0 	add.w	r0, r1, r0, asr #15
 8003210:	0849      	lsrs	r1, r1, #1
 8003212:	4351      	muls	r1, r2
 8003214:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
 8003218:	0bc0      	lsrs	r0, r0, #15
 800321a:	fb93 f0f0 	sdiv	r0, r3, r0
 800321e:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 movlong r1,0xC90FDAA2    @ pi Q30
 8003222:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 8003226:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 sub r0,r1,r0,lsr#2       @ subtract from pi
 800322a:	eba1 0090 	sub.w	r0, r1, r0, lsr #2
 atan_s1x 0x7f,0x100
 800322e:	fab0 f180 	clz	r1, r0
 8003232:	4088      	lsls	r0, r1
 8003234:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8003238:	f511 7180 	adds.w	r1, r1, #256	; 0x100
 800323c:	0a00      	lsrs	r0, r0, #8
 800323e:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 8003242:	4770      	bx	lr
.balign 4
4:
 atan_s2 r0,r1            @ compute result
 8003244:	01c0      	lsls	r0, r0, #7
 8003246:	0109      	lsls	r1, r1, #4
 8003248:	ea5f 3c11 	movs.w	ip, r1, lsr #12
 800324c:	fbb0 f3fc 	udiv	r3, r0, ip
 8003250:	0300      	lsls	r0, r0, #12
 8003252:	fb03 0011 	mls	r0, r3, r1, r0
 8003256:	0080      	lsls	r0, r0, #2
 8003258:	fb90 f0fc 	sdiv	r0, r0, ip
 800325c:	eb10 3083 	adds.w	r0, r0, r3, lsl #14
 8003260:	2aff      	cmp	r2, #255	; 0xff
 8003262:	bfc8      	it	gt
 8003264:	22ff      	movgt	r2, #255	; 0xff
 8003266:	0bc1      	lsrs	r1, r0, #15
 8003268:	fb01 f301 	mul.w	r3, r1, r1
 800326c:	0bdb      	lsrs	r3, r3, #15
 800326e:	4359      	muls	r1, r3
 8003270:	40d1      	lsrs	r1, r2
 8003272:	40d1      	lsrs	r1, r2
 8003274:	eb01 0191 	add.w	r1, r1, r1, lsr #2
 8003278:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 800327c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
 8003280:	3108      	adds	r1, #8
 8003282:	1a40      	subs	r0, r0, r1
 8003284:	0a09      	lsrs	r1, r1, #8
 8003286:	4359      	muls	r1, r3
 8003288:	40d1      	lsrs	r1, r2
 800328a:	40d1      	lsrs	r1, r2
 800328c:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 lsrs r0,r2               @ return to fixed point
 8003290:	40d0      	lsrs	r0, r2
 movlong r1,0xC90FDAA2    @ pi Q30
 8003292:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 8003296:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 sub r0,r1,r0,lsl#1       @ subtract from pi
 800329a:	eba1 0040 	sub.w	r0, r1, r0, lsl #1
 atan_s1x 0x7f,0x100
 800329e:	fab0 f180 	clz	r1, r0
 80032a2:	4088      	lsls	r0, r1
 80032a4:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 80032a8:	f511 7180 	adds.w	r1, r1, #256	; 0x100
 80032ac:	0a00      	lsrs	r0, r0, #8
 80032ae:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 80032b2:	4770      	bx	lr

.balign 4
3:
 cmp r2,#5
 80032b4:	2a05      	cmp	r2, #5
 bhi 4f                   @ ey-ex>5?
 80032b6:	d83d      	bhi.n	8003334 <qfp_fatan2+0x7e8>
 atan_s0 r1,r0            @ compute result
 80032b8:	01c9      	lsls	r1, r1, #7
 80032ba:	40d1      	lsrs	r1, r2
 80032bc:	fbb1 f2f0 	udiv	r2, r1, r0
 80032c0:	f6af 137c 	subw	r3, pc, #2428	; 0x97c
 80032c4:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 80032c8:	fb02 1310 	mls	r3, r2, r0, r1
 80032cc:	0a49      	lsrs	r1, r1, #9
 80032ce:	4351      	muls	r1, r2
 80032d0:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 80032d4:	015b      	lsls	r3, r3, #5
 80032d6:	0a4a      	lsrs	r2, r1, #9
 80032d8:	fb93 f2f2 	sdiv	r2, r3, r2
 80032dc:	eb0c 4c02 	add.w	ip, ip, r2, lsl #16
 80032e0:	fb02 f002 	mul.w	r0, r2, r2
 80032e4:	4350      	muls	r0, r2
 80032e6:	eb00 00a0 	add.w	r0, r0, r0, asr #2
 80032ea:	eb00 1020 	add.w	r0, r0, r0, asr #4
 80032ee:	eb00 2020 	add.w	r0, r0, r0, asr #8
 80032f2:	ebac 4ca0 	sub.w	ip, ip, r0, asr #18
 80032f6:	1218      	asrs	r0, r3, #8
 80032f8:	4350      	muls	r0, r2
 80032fa:	eb01 30e0 	add.w	r0, r1, r0, asr #15
 80032fe:	0849      	lsrs	r1, r1, #1
 8003300:	4351      	muls	r1, r2
 8003302:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
 8003306:	0bc0      	lsrs	r0, r0, #15
 8003308:	fb93 f0f0 	sdiv	r0, r3, r0
 800330c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 movlong r1,0x6487ED51    @ pi/2 Q30
 8003310:	f64e 5151 	movw	r1, #60753	; 0xed51
 8003314:	f2c6 4187 	movt	r1, #25735	; 0x6487
 add r0,r1,r0,lsr#2       @ add pi/2
 8003318:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 atan_s1x 0x7f,0x100
 800331c:	fab0 f180 	clz	r1, r0
 8003320:	4088      	lsls	r0, r1
 8003322:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8003326:	f511 7180 	adds.w	r1, r1, #256	; 0x100
 800332a:	0a00      	lsrs	r0, r0, #8
 800332c:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
.balign 4
4:
 atan_s2 r1,r0            @ compute result
 8003334:	01c9      	lsls	r1, r1, #7
 8003336:	0100      	lsls	r0, r0, #4
 8003338:	ea5f 3c10 	movs.w	ip, r0, lsr #12
 800333c:	fbb1 f3fc 	udiv	r3, r1, ip
 8003340:	0309      	lsls	r1, r1, #12
 8003342:	fb03 1110 	mls	r1, r3, r0, r1
 8003346:	0089      	lsls	r1, r1, #2
 8003348:	fb91 f1fc 	sdiv	r1, r1, ip
 800334c:	eb11 3083 	adds.w	r0, r1, r3, lsl #14
 8003350:	2aff      	cmp	r2, #255	; 0xff
 8003352:	bfc8      	it	gt
 8003354:	22ff      	movgt	r2, #255	; 0xff
 8003356:	0bc1      	lsrs	r1, r0, #15
 8003358:	fb01 f301 	mul.w	r3, r1, r1
 800335c:	0bdb      	lsrs	r3, r3, #15
 800335e:	4359      	muls	r1, r3
 8003360:	40d1      	lsrs	r1, r2
 8003362:	40d1      	lsrs	r1, r2
 8003364:	eb01 0191 	add.w	r1, r1, r1, lsr #2
 8003368:	eb01 1111 	add.w	r1, r1, r1, lsr #4
 800336c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
 8003370:	3108      	adds	r1, #8
 8003372:	1a40      	subs	r0, r0, r1
 8003374:	0a09      	lsrs	r1, r1, #8
 8003376:	4359      	muls	r1, r3
 8003378:	40d1      	lsrs	r1, r2
 800337a:	40d1      	lsrs	r1, r2
 800337c:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 lsrs r0,r2               @ return to fixed point
 8003380:	40d0      	lsrs	r0, r2
 movlong r1,0xC90FDAA2    @ pi/2 Q31
 8003382:	f64d 21a2 	movw	r1, #55970	; 0xdaa2
 8003386:	f6cc 110f 	movt	r1, #51471	; 0xc90f
 add r0,r1,r0,lsl#2       @ add pi/2
 800338a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 atan_s1 0x17e
 800338e:	fab0 f180 	clz	r1, r0
 8003392:	4088      	lsls	r0, r1
 8003394:	f5c1 71bf 	rsb	r1, r1, #382	; 0x17e
 8003398:	0a00      	lsrs	r0, r0, #8
 800339a:	eb50 50c1 	adcs.w	r0, r0, r1, lsl #23
 800339e:	4770      	bx	lr

080033a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_MspInit+0x5c>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	4a14      	ldr	r2, [pc, #80]	; (80033fc <HAL_MspInit+0x5c>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6193      	str	r3, [r2, #24]
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_MspInit+0x5c>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_MspInit+0x5c>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <HAL_MspInit+0x5c>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	61d3      	str	r3, [r2, #28]
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_MspInit+0x5c>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_MspInit+0x60>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	4a04      	ldr	r2, [pc, #16]	; (8003400 <HAL_MspInit+0x60>)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40021000 	.word	0x40021000
 8003400:	40010000 	.word	0x40010000

08003404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <NMI_Handler+0x4>

0800340a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <HardFault_Handler+0x4>

08003410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <MemManage_Handler+0x4>

08003416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800341a:	e7fe      	b.n	800341a <BusFault_Handler+0x4>

0800341c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <UsageFault_Handler+0x4>

08003422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800343a:	b480      	push	{r7}
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800344a:	f000 fcb5 	bl	8003db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <USART3_IRQHandler+0x10>)
 800345a:	f003 fb9b 	bl	8006b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	2000043c 	.word	0x2000043c

08003468 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
	return 1;
 800346c:	2301      	movs	r3, #1
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <_kill>:

int _kill(int pid, int sig)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003480:	f003 ffb4 	bl	80073ec <__errno>
 8003484:	4603      	mov	r3, r0
 8003486:	2216      	movs	r2, #22
 8003488:	601a      	str	r2, [r3, #0]
	return -1;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <_exit>:

void _exit (int status)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800349e:	f04f 31ff 	mov.w	r1, #4294967295
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ffe7 	bl	8003476 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034a8:	e7fe      	b.n	80034a8 <_exit+0x12>

080034aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e00a      	b.n	80034d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034bc:	f3af 8000 	nop.w
 80034c0:	4601      	mov	r1, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	60ba      	str	r2, [r7, #8]
 80034c8:	b2ca      	uxtb	r2, r1
 80034ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dbf0      	blt.n	80034bc <_read+0x12>
	}

return len;
 80034da:	687b      	ldr	r3, [r7, #4]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e009      	b.n	800350a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	60ba      	str	r2, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fbd8 	bl	8003cb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3301      	adds	r3, #1
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	dbf1      	blt.n	80034f6 <_write+0x12>
	}
	return len;
 8003512:	687b      	ldr	r3, [r7, #4]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_close>:

int _close(int file)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	return -1;
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003542:	605a      	str	r2, [r3, #4]
	return 0;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <_isatty>:

int _isatty(int file)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	return 1;
 8003558:	2301      	movs	r3, #1
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
	return 0;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <_sbrk+0x5c>)
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <_sbrk+0x60>)
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <_sbrk+0x64>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <_sbrk+0x64>)
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <_sbrk+0x68>)
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <_sbrk+0x64>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d207      	bcs.n	80035bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035ac:	f003 ff1e 	bl	80073ec <__errno>
 80035b0:	4603      	mov	r3, r0
 80035b2:	220c      	movs	r2, #12
 80035b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	e009      	b.n	80035d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <_sbrk+0x64>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <_sbrk+0x64>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <_sbrk+0x64>)
 80035cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ce:	68fb      	ldr	r3, [r7, #12]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20005000 	.word	0x20005000
 80035dc:	00000400 	.word	0x00000400
 80035e0:	200001fc 	.word	0x200001fc
 80035e4:	20000498 	.word	0x20000498

080035e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035fa:	f107 0320 	add.w	r3, r7, #32
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	611a      	str	r2, [r3, #16]
 8003612:	615a      	str	r2, [r3, #20]
 8003614:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <MX_TIM2_Init+0xac>)
 8003618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800361c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17;
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <MX_TIM2_Init+0xac>)
 8003620:	2211      	movs	r2, #17
 8003622:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003624:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <MX_TIM2_Init+0xac>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <MX_TIM2_Init+0xac>)
 800362c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003630:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003632:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <MX_TIM2_Init+0xac>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <MX_TIM2_Init+0xac>)
 800363a:	2200      	movs	r2, #0
 800363c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800363e:	4818      	ldr	r0, [pc, #96]	; (80036a0 <MX_TIM2_Init+0xac>)
 8003640:	f002 fc22 	bl	8005e88 <HAL_TIM_PWM_Init>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800364a:	f7fe fae3 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003656:	f107 0320 	add.w	r3, r7, #32
 800365a:	4619      	mov	r1, r3
 800365c:	4810      	ldr	r0, [pc, #64]	; (80036a0 <MX_TIM2_Init+0xac>)
 800365e:	f003 f92b 	bl	80068b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003668:	f7fe fad4 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800366c:	2360      	movs	r3, #96	; 0x60
 800366e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	2200      	movs	r2, #0
 8003680:	4619      	mov	r1, r3
 8003682:	4807      	ldr	r0, [pc, #28]	; (80036a0 <MX_TIM2_Init+0xac>)
 8003684:	f002 fcf2 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800368e:	f7fe fac1 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003692:	4803      	ldr	r0, [pc, #12]	; (80036a0 <MX_TIM2_Init+0xac>)
 8003694:	f000 f88e 	bl	80037b4 <HAL_TIM_MspPostInit>

}
 8003698:	bf00      	nop
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	200003f4 	.word	0x200003f4

080036a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036aa:	f107 0308 	add.w	r3, r7, #8
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b8:	463b      	mov	r3, r7
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <MX_TIM3_Init+0x94>)
 80036c2:	4a1e      	ldr	r2, [pc, #120]	; (800373c <MX_TIM3_Init+0x98>)
 80036c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <MX_TIM3_Init+0x94>)
 80036c8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80036cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ce:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <MX_TIM3_Init+0x94>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80036d4:	4b18      	ldr	r3, [pc, #96]	; (8003738 <MX_TIM3_Init+0x94>)
 80036d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <MX_TIM3_Init+0x94>)
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <MX_TIM3_Init+0x94>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036e8:	4813      	ldr	r0, [pc, #76]	; (8003738 <MX_TIM3_Init+0x94>)
 80036ea:	f002 fb33 	bl	8005d54 <HAL_TIM_Base_Init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80036f4:	f7fe fa8e 	bl	8001c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036fe:	f107 0308 	add.w	r3, r7, #8
 8003702:	4619      	mov	r1, r3
 8003704:	480c      	ldr	r0, [pc, #48]	; (8003738 <MX_TIM3_Init+0x94>)
 8003706:	f002 fd6f 	bl	80061e8 <HAL_TIM_ConfigClockSource>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003710:	f7fe fa80 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003714:	2300      	movs	r3, #0
 8003716:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003718:	2300      	movs	r3, #0
 800371a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800371c:	463b      	mov	r3, r7
 800371e:	4619      	mov	r1, r3
 8003720:	4805      	ldr	r0, [pc, #20]	; (8003738 <MX_TIM3_Init+0x94>)
 8003722:	f003 f8c9 	bl	80068b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800372c:	f7fe fa72 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003730:	bf00      	nop
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200003ac 	.word	0x200003ac
 800373c:	40000400 	.word	0x40000400

08003740 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d10b      	bne.n	800376a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_TIM_PWM_MspInit+0x34>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_TIM_PWM_MspInit+0x34>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	61d3      	str	r3, [r2, #28]
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_TIM_PWM_MspInit+0x34>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	40021000 	.word	0x40021000

08003778 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_TIM_Base_MspInit+0x34>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10b      	bne.n	80037a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_TIM_Base_MspInit+0x38>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <HAL_TIM_Base_MspInit+0x38>)
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	61d3      	str	r3, [r2, #28]
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_TIM_Base_MspInit+0x38>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 0310 	add.w	r3, r7, #16
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d117      	bne.n	8003804 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d4:	4b0d      	ldr	r3, [pc, #52]	; (800380c <HAL_TIM_MspPostInit+0x58>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	4a0c      	ldr	r2, [pc, #48]	; (800380c <HAL_TIM_MspPostInit+0x58>)
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	6193      	str	r3, [r2, #24]
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_TIM_MspPostInit+0x58>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ENA_Pin;
 80037ec:	2301      	movs	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f0:	2302      	movs	r3, #2
 80037f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f4:	2302      	movs	r3, #2
 80037f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 80037f8:	f107 0310 	add.w	r3, r7, #16
 80037fc:	4619      	mov	r1, r3
 80037fe:	4804      	ldr	r0, [pc, #16]	; (8003810 <HAL_TIM_MspPostInit+0x5c>)
 8003800:	f000 fcd8 	bl	80041b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	40010800 	.word	0x40010800

08003814 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <MX_USART3_UART_Init+0x4c>)
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <MX_USART3_UART_Init+0x50>)
 800381c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <MX_USART3_UART_Init+0x4c>)
 8003820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003824:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <MX_USART3_UART_Init+0x4c>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <MX_USART3_UART_Init+0x4c>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <MX_USART3_UART_Init+0x4c>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <MX_USART3_UART_Init+0x4c>)
 800383a:	220c      	movs	r2, #12
 800383c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <MX_USART3_UART_Init+0x4c>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <MX_USART3_UART_Init+0x4c>)
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800384a:	4805      	ldr	r0, [pc, #20]	; (8003860 <MX_USART3_UART_Init+0x4c>)
 800384c:	f003 f892 	bl	8006974 <HAL_UART_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003856:	f7fe f9dd 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	2000043c 	.word	0x2000043c
 8003864:	40004800 	.word	0x40004800

08003868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 0310 	add.w	r3, r7, #16
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a20      	ldr	r2, [pc, #128]	; (8003904 <HAL_UART_MspInit+0x9c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d139      	bne.n	80038fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003888:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <HAL_UART_MspInit+0xa0>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	4a1e      	ldr	r2, [pc, #120]	; (8003908 <HAL_UART_MspInit+0xa0>)
 800388e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003892:	61d3      	str	r3, [r2, #28]
 8003894:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <HAL_UART_MspInit+0xa0>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_UART_MspInit+0xa0>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <HAL_UART_MspInit+0xa0>)
 80038a6:	f043 0308 	orr.w	r3, r3, #8
 80038aa:	6193      	str	r3, [r2, #24]
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <HAL_UART_MspInit+0xa0>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038c2:	2303      	movs	r3, #3
 80038c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	f107 0310 	add.w	r3, r7, #16
 80038ca:	4619      	mov	r1, r3
 80038cc:	480f      	ldr	r0, [pc, #60]	; (800390c <HAL_UART_MspInit+0xa4>)
 80038ce:	f000 fc71 	bl	80041b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e0:	f107 0310 	add.w	r3, r7, #16
 80038e4:	4619      	mov	r1, r3
 80038e6:	4809      	ldr	r0, [pc, #36]	; (800390c <HAL_UART_MspInit+0xa4>)
 80038e8:	f000 fc64 	bl	80041b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2100      	movs	r1, #0
 80038f0:	2027      	movs	r0, #39	; 0x27
 80038f2:	f000 fb78 	bl	8003fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80038f6:	2027      	movs	r0, #39	; 0x27
 80038f8:	f000 fb91 	bl	800401e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80038fc:	bf00      	nop
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40004800 	.word	0x40004800
 8003908:	40021000 	.word	0x40021000
 800390c:	40010c00 	.word	0x40010c00

08003910 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3){
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a26      	ldr	r2, [pc, #152]	; (80039b8 <HAL_UART_RxCpltCallback+0xa8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d145      	bne.n	80039ae <HAL_UART_RxCpltCallback+0x9e>
	 uint8_t data = UART3_rxBuffer[0];
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <HAL_UART_RxCpltCallback+0xac>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	73fb      	strb	r3, [r7, #15]
	 if(uart_index >= SIZE_COM) uart_index = 0;
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b0b      	cmp	r3, #11
 8003930:	d902      	bls.n	8003938 <HAL_UART_RxCpltCallback+0x28>
 8003932:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
	 switch(data){
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b3b      	cmp	r3, #59	; 0x3b
 800393c:	d00e      	beq.n	800395c <HAL_UART_RxCpltCallback+0x4c>
 800393e:	2b3b      	cmp	r3, #59	; 0x3b
 8003940:	dc23      	bgt.n	800398a <HAL_UART_RxCpltCallback+0x7a>
 8003942:	2b3a      	cmp	r3, #58	; 0x3a
 8003944:	d006      	beq.n	8003954 <HAL_UART_RxCpltCallback+0x44>
 8003946:	2b3a      	cmp	r3, #58	; 0x3a
 8003948:	dc1f      	bgt.n	800398a <HAL_UART_RxCpltCallback+0x7a>
 800394a:	2b08      	cmp	r3, #8
 800394c:	d010      	beq.n	8003970 <HAL_UART_RxCpltCallback+0x60>
 800394e:	2b0d      	cmp	r3, #13
 8003950:	d004      	beq.n	800395c <HAL_UART_RxCpltCallback+0x4c>
 8003952:	e01a      	b.n	800398a <HAL_UART_RxCpltCallback+0x7a>
	 case ':':  	//Command start
		 uart_index = 0;
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
		 break;
 800395a:	e023      	b.n	80039a4 <HAL_UART_RxCpltCallback+0x94>
	 case '\r':  	//End of command char
	 case ';':
		 command[uart_index] = 0;
 800395c:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <HAL_UART_RxCpltCallback+0xb4>)
 8003966:	2100      	movs	r1, #0
 8003968:	5499      	strb	r1, [r3, r2]
		 Read_Command();
 800396a:	f000 f82f 	bl	80039cc <Read_Command>
		 break;
 800396e:	e019      	b.n	80039a4 <HAL_UART_RxCpltCallback+0x94>
	 case 8:  		//Backspace
		 if (uart_index) uart_index--;
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d013      	beq.n	80039a2 <HAL_UART_RxCpltCallback+0x92>
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b2da      	uxtb	r2, r3
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 8003986:	701a      	strb	r2, [r3, #0]
		 break;
 8003988:	e00b      	b.n	80039a2 <HAL_UART_RxCpltCallback+0x92>
	 default:
		 command[uart_index++] = data;
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	b2d1      	uxtb	r1, r2
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_UART_RxCpltCallback+0xb0>)
 8003996:	7011      	strb	r1, [r2, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_UART_RxCpltCallback+0xb4>)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	5453      	strb	r3, [r2, r1]
		 break;
 80039a0:	e000      	b.n	80039a4 <HAL_UART_RxCpltCallback+0x94>
		 break;
 80039a2:	bf00      	nop
	 }
	 HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 80039a4:	2201      	movs	r2, #1
 80039a6:	4905      	ldr	r1, [pc, #20]	; (80039bc <HAL_UART_RxCpltCallback+0xac>)
 80039a8:	4807      	ldr	r0, [pc, #28]	; (80039c8 <HAL_UART_RxCpltCallback+0xb8>)
 80039aa:	f003 f8c2 	bl	8006b32 <HAL_UART_Receive_IT>
	}
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40004800 	.word	0x40004800
 80039bc:	20000390 	.word	0x20000390
 80039c0:	200003a8 	.word	0x200003a8
 80039c4:	2000039c 	.word	0x2000039c
 80039c8:	2000043c 	.word	0x2000043c

080039cc <Read_Command>:

void Read_Command(){
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b098      	sub	sp, #96	; 0x60
 80039d2:	af0e      	add	r7, sp, #56	; 0x38
	float aux = 0;
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
	//start the rise up sequence
	if(strstr(command, "start")){
 80039da:	499a      	ldr	r1, [pc, #616]	; (8003c44 <Read_Command+0x278>)
 80039dc:	489a      	ldr	r0, [pc, #616]	; (8003c48 <Read_Command+0x27c>)
 80039de:	f004 fa25 	bl	8007e2c <strstr>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d026      	beq.n	8003a36 <Read_Command+0x6a>
		printf("Start\r\n");
 80039e8:	4898      	ldr	r0, [pc, #608]	; (8003c4c <Read_Command+0x280>)
 80039ea:	f004 fa17 	bl	8007e1c <puts>
		startTime = HAL_GetTick();
 80039ee:	f000 f9f5 	bl	8003ddc <HAL_GetTick>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4a96      	ldr	r2, [pc, #600]	; (8003c50 <Read_Command+0x284>)
 80039f6:	6013      	str	r3, [r2, #0]
		prevTime = startTime;
 80039f8:	4b95      	ldr	r3, [pc, #596]	; (8003c50 <Read_Command+0x284>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a95      	ldr	r2, [pc, #596]	; (8003c54 <Read_Command+0x288>)
 80039fe:	6013      	str	r3, [r2, #0]
		elapsedTime = 0;
 8003a00:	4b95      	ldr	r3, [pc, #596]	; (8003c58 <Read_Command+0x28c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
		state = rise_up;
 8003a06:	4b95      	ldr	r3, [pc, #596]	; (8003c5c <Read_Command+0x290>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
		run = on;
 8003a0c:	4b94      	ldr	r3, [pc, #592]	; (8003c60 <Read_Command+0x294>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]

		if (filteredAngle > 0.0){
 8003a12:	4b94      	ldr	r3, [pc, #592]	; (8003c64 <Read_Command+0x298>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fa1e 	bl	8000e5c <__aeabi_fcmpgt>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <Read_Command+0x62>
			is_angle_positive = 1;
 8003a26:	4b90      	ldr	r3, [pc, #576]	; (8003c68 <Read_Command+0x29c>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
			default:
				break;

		}
	}
}
 8003a2c:	e105      	b.n	8003c3a <Read_Command+0x26e>
			is_angle_positive = 0;
 8003a2e:	4b8e      	ldr	r3, [pc, #568]	; (8003c68 <Read_Command+0x29c>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	e101      	b.n	8003c3a <Read_Command+0x26e>
	} else if(strstr(command, "stop")){
 8003a36:	498d      	ldr	r1, [pc, #564]	; (8003c6c <Read_Command+0x2a0>)
 8003a38:	4883      	ldr	r0, [pc, #524]	; (8003c48 <Read_Command+0x27c>)
 8003a3a:	f004 f9f7 	bl	8007e2c <strstr>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d006      	beq.n	8003a52 <Read_Command+0x86>
		printf("Stop\r\n");
 8003a44:	488a      	ldr	r0, [pc, #552]	; (8003c70 <Read_Command+0x2a4>)
 8003a46:	f004 f9e9 	bl	8007e1c <puts>
		run = off;
 8003a4a:	4b85      	ldr	r3, [pc, #532]	; (8003c60 <Read_Command+0x294>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
}
 8003a50:	e0f3      	b.n	8003c3a <Read_Command+0x26e>
	} else if(strstr(command, "read")){
 8003a52:	4988      	ldr	r1, [pc, #544]	; (8003c74 <Read_Command+0x2a8>)
 8003a54:	487c      	ldr	r0, [pc, #496]	; (8003c48 <Read_Command+0x27c>)
 8003a56:	f004 f9e9 	bl	8007e2c <strstr>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d051      	beq.n	8003b04 <Read_Command+0x138>
		printf("accX = %f\r\n"
 8003a60:	4b85      	ldr	r3, [pc, #532]	; (8003c78 <Read_Command+0x2ac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fc fcdf 	bl	8000428 <__aeabi_f2d>
 8003a6a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003a6e:	4b83      	ldr	r3, [pc, #524]	; (8003c7c <Read_Command+0x2b0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fcd8 	bl	8000428 <__aeabi_f2d>
 8003a78:	4682      	mov	sl, r0
 8003a7a:	468b      	mov	fp, r1
 8003a7c:	4b80      	ldr	r3, [pc, #512]	; (8003c80 <Read_Command+0x2b4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc fcd1 	bl	8000428 <__aeabi_f2d>
 8003a86:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003a8a:	4b7e      	ldr	r3, [pc, #504]	; (8003c84 <Read_Command+0x2b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fc fcca 	bl	8000428 <__aeabi_f2d>
 8003a94:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003a98:	4b7b      	ldr	r3, [pc, #492]	; (8003c88 <Read_Command+0x2bc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fc fcc3 	bl	8000428 <__aeabi_f2d>
 8003aa2:	e9c7 0100 	strd	r0, r1, [r7]
 8003aa6:	4b79      	ldr	r3, [pc, #484]	; (8003c8c <Read_Command+0x2c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fcbc 	bl	8000428 <__aeabi_f2d>
 8003ab0:	4680      	mov	r8, r0
 8003ab2:	4689      	mov	r9, r1
 8003ab4:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <Read_Command+0x2c4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fc fcb5 	bl	8000428 <__aeabi_f2d>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	4b68      	ldr	r3, [pc, #416]	; (8003c64 <Read_Command+0x298>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fc fcae 	bl	8000428 <__aeabi_f2d>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003ad4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003ad8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003adc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ae0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003ae4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ae8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003aec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003af0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003af4:	e9cd ab00 	strd	sl, fp, [sp]
 8003af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afc:	4865      	ldr	r0, [pc, #404]	; (8003c94 <Read_Command+0x2c8>)
 8003afe:	f004 f907 	bl	8007d10 <iprintf>
}
 8003b02:	e09a      	b.n	8003c3a <Read_Command+0x26e>
		switch(command[0]){
 8003b04:	4b50      	ldr	r3, [pc, #320]	; (8003c48 <Read_Command+0x27c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	3b44      	subs	r3, #68	; 0x44
 8003b0a:	2b2c      	cmp	r3, #44	; 0x2c
 8003b0c:	f200 8094 	bhi.w	8003c38 <Read_Command+0x26c>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <Read_Command+0x14c>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003c15 	.word	0x08003c15
 8003b1c:	08003c39 	.word	0x08003c39
 8003b20:	08003c39 	.word	0x08003c39
 8003b24:	08003c39 	.word	0x08003c39
 8003b28:	08003c39 	.word	0x08003c39
 8003b2c:	08003bf1 	.word	0x08003bf1
 8003b30:	08003c39 	.word	0x08003c39
 8003b34:	08003c39 	.word	0x08003c39
 8003b38:	08003c39 	.word	0x08003c39
 8003b3c:	08003c39 	.word	0x08003c39
 8003b40:	08003c39 	.word	0x08003c39
 8003b44:	08003c39 	.word	0x08003c39
 8003b48:	08003bcd 	.word	0x08003bcd
 8003b4c:	08003c39 	.word	0x08003c39
 8003b50:	08003c39 	.word	0x08003c39
 8003b54:	08003c39 	.word	0x08003c39
 8003b58:	08003c39 	.word	0x08003c39
 8003b5c:	08003c39 	.word	0x08003c39
 8003b60:	08003c39 	.word	0x08003c39
 8003b64:	08003c39 	.word	0x08003c39
 8003b68:	08003c39 	.word	0x08003c39
 8003b6c:	08003c39 	.word	0x08003c39
 8003b70:	08003c39 	.word	0x08003c39
 8003b74:	08003c39 	.word	0x08003c39
 8003b78:	08003c39 	.word	0x08003c39
 8003b7c:	08003c39 	.word	0x08003c39
 8003b80:	08003c39 	.word	0x08003c39
 8003b84:	08003c39 	.word	0x08003c39
 8003b88:	08003c39 	.word	0x08003c39
 8003b8c:	08003c39 	.word	0x08003c39
 8003b90:	08003c39 	.word	0x08003c39
 8003b94:	08003c39 	.word	0x08003c39
 8003b98:	08003c15 	.word	0x08003c15
 8003b9c:	08003c39 	.word	0x08003c39
 8003ba0:	08003c39 	.word	0x08003c39
 8003ba4:	08003c39 	.word	0x08003c39
 8003ba8:	08003c39 	.word	0x08003c39
 8003bac:	08003bf1 	.word	0x08003bf1
 8003bb0:	08003c39 	.word	0x08003c39
 8003bb4:	08003c39 	.word	0x08003c39
 8003bb8:	08003c39 	.word	0x08003c39
 8003bbc:	08003c39 	.word	0x08003c39
 8003bc0:	08003c39 	.word	0x08003c39
 8003bc4:	08003c39 	.word	0x08003c39
 8003bc8:	08003bcd 	.word	0x08003bcd
				aux = atof(&command[1]);
 8003bcc:	4832      	ldr	r0, [pc, #200]	; (8003c98 <Read_Command+0x2cc>)
 8003bce:	f003 fc09 	bl	80073e4 <atof>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f7fc ff75 	bl	8000ac8 <__aeabi_d2f>
 8003bde:	4603      	mov	r3, r0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
				kp = aux;
 8003be2:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <Read_Command+0x2d0>)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	6013      	str	r3, [r2, #0]
				printf("Change P\r\n");
 8003be8:	482d      	ldr	r0, [pc, #180]	; (8003ca0 <Read_Command+0x2d4>)
 8003bea:	f004 f917 	bl	8007e1c <puts>
				break;
 8003bee:	e024      	b.n	8003c3a <Read_Command+0x26e>
				aux = atof(&command[1]);
 8003bf0:	4829      	ldr	r0, [pc, #164]	; (8003c98 <Read_Command+0x2cc>)
 8003bf2:	f003 fbf7 	bl	80073e4 <atof>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f7fc ff63 	bl	8000ac8 <__aeabi_d2f>
 8003c02:	4603      	mov	r3, r0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
				ki = aux;
 8003c06:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <Read_Command+0x2d8>)
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	6013      	str	r3, [r2, #0]
				printf("Change I\r\n");
 8003c0c:	4826      	ldr	r0, [pc, #152]	; (8003ca8 <Read_Command+0x2dc>)
 8003c0e:	f004 f905 	bl	8007e1c <puts>
				break;
 8003c12:	e012      	b.n	8003c3a <Read_Command+0x26e>
				aux = atof(&command[1]);
 8003c14:	4820      	ldr	r0, [pc, #128]	; (8003c98 <Read_Command+0x2cc>)
 8003c16:	f003 fbe5 	bl	80073e4 <atof>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fc ff51 	bl	8000ac8 <__aeabi_d2f>
 8003c26:	4603      	mov	r3, r0
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
				kd = aux;
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <Read_Command+0x2e0>)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	6013      	str	r3, [r2, #0]
				printf("Change D\r\n");
 8003c30:	481f      	ldr	r0, [pc, #124]	; (8003cb0 <Read_Command+0x2e4>)
 8003c32:	f004 f8f3 	bl	8007e1c <puts>
				break;
 8003c36:	e000      	b.n	8003c3a <Read_Command+0x26e>
				break;
 8003c38:	bf00      	nop
}
 8003c3a:	bf00      	nop
 8003c3c:	3728      	adds	r7, #40	; 0x28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c44:	0800b57c 	.word	0x0800b57c
 8003c48:	2000039c 	.word	0x2000039c
 8003c4c:	0800b584 	.word	0x0800b584
 8003c50:	200002d8 	.word	0x200002d8
 8003c54:	20000290 	.word	0x20000290
 8003c58:	20000218 	.word	0x20000218
 8003c5c:	2000025c 	.word	0x2000025c
 8003c60:	200002a8 	.word	0x200002a8
 8003c64:	20000240 	.word	0x20000240
 8003c68:	200002b8 	.word	0x200002b8
 8003c6c:	0800b58c 	.word	0x0800b58c
 8003c70:	0800b594 	.word	0x0800b594
 8003c74:	0800b59c 	.word	0x0800b59c
 8003c78:	200002a0 	.word	0x200002a0
 8003c7c:	20000228 	.word	0x20000228
 8003c80:	20000270 	.word	0x20000270
 8003c84:	20000214 	.word	0x20000214
 8003c88:	20000274 	.word	0x20000274
 8003c8c:	200002a4 	.word	0x200002a4
 8003c90:	200002dc 	.word	0x200002dc
 8003c94:	0800b5a4 	.word	0x0800b5a4
 8003c98:	2000039d 	.word	0x2000039d
 8003c9c:	200002d4 	.word	0x200002d4
 8003ca0:	0800b600 	.word	0x0800b600
 8003ca4:	20000284 	.word	0x20000284
 8003ca8:	0800b60c 	.word	0x0800b60c
 8003cac:	20000220 	.word	0x20000220
 8003cb0:	0800b618 	.word	0x0800b618

08003cb4 <__io_putchar>:

int __io_putchar(int msg){		//UART3 as stdio
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	 uint8_t c[1];
	 c[0] = msg & 0x00FF;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	733b      	strb	r3, [r7, #12]
	 HAL_UART_Transmit(&huart3, &*c, 1, 100);
 8003cc2:	f107 010c 	add.w	r1, r7, #12
 8003cc6:	2364      	movs	r3, #100	; 0x64
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4804      	ldr	r0, [pc, #16]	; (8003cdc <__io_putchar+0x28>)
 8003ccc:	f002 fe9f 	bl	8006a0e <HAL_UART_Transmit>
	 return c[0];
 8003cd0:	7b3b      	ldrb	r3, [r7, #12]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000043c 	.word	0x2000043c

08003ce0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ce0:	480c      	ldr	r0, [pc, #48]	; (8003d14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ce2:	490d      	ldr	r1, [pc, #52]	; (8003d18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ce8:	e002      	b.n	8003cf0 <LoopCopyDataInit>

08003cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cee:	3304      	adds	r3, #4

08003cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf4:	d3f9      	bcc.n	8003cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003cf8:	4c0a      	ldr	r4, [pc, #40]	; (8003d24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cfc:	e001      	b.n	8003d02 <LoopFillZerobss>

08003cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d00:	3204      	adds	r2, #4

08003d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d04:	d3fb      	bcc.n	8003cfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d06:	f7ff fc6f 	bl	80035e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d0a:	f003 fb75 	bl	80073f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d0e:	f7fd f9fb 	bl	8001108 <main>
  bx lr
 8003d12:	4770      	bx	lr
  ldr r0, =_sdata
 8003d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d18:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003d1c:	0800bb04 	.word	0x0800bb04
  ldr r2, =_sbss
 8003d20:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003d24:	20000494 	.word	0x20000494

08003d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d28:	e7fe      	b.n	8003d28 <ADC1_2_IRQHandler>
	...

08003d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <HAL_Init+0x28>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <HAL_Init+0x28>)
 8003d36:	f043 0310 	orr.w	r3, r3, #16
 8003d3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	f000 f947 	bl	8003fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d42:	200f      	movs	r0, #15
 8003d44:	f000 f808 	bl	8003d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d48:	f7ff fb2a 	bl	80033a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40022000 	.word	0x40022000

08003d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_InitTick+0x54>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_InitTick+0x58>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f95f 	bl	800403a <HAL_SYSTICK_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e00e      	b.n	8003da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b0f      	cmp	r3, #15
 8003d8a:	d80a      	bhi.n	8003da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	f000 f927 	bl	8003fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d98:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <HAL_InitTick+0x5c>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000000 	.word	0x20000000
 8003db0:	20000008 	.word	0x20000008
 8003db4:	20000004 	.word	0x20000004

08003db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_IncTick+0x1c>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_IncTick+0x20>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4a03      	ldr	r2, [pc, #12]	; (8003dd8 <HAL_IncTick+0x20>)
 8003dca:	6013      	str	r3, [r2, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	20000008 	.word	0x20000008
 8003dd8:	20000480 	.word	0x20000480

08003ddc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return uwTick;
 8003de0:	4b02      	ldr	r3, [pc, #8]	; (8003dec <HAL_GetTick+0x10>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	20000480 	.word	0x20000480

08003df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df8:	f7ff fff0 	bl	8003ddc <HAL_GetTick>
 8003dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d005      	beq.n	8003e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_Delay+0x44>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e16:	bf00      	nop
 8003e18:	f7ff ffe0 	bl	8003ddc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d8f7      	bhi.n	8003e18 <HAL_Delay+0x28>
  {
  }
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000008 	.word	0x20000008

08003e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <__NVIC_SetPriorityGrouping+0x44>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e54:	4013      	ands	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <__NVIC_SetPriorityGrouping+0x44>)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	60d3      	str	r3, [r2, #12]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <__NVIC_GetPriorityGrouping+0x18>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	0a1b      	lsrs	r3, r3, #8
 8003e8a:	f003 0307 	and.w	r3, r3, #7
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	db0b      	blt.n	8003ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	f003 021f 	and.w	r2, r3, #31
 8003eb4:	4906      	ldr	r1, [pc, #24]	; (8003ed0 <__NVIC_EnableIRQ+0x34>)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8003ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	e000e100 	.word	0xe000e100

08003ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	db0a      	blt.n	8003efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	490c      	ldr	r1, [pc, #48]	; (8003f20 <__NVIC_SetPriority+0x4c>)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	0112      	lsls	r2, r2, #4
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003efc:	e00a      	b.n	8003f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4908      	ldr	r1, [pc, #32]	; (8003f24 <__NVIC_SetPriority+0x50>)
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	3b04      	subs	r3, #4
 8003f0c:	0112      	lsls	r2, r2, #4
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	440b      	add	r3, r1
 8003f12:	761a      	strb	r2, [r3, #24]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e100 	.word	0xe000e100
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b089      	sub	sp, #36	; 0x24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f1c3 0307 	rsb	r3, r3, #7
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	bf28      	it	cs
 8003f46:	2304      	movcs	r3, #4
 8003f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d902      	bls.n	8003f58 <NVIC_EncodePriority+0x30>
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3b03      	subs	r3, #3
 8003f56:	e000      	b.n	8003f5a <NVIC_EncodePriority+0x32>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43da      	mvns	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f70:	f04f 31ff 	mov.w	r1, #4294967295
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	43d9      	mvns	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f80:	4313      	orrs	r3, r2
         );
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3724      	adds	r7, #36	; 0x24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f9c:	d301      	bcc.n	8003fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e00f      	b.n	8003fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <SysTick_Config+0x40>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003faa:	210f      	movs	r1, #15
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	f7ff ff90 	bl	8003ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <SysTick_Config+0x40>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fba:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <SysTick_Config+0x40>)
 8003fbc:	2207      	movs	r2, #7
 8003fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	e000e010 	.word	0xe000e010

08003fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ff2d 	bl	8003e38 <__NVIC_SetPriorityGrouping>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b086      	sub	sp, #24
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	4603      	mov	r3, r0
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff8:	f7ff ff42 	bl	8003e80 <__NVIC_GetPriorityGrouping>
 8003ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	6978      	ldr	r0, [r7, #20]
 8004004:	f7ff ff90 	bl	8003f28 <NVIC_EncodePriority>
 8004008:	4602      	mov	r2, r0
 800400a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff5f 	bl	8003ed4 <__NVIC_SetPriority>
}
 8004016:	bf00      	nop
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	4603      	mov	r3, r0
 8004026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff ff35 	bl	8003e9c <__NVIC_EnableIRQ>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ffa2 	bl	8003f8c <SysTick_Config>
 8004048:	4603      	mov	r3, r0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004064:	2b02      	cmp	r3, #2
 8004066:	d008      	beq.n	800407a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2204      	movs	r2, #4
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e020      	b.n	80040bc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 020e 	bic.w	r2, r2, #14
 8004088:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	2101      	movs	r1, #1
 80040a4:	fa01 f202 	lsl.w	r2, r1, r2
 80040a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d005      	beq.n	80040ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2204      	movs	r2, #4
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e051      	b.n	800418e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 020e 	bic.w	r2, r2, #14
 80040f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a22      	ldr	r2, [pc, #136]	; (8004198 <HAL_DMA_Abort_IT+0xd0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d029      	beq.n	8004168 <HAL_DMA_Abort_IT+0xa0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a20      	ldr	r2, [pc, #128]	; (800419c <HAL_DMA_Abort_IT+0xd4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_DMA_Abort_IT+0x9c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <HAL_DMA_Abort_IT+0xd8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01a      	beq.n	800415e <HAL_DMA_Abort_IT+0x96>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <HAL_DMA_Abort_IT+0xdc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d012      	beq.n	8004158 <HAL_DMA_Abort_IT+0x90>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <HAL_DMA_Abort_IT+0xe0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00a      	beq.n	8004152 <HAL_DMA_Abort_IT+0x8a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_DMA_Abort_IT+0xe4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d102      	bne.n	800414c <HAL_DMA_Abort_IT+0x84>
 8004146:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800414a:	e00e      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 800414c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004150:	e00b      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 8004152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004156:	e008      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 8004158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800415c:	e005      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 800415e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004162:	e002      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 8004164:	2310      	movs	r3, #16
 8004166:	e000      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 8004168:	2301      	movs	r3, #1
 800416a:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <HAL_DMA_Abort_IT+0xe8>)
 800416c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
    } 
  }
  return status;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40020008 	.word	0x40020008
 800419c:	4002001c 	.word	0x4002001c
 80041a0:	40020030 	.word	0x40020030
 80041a4:	40020044 	.word	0x40020044
 80041a8:	40020058 	.word	0x40020058
 80041ac:	4002006c 	.word	0x4002006c
 80041b0:	40020000 	.word	0x40020000

080041b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b08b      	sub	sp, #44	; 0x2c
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041c2:	2300      	movs	r3, #0
 80041c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c6:	e169      	b.n	800449c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041c8:	2201      	movs	r2, #1
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	4013      	ands	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	f040 8158 	bne.w	8004496 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4a9a      	ldr	r2, [pc, #616]	; (8004454 <HAL_GPIO_Init+0x2a0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d05e      	beq.n	80042ae <HAL_GPIO_Init+0xfa>
 80041f0:	4a98      	ldr	r2, [pc, #608]	; (8004454 <HAL_GPIO_Init+0x2a0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d875      	bhi.n	80042e2 <HAL_GPIO_Init+0x12e>
 80041f6:	4a98      	ldr	r2, [pc, #608]	; (8004458 <HAL_GPIO_Init+0x2a4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d058      	beq.n	80042ae <HAL_GPIO_Init+0xfa>
 80041fc:	4a96      	ldr	r2, [pc, #600]	; (8004458 <HAL_GPIO_Init+0x2a4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d86f      	bhi.n	80042e2 <HAL_GPIO_Init+0x12e>
 8004202:	4a96      	ldr	r2, [pc, #600]	; (800445c <HAL_GPIO_Init+0x2a8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d052      	beq.n	80042ae <HAL_GPIO_Init+0xfa>
 8004208:	4a94      	ldr	r2, [pc, #592]	; (800445c <HAL_GPIO_Init+0x2a8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d869      	bhi.n	80042e2 <HAL_GPIO_Init+0x12e>
 800420e:	4a94      	ldr	r2, [pc, #592]	; (8004460 <HAL_GPIO_Init+0x2ac>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d04c      	beq.n	80042ae <HAL_GPIO_Init+0xfa>
 8004214:	4a92      	ldr	r2, [pc, #584]	; (8004460 <HAL_GPIO_Init+0x2ac>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d863      	bhi.n	80042e2 <HAL_GPIO_Init+0x12e>
 800421a:	4a92      	ldr	r2, [pc, #584]	; (8004464 <HAL_GPIO_Init+0x2b0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d046      	beq.n	80042ae <HAL_GPIO_Init+0xfa>
 8004220:	4a90      	ldr	r2, [pc, #576]	; (8004464 <HAL_GPIO_Init+0x2b0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d85d      	bhi.n	80042e2 <HAL_GPIO_Init+0x12e>
 8004226:	2b12      	cmp	r3, #18
 8004228:	d82a      	bhi.n	8004280 <HAL_GPIO_Init+0xcc>
 800422a:	2b12      	cmp	r3, #18
 800422c:	d859      	bhi.n	80042e2 <HAL_GPIO_Init+0x12e>
 800422e:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <HAL_GPIO_Init+0x80>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	080042af 	.word	0x080042af
 8004238:	08004289 	.word	0x08004289
 800423c:	0800429b 	.word	0x0800429b
 8004240:	080042dd 	.word	0x080042dd
 8004244:	080042e3 	.word	0x080042e3
 8004248:	080042e3 	.word	0x080042e3
 800424c:	080042e3 	.word	0x080042e3
 8004250:	080042e3 	.word	0x080042e3
 8004254:	080042e3 	.word	0x080042e3
 8004258:	080042e3 	.word	0x080042e3
 800425c:	080042e3 	.word	0x080042e3
 8004260:	080042e3 	.word	0x080042e3
 8004264:	080042e3 	.word	0x080042e3
 8004268:	080042e3 	.word	0x080042e3
 800426c:	080042e3 	.word	0x080042e3
 8004270:	080042e3 	.word	0x080042e3
 8004274:	080042e3 	.word	0x080042e3
 8004278:	08004291 	.word	0x08004291
 800427c:	080042a5 	.word	0x080042a5
 8004280:	4a79      	ldr	r2, [pc, #484]	; (8004468 <HAL_GPIO_Init+0x2b4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004286:	e02c      	b.n	80042e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	623b      	str	r3, [r7, #32]
          break;
 800428e:	e029      	b.n	80042e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	3304      	adds	r3, #4
 8004296:	623b      	str	r3, [r7, #32]
          break;
 8004298:	e024      	b.n	80042e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	3308      	adds	r3, #8
 80042a0:	623b      	str	r3, [r7, #32]
          break;
 80042a2:	e01f      	b.n	80042e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	330c      	adds	r3, #12
 80042aa:	623b      	str	r3, [r7, #32]
          break;
 80042ac:	e01a      	b.n	80042e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042b6:	2304      	movs	r3, #4
 80042b8:	623b      	str	r3, [r7, #32]
          break;
 80042ba:	e013      	b.n	80042e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d105      	bne.n	80042d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042c4:	2308      	movs	r3, #8
 80042c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	611a      	str	r2, [r3, #16]
          break;
 80042ce:	e009      	b.n	80042e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042d0:	2308      	movs	r3, #8
 80042d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	615a      	str	r2, [r3, #20]
          break;
 80042da:	e003      	b.n	80042e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
          break;
 80042e0:	e000      	b.n	80042e4 <HAL_GPIO_Init+0x130>
          break;
 80042e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2bff      	cmp	r3, #255	; 0xff
 80042e8:	d801      	bhi.n	80042ee <HAL_GPIO_Init+0x13a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	e001      	b.n	80042f2 <HAL_GPIO_Init+0x13e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2bff      	cmp	r3, #255	; 0xff
 80042f8:	d802      	bhi.n	8004300 <HAL_GPIO_Init+0x14c>
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	e002      	b.n	8004306 <HAL_GPIO_Init+0x152>
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	3b08      	subs	r3, #8
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	210f      	movs	r1, #15
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	401a      	ands	r2, r3
 8004318:	6a39      	ldr	r1, [r7, #32]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	431a      	orrs	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 80b1 	beq.w	8004496 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004334:	4b4d      	ldr	r3, [pc, #308]	; (800446c <HAL_GPIO_Init+0x2b8>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	4a4c      	ldr	r2, [pc, #304]	; (800446c <HAL_GPIO_Init+0x2b8>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6193      	str	r3, [r2, #24]
 8004340:	4b4a      	ldr	r3, [pc, #296]	; (800446c <HAL_GPIO_Init+0x2b8>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800434c:	4a48      	ldr	r2, [pc, #288]	; (8004470 <HAL_GPIO_Init+0x2bc>)
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	089b      	lsrs	r3, r3, #2
 8004352:	3302      	adds	r3, #2
 8004354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004358:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	220f      	movs	r2, #15
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4013      	ands	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a40      	ldr	r2, [pc, #256]	; (8004474 <HAL_GPIO_Init+0x2c0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d013      	beq.n	80043a0 <HAL_GPIO_Init+0x1ec>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a3f      	ldr	r2, [pc, #252]	; (8004478 <HAL_GPIO_Init+0x2c4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00d      	beq.n	800439c <HAL_GPIO_Init+0x1e8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a3e      	ldr	r2, [pc, #248]	; (800447c <HAL_GPIO_Init+0x2c8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d007      	beq.n	8004398 <HAL_GPIO_Init+0x1e4>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a3d      	ldr	r2, [pc, #244]	; (8004480 <HAL_GPIO_Init+0x2cc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_GPIO_Init+0x1e0>
 8004390:	2303      	movs	r3, #3
 8004392:	e006      	b.n	80043a2 <HAL_GPIO_Init+0x1ee>
 8004394:	2304      	movs	r3, #4
 8004396:	e004      	b.n	80043a2 <HAL_GPIO_Init+0x1ee>
 8004398:	2302      	movs	r3, #2
 800439a:	e002      	b.n	80043a2 <HAL_GPIO_Init+0x1ee>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_GPIO_Init+0x1ee>
 80043a0:	2300      	movs	r3, #0
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	f002 0203 	and.w	r2, r2, #3
 80043a8:	0092      	lsls	r2, r2, #2
 80043aa:	4093      	lsls	r3, r2
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043b2:	492f      	ldr	r1, [pc, #188]	; (8004470 <HAL_GPIO_Init+0x2bc>)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	3302      	adds	r3, #2
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d006      	beq.n	80043da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043cc:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	492c      	ldr	r1, [pc, #176]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]
 80043d8:	e006      	b.n	80043e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043da:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	4928      	ldr	r1, [pc, #160]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d006      	beq.n	8004402 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043f4:	4b23      	ldr	r3, [pc, #140]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	4922      	ldr	r1, [pc, #136]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
 8004400:	e006      	b.n	8004410 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	43db      	mvns	r3, r3
 800440a:	491e      	ldr	r1, [pc, #120]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 800440c:	4013      	ands	r3, r2
 800440e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d006      	beq.n	800442a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	4918      	ldr	r1, [pc, #96]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	608b      	str	r3, [r1, #8]
 8004428:	e006      	b.n	8004438 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800442a:	4b16      	ldr	r3, [pc, #88]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	43db      	mvns	r3, r3
 8004432:	4914      	ldr	r1, [pc, #80]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 8004434:	4013      	ands	r3, r2
 8004436:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d021      	beq.n	8004488 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	490e      	ldr	r1, [pc, #56]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	60cb      	str	r3, [r1, #12]
 8004450:	e021      	b.n	8004496 <HAL_GPIO_Init+0x2e2>
 8004452:	bf00      	nop
 8004454:	10320000 	.word	0x10320000
 8004458:	10310000 	.word	0x10310000
 800445c:	10220000 	.word	0x10220000
 8004460:	10210000 	.word	0x10210000
 8004464:	10120000 	.word	0x10120000
 8004468:	10110000 	.word	0x10110000
 800446c:	40021000 	.word	0x40021000
 8004470:	40010000 	.word	0x40010000
 8004474:	40010800 	.word	0x40010800
 8004478:	40010c00 	.word	0x40010c00
 800447c:	40011000 	.word	0x40011000
 8004480:	40011400 	.word	0x40011400
 8004484:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_GPIO_Init+0x304>)
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	43db      	mvns	r3, r3
 8004490:	4909      	ldr	r1, [pc, #36]	; (80044b8 <HAL_GPIO_Init+0x304>)
 8004492:	4013      	ands	r3, r2
 8004494:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	3301      	adds	r3, #1
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	fa22 f303 	lsr.w	r3, r2, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f47f ae8e 	bne.w	80041c8 <HAL_GPIO_Init+0x14>
  }
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	372c      	adds	r7, #44	; 0x2c
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	40010400 	.word	0x40010400

080044bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	807b      	strh	r3, [r7, #2]
 80044c8:	4613      	mov	r3, r2
 80044ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044cc:	787b      	ldrb	r3, [r7, #1]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044d2:	887a      	ldrh	r2, [r7, #2]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044d8:	e003      	b.n	80044e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044da:	887b      	ldrh	r3, [r7, #2]
 80044dc:	041a      	lsls	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	611a      	str	r2, [r3, #16]
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4013      	ands	r3, r2
 8004504:	041a      	lsls	r2, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	43d9      	mvns	r1, r3
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	400b      	ands	r3, r1
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	611a      	str	r2, [r3, #16]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
	...

08004520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e12b      	b.n	800478a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fda0 	bl	800108c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004584:	f001 fba0 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 8004588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4a81      	ldr	r2, [pc, #516]	; (8004794 <HAL_I2C_Init+0x274>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d807      	bhi.n	80045a4 <HAL_I2C_Init+0x84>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a80      	ldr	r2, [pc, #512]	; (8004798 <HAL_I2C_Init+0x278>)
 8004598:	4293      	cmp	r3, r2
 800459a:	bf94      	ite	ls
 800459c:	2301      	movls	r3, #1
 800459e:	2300      	movhi	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e006      	b.n	80045b2 <HAL_I2C_Init+0x92>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a7d      	ldr	r2, [pc, #500]	; (800479c <HAL_I2C_Init+0x27c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bf94      	ite	ls
 80045ac:	2301      	movls	r3, #1
 80045ae:	2300      	movhi	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0e7      	b.n	800478a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a78      	ldr	r2, [pc, #480]	; (80047a0 <HAL_I2C_Init+0x280>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	0c9b      	lsrs	r3, r3, #18
 80045c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a6a      	ldr	r2, [pc, #424]	; (8004794 <HAL_I2C_Init+0x274>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d802      	bhi.n	80045f4 <HAL_I2C_Init+0xd4>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3301      	adds	r3, #1
 80045f2:	e009      	b.n	8004608 <HAL_I2C_Init+0xe8>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	4a69      	ldr	r2, [pc, #420]	; (80047a4 <HAL_I2C_Init+0x284>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	3301      	adds	r3, #1
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	430b      	orrs	r3, r1
 800460e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800461a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	495c      	ldr	r1, [pc, #368]	; (8004794 <HAL_I2C_Init+0x274>)
 8004624:	428b      	cmp	r3, r1
 8004626:	d819      	bhi.n	800465c <HAL_I2C_Init+0x13c>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1e59      	subs	r1, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fbb1 f3f3 	udiv	r3, r1, r3
 8004636:	1c59      	adds	r1, r3, #1
 8004638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800463c:	400b      	ands	r3, r1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_I2C_Init+0x138>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1e59      	subs	r1, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004650:	3301      	adds	r3, #1
 8004652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004656:	e051      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 8004658:	2304      	movs	r3, #4
 800465a:	e04f      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d111      	bne.n	8004688 <HAL_I2C_Init+0x168>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1e58      	subs	r0, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e012      	b.n	80046ae <HAL_I2C_Init+0x18e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1e58      	subs	r0, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	0099      	lsls	r1, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	fbb0 f3f3 	udiv	r3, r0, r3
 800469e:	3301      	adds	r3, #1
 80046a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_Init+0x196>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e022      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10e      	bne.n	80046dc <HAL_I2C_Init+0x1bc>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1e58      	subs	r0, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	440b      	add	r3, r1
 80046cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046da:	e00f      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1e58      	subs	r0, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	0099      	lsls	r1, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f2:	3301      	adds	r3, #1
 80046f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	6809      	ldr	r1, [r1, #0]
 8004700:	4313      	orrs	r3, r2
 8004702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800472a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6911      	ldr	r1, [r2, #16]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68d2      	ldr	r2, [r2, #12]
 8004736:	4311      	orrs	r1, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	430b      	orrs	r3, r1
 800473e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	000186a0 	.word	0x000186a0
 8004798:	001e847f 	.word	0x001e847f
 800479c:	003d08ff 	.word	0x003d08ff
 80047a0:	431bde83 	.word	0x431bde83
 80047a4:	10624dd3 	.word	0x10624dd3

080047a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	4608      	mov	r0, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	817b      	strh	r3, [r7, #10]
 80047ba:	460b      	mov	r3, r1
 80047bc:	813b      	strh	r3, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c2:	f7ff fb0b 	bl	8003ddc <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	f040 80d9 	bne.w	8004988 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	2319      	movs	r3, #25
 80047dc:	2201      	movs	r2, #1
 80047de:	496d      	ldr	r1, [pc, #436]	; (8004994 <HAL_I2C_Mem_Write+0x1ec>)
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fcc1 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0cc      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_I2C_Mem_Write+0x56>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0c5      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	d007      	beq.n	8004824 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2221      	movs	r2, #33	; 0x21
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2240      	movs	r2, #64	; 0x40
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a4d      	ldr	r2, [pc, #308]	; (8004998 <HAL_I2C_Mem_Write+0x1f0>)
 8004864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004866:	88f8      	ldrh	r0, [r7, #6]
 8004868:	893a      	ldrh	r2, [r7, #8]
 800486a:	8979      	ldrh	r1, [r7, #10]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4603      	mov	r3, r0
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 faf8 	bl	8004e6c <I2C_RequestMemoryWrite>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d052      	beq.n	8004928 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e081      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fd42 	bl	8005314 <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e06b      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d11b      	bne.n	8004928 <HAL_I2C_Mem_Write+0x180>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d017      	beq.n	8004928 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1aa      	bne.n	8004886 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fd2e 	bl	8005396 <I2C_WaitOnBTFFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	2b04      	cmp	r3, #4
 8004946:	d107      	bne.n	8004958 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004956:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e016      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	00100002 	.word	0x00100002
 8004998:	ffff0000 	.word	0xffff0000

0800499c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08c      	sub	sp, #48	; 0x30
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	817b      	strh	r3, [r7, #10]
 80049ae:	460b      	mov	r3, r1
 80049b0:	813b      	strh	r3, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ba:	f7ff fa0f 	bl	8003ddc <HAL_GetTick>
 80049be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	f040 8244 	bne.w	8004e56 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	2319      	movs	r3, #25
 80049d4:	2201      	movs	r2, #1
 80049d6:	4982      	ldr	r1, [pc, #520]	; (8004be0 <HAL_I2C_Mem_Read+0x244>)
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fbc5 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
 80049e6:	e237      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_I2C_Mem_Read+0x5a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e230      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d007      	beq.n	8004a1c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2222      	movs	r2, #34	; 0x22
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2240      	movs	r2, #64	; 0x40
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a62      	ldr	r2, [pc, #392]	; (8004be4 <HAL_I2C_Mem_Read+0x248>)
 8004a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a5e:	88f8      	ldrh	r0, [r7, #6]
 8004a60:	893a      	ldrh	r2, [r7, #8]
 8004a62:	8979      	ldrh	r1, [r7, #10]
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fa92 	bl	8004f98 <I2C_RequestMemoryRead>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e1ec      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d113      	bne.n	8004aae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e1c0      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d11e      	bne.n	8004af4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ac6:	b672      	cpsid	i
}
 8004ac8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004af0:	b662      	cpsie	i
}
 8004af2:	e035      	b.n	8004b60 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d11e      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b0c:	b672      	cpsid	i
}
 8004b0e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b36:	b662      	cpsie	i
}
 8004b38:	e012      	b.n	8004b60 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b48:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b60:	e166      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	f200 811f 	bhi.w	8004daa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d123      	bne.n	8004bbc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fc4d 	bl	8005418 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e167      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bba:	e139      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d152      	bne.n	8004c6a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4906      	ldr	r1, [pc, #24]	; (8004be8 <HAL_I2C_Mem_Read+0x24c>)
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 faca 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e13c      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
 8004bde:	bf00      	nop
 8004be0:	00100002 	.word	0x00100002
 8004be4:	ffff0000 	.word	0xffff0000
 8004be8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bec:	b672      	cpsid	i
}
 8004bee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c32:	b662      	cpsie	i
}
 8004c34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c68:	e0e2      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	2200      	movs	r2, #0
 8004c72:	497b      	ldr	r1, [pc, #492]	; (8004e60 <HAL_I2C_Mem_Read+0x4c4>)
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fa77 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0e9      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c94:	b672      	cpsid	i
}
 8004c96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cca:	4b66      	ldr	r3, [pc, #408]	; (8004e64 <HAL_I2C_Mem_Read+0x4c8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	4a65      	ldr	r2, [pc, #404]	; (8004e68 <HAL_I2C_Mem_Read+0x4cc>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	0a1a      	lsrs	r2, r3, #8
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00da      	lsls	r2, r3, #3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d118      	bne.n	8004d22 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004d12:	b662      	cpsie	i
}
 8004d14:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e09a      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d1d9      	bne.n	8004ce4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d72:	b662      	cpsie	i
}
 8004d74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004da8:	e042      	b.n	8004e30 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fb32 	bl	8005418 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e04c      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d118      	bne.n	8004e30 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f ae94 	bne.w	8004b62 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3728      	adds	r7, #40	; 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	00010004 	.word	0x00010004
 8004e64:	20000000 	.word	0x20000000
 8004e68:	14f8b589 	.word	0x14f8b589

08004e6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	4608      	mov	r0, r1
 8004e76:	4611      	mov	r1, r2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	817b      	strh	r3, [r7, #10]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	813b      	strh	r3, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f960 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ebc:	d103      	bne.n	8004ec6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e05f      	b.n	8004f8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eca:	897b      	ldrh	r3, [r7, #10]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ed8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	492d      	ldr	r1, [pc, #180]	; (8004f94 <I2C_RequestMemoryWrite+0x128>)
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f998 	bl	8005216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e04c      	b.n	8004f8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f08:	6a39      	ldr	r1, [r7, #32]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fa02 	bl	8005314 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d107      	bne.n	8004f2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e02b      	b.n	8004f8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d105      	bne.n	8004f44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f38:	893b      	ldrh	r3, [r7, #8]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	611a      	str	r2, [r3, #16]
 8004f42:	e021      	b.n	8004f88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f44:	893b      	ldrh	r3, [r7, #8]
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	6a39      	ldr	r1, [r7, #32]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f9dc 	bl	8005314 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00d      	beq.n	8004f7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d107      	bne.n	8004f7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e005      	b.n	8004f8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f7e:	893b      	ldrh	r3, [r7, #8]
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	00010002 	.word	0x00010002

08004f98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	817b      	strh	r3, [r7, #10]
 8004faa:	460b      	mov	r3, r1
 8004fac:	813b      	strh	r3, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f8c2 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00d      	beq.n	8005006 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff8:	d103      	bne.n	8005002 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e0aa      	b.n	800515c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005006:	897b      	ldrh	r3, [r7, #10]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005014:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	4952      	ldr	r1, [pc, #328]	; (8005164 <I2C_RequestMemoryRead+0x1cc>)
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f8fa 	bl	8005216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e097      	b.n	800515c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	6a39      	ldr	r1, [r7, #32]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f964 	bl	8005314 <I2C_WaitOnTXEFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00d      	beq.n	800506e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b04      	cmp	r3, #4
 8005058:	d107      	bne.n	800506a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005068:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e076      	b.n	800515c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d105      	bne.n	8005080 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005074:	893b      	ldrh	r3, [r7, #8]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	611a      	str	r2, [r3, #16]
 800507e:	e021      	b.n	80050c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005080:	893b      	ldrh	r3, [r7, #8]
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	b29b      	uxth	r3, r3
 8005086:	b2da      	uxtb	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005090:	6a39      	ldr	r1, [r7, #32]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f93e 	bl	8005314 <I2C_WaitOnTXEFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d107      	bne.n	80050b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e050      	b.n	800515c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ba:	893b      	ldrh	r3, [r7, #8]
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c6:	6a39      	ldr	r1, [r7, #32]
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f923 	bl	8005314 <I2C_WaitOnTXEFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d107      	bne.n	80050ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e035      	b.n	800515c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	2200      	movs	r2, #0
 8005108:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f82b 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00d      	beq.n	8005134 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	d103      	bne.n	8005130 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e013      	b.n	800515c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005134:	897b      	ldrh	r3, [r7, #10]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	6a3a      	ldr	r2, [r7, #32]
 8005148:	4906      	ldr	r1, [pc, #24]	; (8005164 <I2C_RequestMemoryRead+0x1cc>)
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f863 	bl	8005216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	00010002 	.word	0x00010002

08005168 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005178:	e025      	b.n	80051c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d021      	beq.n	80051c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7fe fe2b 	bl	8003ddc <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d116      	bne.n	80051c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e023      	b.n	800520e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10d      	bne.n	80051ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	43da      	mvns	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4013      	ands	r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf0c      	ite	eq
 80051e2:	2301      	moveq	r3, #1
 80051e4:	2300      	movne	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	e00c      	b.n	8005206 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	43da      	mvns	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	429a      	cmp	r2, r3
 800520a:	d0b6      	beq.n	800517a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005224:	e051      	b.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005234:	d123      	bne.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005244:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800524e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f043 0204 	orr.w	r2, r3, #4
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e046      	b.n	800530c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d021      	beq.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005286:	f7fe fda9 	bl	8003ddc <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d116      	bne.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f043 0220 	orr.w	r2, r3, #32
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e020      	b.n	800530c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d10c      	bne.n	80052ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	43da      	mvns	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4013      	ands	r3, r2
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bf14      	ite	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	2300      	moveq	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e00b      	b.n	8005306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	43da      	mvns	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4013      	ands	r3, r2
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	bf14      	ite	ne
 8005300:	2301      	movne	r3, #1
 8005302:	2300      	moveq	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d18d      	bne.n	8005226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005320:	e02d      	b.n	800537e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f8ce 	bl	80054c4 <I2C_IsAcknowledgeFailed>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e02d      	b.n	800538e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d021      	beq.n	800537e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fe fd4f 	bl	8003ddc <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d116      	bne.n	800537e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e007      	b.n	800538e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d1ca      	bne.n	8005322 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053a2:	e02d      	b.n	8005400 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f88d 	bl	80054c4 <I2C_IsAcknowledgeFailed>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e02d      	b.n	8005410 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d021      	beq.n	8005400 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053bc:	f7fe fd0e 	bl	8003ddc <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d116      	bne.n	8005400 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	f043 0220 	orr.w	r2, r3, #32
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e007      	b.n	8005410 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b04      	cmp	r3, #4
 800540c:	d1ca      	bne.n	80053a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005424:	e042      	b.n	80054ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	2b10      	cmp	r3, #16
 8005432:	d119      	bne.n	8005468 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0210 	mvn.w	r2, #16
 800543c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e029      	b.n	80054bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005468:	f7fe fcb8 	bl	8003ddc <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d116      	bne.n	80054ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	f043 0220 	orr.w	r2, r3, #32
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e007      	b.n	80054bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d1b5      	bne.n	8005426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054da:	d11b      	bne.n	8005514 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	f043 0204 	orr.w	r2, r3, #4
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e26c      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 8087 	beq.w	800564e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005540:	4b92      	ldr	r3, [pc, #584]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 030c 	and.w	r3, r3, #12
 8005548:	2b04      	cmp	r3, #4
 800554a:	d00c      	beq.n	8005566 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800554c:	4b8f      	ldr	r3, [pc, #572]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 030c 	and.w	r3, r3, #12
 8005554:	2b08      	cmp	r3, #8
 8005556:	d112      	bne.n	800557e <HAL_RCC_OscConfig+0x5e>
 8005558:	4b8c      	ldr	r3, [pc, #560]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005564:	d10b      	bne.n	800557e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005566:	4b89      	ldr	r3, [pc, #548]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d06c      	beq.n	800564c <HAL_RCC_OscConfig+0x12c>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d168      	bne.n	800564c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e246      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005586:	d106      	bne.n	8005596 <HAL_RCC_OscConfig+0x76>
 8005588:	4b80      	ldr	r3, [pc, #512]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a7f      	ldr	r2, [pc, #508]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 800558e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	e02e      	b.n	80055f4 <HAL_RCC_OscConfig+0xd4>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10c      	bne.n	80055b8 <HAL_RCC_OscConfig+0x98>
 800559e:	4b7b      	ldr	r3, [pc, #492]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a7a      	ldr	r2, [pc, #488]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4b78      	ldr	r3, [pc, #480]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a77      	ldr	r2, [pc, #476]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e01d      	b.n	80055f4 <HAL_RCC_OscConfig+0xd4>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c0:	d10c      	bne.n	80055dc <HAL_RCC_OscConfig+0xbc>
 80055c2:	4b72      	ldr	r3, [pc, #456]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a71      	ldr	r2, [pc, #452]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4b6f      	ldr	r3, [pc, #444]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a6e      	ldr	r2, [pc, #440]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e00b      	b.n	80055f4 <HAL_RCC_OscConfig+0xd4>
 80055dc:	4b6b      	ldr	r3, [pc, #428]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6a      	ldr	r2, [pc, #424]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	4b68      	ldr	r3, [pc, #416]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a67      	ldr	r2, [pc, #412]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80055ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d013      	beq.n	8005624 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fc:	f7fe fbee 	bl	8003ddc <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005604:	f7fe fbea 	bl	8003ddc <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b64      	cmp	r3, #100	; 0x64
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e1fa      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005616:	4b5d      	ldr	r3, [pc, #372]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0xe4>
 8005622:	e014      	b.n	800564e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7fe fbda 	bl	8003ddc <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800562c:	f7fe fbd6 	bl	8003ddc <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b64      	cmp	r3, #100	; 0x64
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e1e6      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563e:	4b53      	ldr	r3, [pc, #332]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x10c>
 800564a:	e000      	b.n	800564e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800564c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d063      	beq.n	8005722 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800565a:	4b4c      	ldr	r3, [pc, #304]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005666:	4b49      	ldr	r3, [pc, #292]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f003 030c 	and.w	r3, r3, #12
 800566e:	2b08      	cmp	r3, #8
 8005670:	d11c      	bne.n	80056ac <HAL_RCC_OscConfig+0x18c>
 8005672:	4b46      	ldr	r3, [pc, #280]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d116      	bne.n	80056ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567e:	4b43      	ldr	r3, [pc, #268]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_RCC_OscConfig+0x176>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d001      	beq.n	8005696 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e1ba      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005696:	4b3d      	ldr	r3, [pc, #244]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4939      	ldr	r1, [pc, #228]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056aa:	e03a      	b.n	8005722 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d020      	beq.n	80056f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b4:	4b36      	ldr	r3, [pc, #216]	; (8005790 <HAL_RCC_OscConfig+0x270>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fe fb8f 	bl	8003ddc <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c2:	f7fe fb8b 	bl	8003ddc <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e19b      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d4:	4b2d      	ldr	r3, [pc, #180]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e0:	4b2a      	ldr	r3, [pc, #168]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	4927      	ldr	r1, [pc, #156]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]
 80056f4:	e015      	b.n	8005722 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f6:	4b26      	ldr	r3, [pc, #152]	; (8005790 <HAL_RCC_OscConfig+0x270>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fc:	f7fe fb6e 	bl	8003ddc <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005704:	f7fe fb6a 	bl	8003ddc <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e17a      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d03a      	beq.n	80057a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d019      	beq.n	800576a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005736:	4b17      	ldr	r3, [pc, #92]	; (8005794 <HAL_RCC_OscConfig+0x274>)
 8005738:	2201      	movs	r2, #1
 800573a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573c:	f7fe fb4e 	bl	8003ddc <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005744:	f7fe fb4a 	bl	8003ddc <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e15a      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005756:	4b0d      	ldr	r3, [pc, #52]	; (800578c <HAL_RCC_OscConfig+0x26c>)
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005762:	2001      	movs	r0, #1
 8005764:	f000 fad8 	bl	8005d18 <RCC_Delay>
 8005768:	e01c      	b.n	80057a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_RCC_OscConfig+0x274>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005770:	f7fe fb34 	bl	8003ddc <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005776:	e00f      	b.n	8005798 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005778:	f7fe fb30 	bl	8003ddc <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d908      	bls.n	8005798 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e140      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
 800578a:	bf00      	nop
 800578c:	40021000 	.word	0x40021000
 8005790:	42420000 	.word	0x42420000
 8005794:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005798:	4b9e      	ldr	r3, [pc, #632]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e9      	bne.n	8005778 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80a6 	beq.w	80058fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057b2:	2300      	movs	r3, #0
 80057b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b6:	4b97      	ldr	r3, [pc, #604]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10d      	bne.n	80057de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057c2:	4b94      	ldr	r3, [pc, #592]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	4a93      	ldr	r2, [pc, #588]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80057c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057cc:	61d3      	str	r3, [r2, #28]
 80057ce:	4b91      	ldr	r3, [pc, #580]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d6:	60bb      	str	r3, [r7, #8]
 80057d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057de:	4b8e      	ldr	r3, [pc, #568]	; (8005a18 <HAL_RCC_OscConfig+0x4f8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d118      	bne.n	800581c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ea:	4b8b      	ldr	r3, [pc, #556]	; (8005a18 <HAL_RCC_OscConfig+0x4f8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a8a      	ldr	r2, [pc, #552]	; (8005a18 <HAL_RCC_OscConfig+0x4f8>)
 80057f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f6:	f7fe faf1 	bl	8003ddc <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fe:	f7fe faed 	bl	8003ddc <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b64      	cmp	r3, #100	; 0x64
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e0fd      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005810:	4b81      	ldr	r3, [pc, #516]	; (8005a18 <HAL_RCC_OscConfig+0x4f8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d106      	bne.n	8005832 <HAL_RCC_OscConfig+0x312>
 8005824:	4b7b      	ldr	r3, [pc, #492]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	4a7a      	ldr	r2, [pc, #488]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	6213      	str	r3, [r2, #32]
 8005830:	e02d      	b.n	800588e <HAL_RCC_OscConfig+0x36e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10c      	bne.n	8005854 <HAL_RCC_OscConfig+0x334>
 800583a:	4b76      	ldr	r3, [pc, #472]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	4a75      	ldr	r2, [pc, #468]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	6213      	str	r3, [r2, #32]
 8005846:	4b73      	ldr	r3, [pc, #460]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	4a72      	ldr	r2, [pc, #456]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800584c:	f023 0304 	bic.w	r3, r3, #4
 8005850:	6213      	str	r3, [r2, #32]
 8005852:	e01c      	b.n	800588e <HAL_RCC_OscConfig+0x36e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b05      	cmp	r3, #5
 800585a:	d10c      	bne.n	8005876 <HAL_RCC_OscConfig+0x356>
 800585c:	4b6d      	ldr	r3, [pc, #436]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	4a6c      	ldr	r2, [pc, #432]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005862:	f043 0304 	orr.w	r3, r3, #4
 8005866:	6213      	str	r3, [r2, #32]
 8005868:	4b6a      	ldr	r3, [pc, #424]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	4a69      	ldr	r2, [pc, #420]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	6213      	str	r3, [r2, #32]
 8005874:	e00b      	b.n	800588e <HAL_RCC_OscConfig+0x36e>
 8005876:	4b67      	ldr	r3, [pc, #412]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	4a66      	ldr	r2, [pc, #408]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	6213      	str	r3, [r2, #32]
 8005882:	4b64      	ldr	r3, [pc, #400]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	4a63      	ldr	r2, [pc, #396]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005888:	f023 0304 	bic.w	r3, r3, #4
 800588c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d015      	beq.n	80058c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005896:	f7fe faa1 	bl	8003ddc <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800589c:	e00a      	b.n	80058b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589e:	f7fe fa9d 	bl	8003ddc <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e0ab      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b4:	4b57      	ldr	r3, [pc, #348]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ee      	beq.n	800589e <HAL_RCC_OscConfig+0x37e>
 80058c0:	e014      	b.n	80058ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c2:	f7fe fa8b 	bl	8003ddc <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ca:	f7fe fa87 	bl	8003ddc <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e095      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e0:	4b4c      	ldr	r3, [pc, #304]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1ee      	bne.n	80058ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d105      	bne.n	80058fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f2:	4b48      	ldr	r3, [pc, #288]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	4a47      	ldr	r2, [pc, #284]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80058f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8081 	beq.w	8005a0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005908:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f003 030c 	and.w	r3, r3, #12
 8005910:	2b08      	cmp	r3, #8
 8005912:	d061      	beq.n	80059d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d146      	bne.n	80059aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591c:	4b3f      	ldr	r3, [pc, #252]	; (8005a1c <HAL_RCC_OscConfig+0x4fc>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005922:	f7fe fa5b 	bl	8003ddc <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592a:	f7fe fa57 	bl	8003ddc <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e067      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800593c:	4b35      	ldr	r3, [pc, #212]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f0      	bne.n	800592a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005950:	d108      	bne.n	8005964 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005952:	4b30      	ldr	r3, [pc, #192]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	492d      	ldr	r1, [pc, #180]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005960:	4313      	orrs	r3, r2
 8005962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005964:	4b2b      	ldr	r3, [pc, #172]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a19      	ldr	r1, [r3, #32]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	430b      	orrs	r3, r1
 8005976:	4927      	ldr	r1, [pc, #156]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 8005978:	4313      	orrs	r3, r2
 800597a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800597c:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <HAL_RCC_OscConfig+0x4fc>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005982:	f7fe fa2b 	bl	8003ddc <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598a:	f7fe fa27 	bl	8003ddc <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e037      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800599c:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <HAL_RCC_OscConfig+0x46a>
 80059a8:	e02f      	b.n	8005a0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059aa:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <HAL_RCC_OscConfig+0x4fc>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b0:	f7fe fa14 	bl	8003ddc <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b8:	f7fe fa10 	bl	8003ddc <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e020      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f0      	bne.n	80059b8 <HAL_RCC_OscConfig+0x498>
 80059d6:	e018      	b.n	8005a0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e013      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCC_OscConfig+0x4f4>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d106      	bne.n	8005a06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40007000 	.word	0x40007000
 8005a1c:	42420060 	.word	0x42420060

08005a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0d0      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a34:	4b6a      	ldr	r3, [pc, #424]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d910      	bls.n	8005a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a42:	4b67      	ldr	r3, [pc, #412]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f023 0207 	bic.w	r2, r3, #7
 8005a4a:	4965      	ldr	r1, [pc, #404]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b63      	ldr	r3, [pc, #396]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0b8      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d020      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a7c:	4b59      	ldr	r3, [pc, #356]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a58      	ldr	r2, [pc, #352]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a94:	4b53      	ldr	r3, [pc, #332]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a52      	ldr	r2, [pc, #328]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa0:	4b50      	ldr	r3, [pc, #320]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	494d      	ldr	r1, [pc, #308]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d040      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac6:	4b47      	ldr	r3, [pc, #284]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d115      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e07f      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d107      	bne.n	8005aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ade:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e073      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aee:	4b3d      	ldr	r3, [pc, #244]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e06b      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005afe:	4b39      	ldr	r3, [pc, #228]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f023 0203 	bic.w	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4936      	ldr	r1, [pc, #216]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b10:	f7fe f964 	bl	8003ddc <HAL_GetTick>
 8005b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b18:	f7fe f960 	bl	8003ddc <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e053      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	4b2d      	ldr	r3, [pc, #180]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 020c 	and.w	r2, r3, #12
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d1eb      	bne.n	8005b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b40:	4b27      	ldr	r3, [pc, #156]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d210      	bcs.n	8005b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 0207 	bic.w	r2, r3, #7
 8005b56:	4922      	ldr	r1, [pc, #136]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5e:	4b20      	ldr	r3, [pc, #128]	; (8005be0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e032      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b7c:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4916      	ldr	r1, [pc, #88]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b9a:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	490e      	ldr	r1, [pc, #56]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bae:	f000 f821 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	091b      	lsrs	r3, r3, #4
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	490a      	ldr	r1, [pc, #40]	; (8005be8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc0:	5ccb      	ldrb	r3, [r1, r3]
 8005bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc6:	4a09      	ldr	r2, [pc, #36]	; (8005bec <HAL_RCC_ClockConfig+0x1cc>)
 8005bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bca:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe f8c2 	bl	8003d58 <HAL_InitTick>

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40022000 	.word	0x40022000
 8005be4:	40021000 	.word	0x40021000
 8005be8:	0800b634 	.word	0x0800b634
 8005bec:	20000000 	.word	0x20000000
 8005bf0:	20000004 	.word	0x20000004

08005bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf4:	b490      	push	{r4, r7}
 8005bf6:	b08a      	sub	sp, #40	; 0x28
 8005bf8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005bfa:	4b2a      	ldr	r3, [pc, #168]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005bfc:	1d3c      	adds	r4, r7, #4
 8005bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005c04:	f240 2301 	movw	r3, #513	; 0x201
 8005c08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	2300      	movs	r3, #0
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c1e:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d002      	beq.n	8005c34 <HAL_RCC_GetSysClockFreq+0x40>
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d003      	beq.n	8005c3a <HAL_RCC_GetSysClockFreq+0x46>
 8005c32:	e02d      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c36:	623b      	str	r3, [r7, #32]
      break;
 8005c38:	e02d      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	0c9b      	lsrs	r3, r3, #18
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c46:	4413      	add	r3, r2
 8005c48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d013      	beq.n	8005c80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	0c5b      	lsrs	r3, r3, #17
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c66:	4413      	add	r3, r2
 8005c68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	4a0e      	ldr	r2, [pc, #56]	; (8005cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c72:	fb02 f203 	mul.w	r2, r2, r3
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7e:	e004      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	4a0b      	ldr	r2, [pc, #44]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c84:	fb02 f303 	mul.w	r3, r2, r3
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	623b      	str	r3, [r7, #32]
      break;
 8005c8e:	e002      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c90:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c92:	623b      	str	r3, [r7, #32]
      break;
 8005c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c96:	6a3b      	ldr	r3, [r7, #32]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3728      	adds	r7, #40	; 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc90      	pop	{r4, r7}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	0800b624 	.word	0x0800b624
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	007a1200 	.word	0x007a1200
 8005cb0:	003d0900 	.word	0x003d0900

08005cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb8:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cba:	681b      	ldr	r3, [r3, #0]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	20000000 	.word	0x20000000

08005cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ccc:	f7ff fff2 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4903      	ldr	r1, [pc, #12]	; (8005cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	0800b644 	.word	0x0800b644

08005cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cf4:	f7ff ffde 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	0adb      	lsrs	r3, r3, #11
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	4903      	ldr	r1, [pc, #12]	; (8005d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d06:	5ccb      	ldrb	r3, [r1, r3]
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40021000 	.word	0x40021000
 8005d14:	0800b644 	.word	0x0800b644

08005d18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <RCC_Delay+0x34>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <RCC_Delay+0x38>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	0a5b      	lsrs	r3, r3, #9
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d34:	bf00      	nop
  }
  while (Delay --);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1e5a      	subs	r2, r3, #1
 8005d3a:	60fa      	str	r2, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1f9      	bne.n	8005d34 <RCC_Delay+0x1c>
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr
 8005d4c:	20000000 	.word	0x20000000
 8005d50:	10624dd3 	.word	0x10624dd3

08005d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e041      	b.n	8005dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fd fcfc 	bl	8003778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f000 faec 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d001      	beq.n	8005e0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e032      	b.n	8005e72 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <HAL_TIM_Base_Start+0x88>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00e      	beq.n	8005e3c <HAL_TIM_Base_Start+0x48>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d009      	beq.n	8005e3c <HAL_TIM_Base_Start+0x48>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a14      	ldr	r2, [pc, #80]	; (8005e80 <HAL_TIM_Base_Start+0x8c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIM_Base_Start+0x48>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <HAL_TIM_Base_Start+0x90>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d111      	bne.n	8005e60 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b06      	cmp	r3, #6
 8005e4c:	d010      	beq.n	8005e70 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5e:	e007      	b.n	8005e70 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800

08005e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e041      	b.n	8005f1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fd fc46 	bl	8003740 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 fa52 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <HAL_TIM_PWM_Start+0x24>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	bf14      	ite	ne
 8005f44:	2301      	movne	r3, #1
 8005f46:	2300      	moveq	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	e022      	b.n	8005f92 <HAL_TIM_PWM_Start+0x6a>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d109      	bne.n	8005f66 <HAL_TIM_PWM_Start+0x3e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	bf14      	ite	ne
 8005f5e:	2301      	movne	r3, #1
 8005f60:	2300      	moveq	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	e015      	b.n	8005f92 <HAL_TIM_PWM_Start+0x6a>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d109      	bne.n	8005f80 <HAL_TIM_PWM_Start+0x58>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e008      	b.n	8005f92 <HAL_TIM_PWM_Start+0x6a>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	bf14      	ite	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	2300      	moveq	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e05e      	b.n	8006058 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_PWM_Start+0x82>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa8:	e013      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xaa>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d104      	bne.n	8005fba <HAL_TIM_PWM_Start+0x92>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb8:	e00b      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xaa>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_PWM_Start+0xa2>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc8:	e003      	b.n	8005fd2 <HAL_TIM_PWM_Start+0xaa>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fc48 	bl	8006870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <HAL_TIM_PWM_Start+0x138>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d107      	bne.n	8005ffa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a18      	ldr	r2, [pc, #96]	; (8006060 <HAL_TIM_PWM_Start+0x138>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00e      	beq.n	8006022 <HAL_TIM_PWM_Start+0xfa>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600c:	d009      	beq.n	8006022 <HAL_TIM_PWM_Start+0xfa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a14      	ldr	r2, [pc, #80]	; (8006064 <HAL_TIM_PWM_Start+0x13c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d004      	beq.n	8006022 <HAL_TIM_PWM_Start+0xfa>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a12      	ldr	r2, [pc, #72]	; (8006068 <HAL_TIM_PWM_Start+0x140>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d111      	bne.n	8006046 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b06      	cmp	r3, #6
 8006032:	d010      	beq.n	8006056 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006044:	e007      	b.n	8006056 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800

0800606c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006082:	2302      	movs	r3, #2
 8006084:	e0ac      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b0c      	cmp	r3, #12
 8006092:	f200 809f 	bhi.w	80061d4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060d1 	.word	0x080060d1
 80060a0:	080061d5 	.word	0x080061d5
 80060a4:	080061d5 	.word	0x080061d5
 80060a8:	080061d5 	.word	0x080061d5
 80060ac:	08006111 	.word	0x08006111
 80060b0:	080061d5 	.word	0x080061d5
 80060b4:	080061d5 	.word	0x080061d5
 80060b8:	080061d5 	.word	0x080061d5
 80060bc:	08006153 	.word	0x08006153
 80060c0:	080061d5 	.word	0x080061d5
 80060c4:	080061d5 	.word	0x080061d5
 80060c8:	080061d5 	.word	0x080061d5
 80060cc:	08006193 	.word	0x08006193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f9ac 	bl	8006434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0208 	orr.w	r2, r2, #8
 80060ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0204 	bic.w	r2, r2, #4
 80060fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6999      	ldr	r1, [r3, #24]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	619a      	str	r2, [r3, #24]
      break;
 800610e:	e062      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f9f2 	bl	8006500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800612a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6999      	ldr	r1, [r3, #24]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	021a      	lsls	r2, r3, #8
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	619a      	str	r2, [r3, #24]
      break;
 8006150:	e041      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fa3b 	bl	80065d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0208 	orr.w	r2, r2, #8
 800616c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0204 	bic.w	r2, r2, #4
 800617c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69d9      	ldr	r1, [r3, #28]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	61da      	str	r2, [r3, #28]
      break;
 8006190:	e021      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fa85 	bl	80066a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69d9      	ldr	r1, [r3, #28]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	021a      	lsls	r2, r3, #8
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	61da      	str	r2, [r3, #28]
      break;
 80061d2:	e000      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80061d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_TIM_ConfigClockSource+0x18>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e0b3      	b.n	8006368 <HAL_TIM_ConfigClockSource+0x180>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800621e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006226:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006238:	d03e      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0xd0>
 800623a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800623e:	f200 8087 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x168>
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006246:	f000 8085 	beq.w	8006354 <HAL_TIM_ConfigClockSource+0x16c>
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	d87f      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x168>
 8006250:	2b70      	cmp	r3, #112	; 0x70
 8006252:	d01a      	beq.n	800628a <HAL_TIM_ConfigClockSource+0xa2>
 8006254:	2b70      	cmp	r3, #112	; 0x70
 8006256:	d87b      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x168>
 8006258:	2b60      	cmp	r3, #96	; 0x60
 800625a:	d050      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0x116>
 800625c:	2b60      	cmp	r3, #96	; 0x60
 800625e:	d877      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x168>
 8006260:	2b50      	cmp	r3, #80	; 0x50
 8006262:	d03c      	beq.n	80062de <HAL_TIM_ConfigClockSource+0xf6>
 8006264:	2b50      	cmp	r3, #80	; 0x50
 8006266:	d873      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x168>
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d058      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x136>
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	d86f      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x168>
 8006270:	2b30      	cmp	r3, #48	; 0x30
 8006272:	d064      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x156>
 8006274:	2b30      	cmp	r3, #48	; 0x30
 8006276:	d86b      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x168>
 8006278:	2b20      	cmp	r3, #32
 800627a:	d060      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x156>
 800627c:	2b20      	cmp	r3, #32
 800627e:	d867      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x168>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d05c      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x156>
 8006284:	2b10      	cmp	r3, #16
 8006286:	d05a      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006288:	e062      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6899      	ldr	r1, [r3, #8]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f000 faca 	bl	8006832 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	609a      	str	r2, [r3, #8]
      break;
 80062b6:	e04e      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	6899      	ldr	r1, [r3, #8]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f000 fab3 	bl	8006832 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062da:	609a      	str	r2, [r3, #8]
      break;
 80062dc:	e03b      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6859      	ldr	r1, [r3, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	461a      	mov	r2, r3
 80062ec:	f000 fa2a 	bl	8006744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2150      	movs	r1, #80	; 0x50
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fa81 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 80062fc:	e02b      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6859      	ldr	r1, [r3, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	461a      	mov	r2, r3
 800630c:	f000 fa48 	bl	80067a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2160      	movs	r1, #96	; 0x60
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fa71 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 800631c:	e01b      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6859      	ldr	r1, [r3, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	461a      	mov	r2, r3
 800632c:	f000 fa0a 	bl	8006744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2140      	movs	r1, #64	; 0x40
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fa61 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 800633c:	e00b      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f000 fa58 	bl	80067fe <TIM_ITRx_SetConfig>
        break;
 800634e:	e002      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006350:	bf00      	nop
 8006352:	e000      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006354:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a29      	ldr	r2, [pc, #164]	; (8006428 <TIM_Base_SetConfig+0xb8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00b      	beq.n	80063a0 <TIM_Base_SetConfig+0x30>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d007      	beq.n	80063a0 <TIM_Base_SetConfig+0x30>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a26      	ldr	r2, [pc, #152]	; (800642c <TIM_Base_SetConfig+0xbc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_Base_SetConfig+0x30>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a25      	ldr	r2, [pc, #148]	; (8006430 <TIM_Base_SetConfig+0xc0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d108      	bne.n	80063b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <TIM_Base_SetConfig+0xb8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00b      	beq.n	80063d2 <TIM_Base_SetConfig+0x62>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d007      	beq.n	80063d2 <TIM_Base_SetConfig+0x62>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a19      	ldr	r2, [pc, #100]	; (800642c <TIM_Base_SetConfig+0xbc>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_Base_SetConfig+0x62>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a18      	ldr	r2, [pc, #96]	; (8006430 <TIM_Base_SetConfig+0xc0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d108      	bne.n	80063e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a07      	ldr	r2, [pc, #28]	; (8006428 <TIM_Base_SetConfig+0xb8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800

08006434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0201 	bic.w	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 0302 	bic.w	r3, r3, #2
 800647c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <TIM_OC1_SetConfig+0xc8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10c      	bne.n	80064aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 0308 	bic.w	r3, r3, #8
 8006496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a13      	ldr	r2, [pc, #76]	; (80064fc <TIM_OC1_SetConfig+0xc8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d111      	bne.n	80064d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40012c00 	.word	0x40012c00

08006500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f023 0210 	bic.w	r2, r3, #16
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f023 0320 	bic.w	r3, r3, #32
 800654a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <TIM_OC2_SetConfig+0xd0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10d      	bne.n	800657c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <TIM_OC2_SetConfig+0xd0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d113      	bne.n	80065ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800658a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	40012c00 	.word	0x40012c00

080065d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800661c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <TIM_OC3_SetConfig+0xd0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d10d      	bne.n	800664e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800664c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a14      	ldr	r2, [pc, #80]	; (80066a4 <TIM_OC3_SetConfig+0xd0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d113      	bne.n	800667e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800665c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	621a      	str	r2, [r3, #32]
}
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40012c00 	.word	0x40012c00

080066a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	031b      	lsls	r3, r3, #12
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a0f      	ldr	r2, [pc, #60]	; (8006740 <TIM_OC4_SetConfig+0x98>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d109      	bne.n	800671c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800670e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	019b      	lsls	r3, r3, #6
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr
 8006740:	40012c00 	.word	0x40012c00

08006744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f023 0201 	bic.w	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800676e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 030a 	bic.w	r3, r3, #10
 8006780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f023 0210 	bic.w	r2, r3, #16
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	031b      	lsls	r3, r3, #12
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bc80      	pop	{r7}
 80067fc:	4770      	bx	lr

080067fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	f043 0307 	orr.w	r3, r3, #7
 8006820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	609a      	str	r2, [r3, #8]
}
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006832:	b480      	push	{r7}
 8006834:	b087      	sub	sp, #28
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
 800683e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800684c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	021a      	lsls	r2, r3, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	431a      	orrs	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4313      	orrs	r3, r2
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	609a      	str	r2, [r3, #8]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f003 031f 	and.w	r3, r3, #31
 8006882:	2201      	movs	r2, #1
 8006884:	fa02 f303 	lsl.w	r3, r2, r3
 8006888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1a      	ldr	r2, [r3, #32]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	43db      	mvns	r3, r3
 8006892:	401a      	ands	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a1a      	ldr	r2, [r3, #32]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	fa01 f303 	lsl.w	r3, r1, r3
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e046      	b.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a16      	ldr	r2, [pc, #88]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691c:	d009      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a10      	ldr	r2, [pc, #64]	; (8006970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d10c      	bne.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	4313      	orrs	r3, r2
 8006942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800

08006974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e03f      	b.n	8006a06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fc ff64 	bl	8003868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2224      	movs	r2, #36	; 0x24
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fc85 	bl	80072c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695a      	ldr	r2, [r3, #20]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b08a      	sub	sp, #40	; 0x28
 8006a12:	af02      	add	r7, sp, #8
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d17c      	bne.n	8006b28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_UART_Transmit+0x2c>
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e075      	b.n	8006b2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_UART_Transmit+0x3e>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e06e      	b.n	8006b2a <HAL_UART_Transmit+0x11c>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2221      	movs	r2, #33	; 0x21
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a62:	f7fd f9bb 	bl	8003ddc <HAL_GetTick>
 8006a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	88fa      	ldrh	r2, [r7, #6]
 8006a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	88fa      	ldrh	r2, [r7, #6]
 8006a72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7c:	d108      	bne.n	8006a90 <HAL_UART_Transmit+0x82>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	e003      	b.n	8006a98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006aa0:	e02a      	b.n	8006af8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 fa38 	bl	8006f22 <UART_WaitOnFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e036      	b.n	8006b2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e007      	b.n	8006aea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1cf      	bne.n	8006aa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2140      	movs	r1, #64	; 0x40
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fa08 	bl	8006f22 <UART_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e006      	b.n	8006b2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e000      	b.n	8006b2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
  }
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3720      	adds	r7, #32
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d11d      	bne.n	8006b88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_UART_Receive_IT+0x26>
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e016      	b.n	8006b8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Receive_IT+0x38>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e00f      	b.n	8006b8a <HAL_UART_Receive_IT+0x58>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 fa19 	bl	8006fb6 <UART_Start_Receive_IT>
 8006b84:	4603      	mov	r3, r0
 8006b86:	e000      	b.n	8006b8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08a      	sub	sp, #40	; 0x28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10d      	bne.n	8006be6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d008      	beq.n	8006be6 <HAL_UART_IRQHandler+0x52>
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fac9 	bl	8007176 <UART_Receive_IT>
      return;
 8006be4:	e17b      	b.n	8006ede <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 80b1 	beq.w	8006d50 <HAL_UART_IRQHandler+0x1bc>
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d105      	bne.n	8006c04 <HAL_UART_IRQHandler+0x70>
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80a6 	beq.w	8006d50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <HAL_UART_IRQHandler+0x90>
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	f043 0201 	orr.w	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <HAL_UART_IRQHandler+0xb0>
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	f043 0202 	orr.w	r2, r3, #2
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <HAL_UART_IRQHandler+0xd0>
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	f043 0204 	orr.w	r2, r3, #4
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00f      	beq.n	8006c8e <HAL_UART_IRQHandler+0xfa>
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <HAL_UART_IRQHandler+0xee>
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f043 0208 	orr.w	r2, r3, #8
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 811e 	beq.w	8006ed4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x11e>
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fa62 	bl	8007176 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bf14      	ite	ne
 8006cc0:	2301      	movne	r3, #1
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	f003 0308 	and.w	r3, r3, #8
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <HAL_UART_IRQHandler+0x146>
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d031      	beq.n	8006d3e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9a4 	bl	8007028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d023      	beq.n	8006d36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695a      	ldr	r2, [r3, #20]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d013      	beq.n	8006d2e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	4a76      	ldr	r2, [pc, #472]	; (8006ee4 <HAL_UART_IRQHandler+0x350>)
 8006d0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fd f9d8 	bl	80040c8 <HAL_DMA_Abort_IT>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d016      	beq.n	8006d4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	e00e      	b.n	8006d4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f8e3 	bl	8006efa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d34:	e00a      	b.n	8006d4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8df 	bl	8006efa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3c:	e006      	b.n	8006d4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8db 	bl	8006efa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d4a:	e0c3      	b.n	8006ed4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	bf00      	nop
    return;
 8006d4e:	e0c1      	b.n	8006ed4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	f040 80a1 	bne.w	8006e9c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 809b 	beq.w	8006e9c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8095 	beq.w	8006e9c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d04e      	beq.n	8006e34 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006da0:	8a3b      	ldrh	r3, [r7, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8098 	beq.w	8006ed8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dac:	8a3a      	ldrh	r2, [r7, #16]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	f080 8092 	bcs.w	8006ed8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8a3a      	ldrh	r2, [r7, #16]
 8006db8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d02b      	beq.n	8006e1c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dd2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695a      	ldr	r2, [r3, #20]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695a      	ldr	r2, [r3, #20]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0210 	bic.w	r2, r2, #16
 8006e10:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fd f91b 	bl	8004052 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f86d 	bl	8006f0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e32:	e051      	b.n	8006ed8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d047      	beq.n	8006edc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006e4c:	8a7b      	ldrh	r3, [r7, #18]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d044      	beq.n	8006edc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e60:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	695a      	ldr	r2, [r3, #20]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0201 	bic.w	r2, r2, #1
 8006e70:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0210 	bic.w	r2, r2, #16
 8006e8e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e90:	8a7b      	ldrh	r3, [r7, #18]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f839 	bl	8006f0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e9a:	e01f      	b.n	8006edc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d008      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x324>
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f8f9 	bl	80070a8 <UART_Transmit_IT>
    return;
 8006eb6:	e012      	b.n	8006ede <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00d      	beq.n	8006ede <HAL_UART_IRQHandler+0x34a>
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f93a 	bl	8007146 <UART_EndTransmit_IT>
    return;
 8006ed2:	e004      	b.n	8006ede <HAL_UART_IRQHandler+0x34a>
    return;
 8006ed4:	bf00      	nop
 8006ed6:	e002      	b.n	8006ede <HAL_UART_IRQHandler+0x34a>
      return;
 8006ed8:	bf00      	nop
 8006eda:	e000      	b.n	8006ede <HAL_UART_IRQHandler+0x34a>
      return;
 8006edc:	bf00      	nop
  }
}
 8006ede:	3728      	adds	r7, #40	; 0x28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	08007081 	.word	0x08007081

08006ee8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr

08006efa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr

08006f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	603b      	str	r3, [r7, #0]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f32:	e02c      	b.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d028      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f42:	f7fc ff4b 	bl	8003ddc <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d21d      	bcs.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f60:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	695a      	ldr	r2, [r3, #20]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e00f      	b.n	8006fae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d0c3      	beq.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	88fa      	ldrh	r2, [r7, #6]
 8006fce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	88fa      	ldrh	r2, [r7, #6]
 8006fd4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2222      	movs	r2, #34	; 0x22
 8006fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ffa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0220 	orr.w	r2, r2, #32
 800701a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr

08007028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800703e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	2b01      	cmp	r3, #1
 8007056:	d107      	bne.n	8007068 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0210 	bic.w	r2, r2, #16
 8007066:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr

08007080 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff ff2d 	bl	8006efa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b21      	cmp	r3, #33	; 0x21
 80070ba:	d13e      	bne.n	800713a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c4:	d114      	bne.n	80070f0 <UART_Transmit_IT+0x48>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d110      	bne.n	80070f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	1c9a      	adds	r2, r3, #2
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]
 80070ee:	e008      	b.n	8007102 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	1c59      	adds	r1, r3, #1
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6211      	str	r1, [r2, #32]
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29b      	uxth	r3, r3
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	4619      	mov	r1, r3
 8007110:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10f      	bne.n	8007136 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007124:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007134:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	e000      	b.n	800713c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800713a:	2302      	movs	r3, #2
  }
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr

08007146 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff febe 	bl	8006ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b22      	cmp	r3, #34	; 0x22
 8007188:	f040 8099 	bne.w	80072be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007194:	d117      	bne.n	80071c6 <UART_Receive_IT+0x50>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d113      	bne.n	80071c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	1c9a      	adds	r2, r3, #2
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28
 80071c4:	e026      	b.n	8007214 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d8:	d007      	beq.n	80071ea <UART_Receive_IT+0x74>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10a      	bne.n	80071f8 <UART_Receive_IT+0x82>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d106      	bne.n	80071f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	e008      	b.n	800720a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007204:	b2da      	uxtb	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29b      	uxth	r3, r3
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4619      	mov	r1, r3
 8007222:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007224:	2b00      	cmp	r3, #0
 8007226:	d148      	bne.n	80072ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0220 	bic.w	r2, r2, #32
 8007236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	2b01      	cmp	r3, #1
 8007266:	d123      	bne.n	80072b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0210 	bic.w	r2, r2, #16
 800727c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b10      	cmp	r3, #16
 800728a:	d10a      	bne.n	80072a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff fe2f 	bl	8006f0c <HAL_UARTEx_RxEventCallback>
 80072ae:	e002      	b.n	80072b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7fc fb2d 	bl	8003910 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	e002      	b.n	80072c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e000      	b.n	80072c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80072be:	2302      	movs	r3, #2
  }
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007302:	f023 030c 	bic.w	r3, r3, #12
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	430b      	orrs	r3, r1
 800730e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2c      	ldr	r2, [pc, #176]	; (80073dc <UART_SetConfig+0x114>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d103      	bne.n	8007338 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007330:	f7fe fcde 	bl	8005cf0 <HAL_RCC_GetPCLK2Freq>
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	e002      	b.n	800733e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007338:	f7fe fcc6 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 800733c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009a      	lsls	r2, r3, #2
 8007348:	441a      	add	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <UART_SetConfig+0x118>)
 8007356:	fba2 2303 	umull	r2, r3, r2, r3
 800735a:	095b      	lsrs	r3, r3, #5
 800735c:	0119      	lsls	r1, r3, #4
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009a      	lsls	r2, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	fbb2 f2f3 	udiv	r2, r2, r3
 8007374:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <UART_SetConfig+0x118>)
 8007376:	fba3 0302 	umull	r0, r3, r3, r2
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	2064      	movs	r0, #100	; 0x64
 800737e:	fb00 f303 	mul.w	r3, r0, r3
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	3332      	adds	r3, #50	; 0x32
 8007388:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <UART_SetConfig+0x118>)
 800738a:	fba2 2303 	umull	r2, r3, r2, r3
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007394:	4419      	add	r1, r3
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4613      	mov	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	009a      	lsls	r2, r3, #2
 80073a0:	441a      	add	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80073ac:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <UART_SetConfig+0x118>)
 80073ae:	fba3 0302 	umull	r0, r3, r3, r2
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	2064      	movs	r0, #100	; 0x64
 80073b6:	fb00 f303 	mul.w	r3, r0, r3
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	3332      	adds	r3, #50	; 0x32
 80073c0:	4a07      	ldr	r2, [pc, #28]	; (80073e0 <UART_SetConfig+0x118>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	f003 020f 	and.w	r2, r3, #15
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	440a      	add	r2, r1
 80073d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40013800 	.word	0x40013800
 80073e0:	51eb851f 	.word	0x51eb851f

080073e4 <atof>:
 80073e4:	2100      	movs	r1, #0
 80073e6:	f001 bb4f 	b.w	8008a88 <strtod>
	...

080073ec <__errno>:
 80073ec:	4b01      	ldr	r3, [pc, #4]	; (80073f4 <__errno+0x8>)
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	2000000c 	.word	0x2000000c

080073f8 <__libc_init_array>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	2600      	movs	r6, #0
 80073fc:	4d0c      	ldr	r5, [pc, #48]	; (8007430 <__libc_init_array+0x38>)
 80073fe:	4c0d      	ldr	r4, [pc, #52]	; (8007434 <__libc_init_array+0x3c>)
 8007400:	1b64      	subs	r4, r4, r5
 8007402:	10a4      	asrs	r4, r4, #2
 8007404:	42a6      	cmp	r6, r4
 8007406:	d109      	bne.n	800741c <__libc_init_array+0x24>
 8007408:	f004 f874 	bl	800b4f4 <_init>
 800740c:	2600      	movs	r6, #0
 800740e:	4d0a      	ldr	r5, [pc, #40]	; (8007438 <__libc_init_array+0x40>)
 8007410:	4c0a      	ldr	r4, [pc, #40]	; (800743c <__libc_init_array+0x44>)
 8007412:	1b64      	subs	r4, r4, r5
 8007414:	10a4      	asrs	r4, r4, #2
 8007416:	42a6      	cmp	r6, r4
 8007418:	d105      	bne.n	8007426 <__libc_init_array+0x2e>
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007420:	4798      	blx	r3
 8007422:	3601      	adds	r6, #1
 8007424:	e7ee      	b.n	8007404 <__libc_init_array+0xc>
 8007426:	f855 3b04 	ldr.w	r3, [r5], #4
 800742a:	4798      	blx	r3
 800742c:	3601      	adds	r6, #1
 800742e:	e7f2      	b.n	8007416 <__libc_init_array+0x1e>
 8007430:	0800bafc 	.word	0x0800bafc
 8007434:	0800bafc 	.word	0x0800bafc
 8007438:	0800bafc 	.word	0x0800bafc
 800743c:	0800bb00 	.word	0x0800bb00

08007440 <memset>:
 8007440:	4603      	mov	r3, r0
 8007442:	4402      	add	r2, r0
 8007444:	4293      	cmp	r3, r2
 8007446:	d100      	bne.n	800744a <memset+0xa>
 8007448:	4770      	bx	lr
 800744a:	f803 1b01 	strb.w	r1, [r3], #1
 800744e:	e7f9      	b.n	8007444 <memset+0x4>

08007450 <__cvt>:
 8007450:	2b00      	cmp	r3, #0
 8007452:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007456:	461f      	mov	r7, r3
 8007458:	bfbb      	ittet	lt
 800745a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800745e:	461f      	movlt	r7, r3
 8007460:	2300      	movge	r3, #0
 8007462:	232d      	movlt	r3, #45	; 0x2d
 8007464:	b088      	sub	sp, #32
 8007466:	4614      	mov	r4, r2
 8007468:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800746a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800746c:	7013      	strb	r3, [r2, #0]
 800746e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007470:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007474:	f023 0820 	bic.w	r8, r3, #32
 8007478:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800747c:	d005      	beq.n	800748a <__cvt+0x3a>
 800747e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007482:	d100      	bne.n	8007486 <__cvt+0x36>
 8007484:	3501      	adds	r5, #1
 8007486:	2302      	movs	r3, #2
 8007488:	e000      	b.n	800748c <__cvt+0x3c>
 800748a:	2303      	movs	r3, #3
 800748c:	aa07      	add	r2, sp, #28
 800748e:	9204      	str	r2, [sp, #16]
 8007490:	aa06      	add	r2, sp, #24
 8007492:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007496:	e9cd 3500 	strd	r3, r5, [sp]
 800749a:	4622      	mov	r2, r4
 800749c:	463b      	mov	r3, r7
 800749e:	f001 fc4f 	bl	8008d40 <_dtoa_r>
 80074a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074a6:	4606      	mov	r6, r0
 80074a8:	d102      	bne.n	80074b0 <__cvt+0x60>
 80074aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074ac:	07db      	lsls	r3, r3, #31
 80074ae:	d522      	bpl.n	80074f6 <__cvt+0xa6>
 80074b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074b4:	eb06 0905 	add.w	r9, r6, r5
 80074b8:	d110      	bne.n	80074dc <__cvt+0x8c>
 80074ba:	7833      	ldrb	r3, [r6, #0]
 80074bc:	2b30      	cmp	r3, #48	; 0x30
 80074be:	d10a      	bne.n	80074d6 <__cvt+0x86>
 80074c0:	2200      	movs	r2, #0
 80074c2:	2300      	movs	r3, #0
 80074c4:	4620      	mov	r0, r4
 80074c6:	4639      	mov	r1, r7
 80074c8:	f7f9 fa6e 	bl	80009a8 <__aeabi_dcmpeq>
 80074cc:	b918      	cbnz	r0, 80074d6 <__cvt+0x86>
 80074ce:	f1c5 0501 	rsb	r5, r5, #1
 80074d2:	f8ca 5000 	str.w	r5, [sl]
 80074d6:	f8da 3000 	ldr.w	r3, [sl]
 80074da:	4499      	add	r9, r3
 80074dc:	2200      	movs	r2, #0
 80074de:	2300      	movs	r3, #0
 80074e0:	4620      	mov	r0, r4
 80074e2:	4639      	mov	r1, r7
 80074e4:	f7f9 fa60 	bl	80009a8 <__aeabi_dcmpeq>
 80074e8:	b108      	cbz	r0, 80074ee <__cvt+0x9e>
 80074ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80074ee:	2230      	movs	r2, #48	; 0x30
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	454b      	cmp	r3, r9
 80074f4:	d307      	bcc.n	8007506 <__cvt+0xb6>
 80074f6:	4630      	mov	r0, r6
 80074f8:	9b07      	ldr	r3, [sp, #28]
 80074fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074fc:	1b9b      	subs	r3, r3, r6
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	b008      	add	sp, #32
 8007502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007506:	1c59      	adds	r1, r3, #1
 8007508:	9107      	str	r1, [sp, #28]
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	e7f0      	b.n	80074f0 <__cvt+0xa0>

0800750e <__exponent>:
 800750e:	4603      	mov	r3, r0
 8007510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007512:	2900      	cmp	r1, #0
 8007514:	f803 2b02 	strb.w	r2, [r3], #2
 8007518:	bfb6      	itet	lt
 800751a:	222d      	movlt	r2, #45	; 0x2d
 800751c:	222b      	movge	r2, #43	; 0x2b
 800751e:	4249      	neglt	r1, r1
 8007520:	2909      	cmp	r1, #9
 8007522:	7042      	strb	r2, [r0, #1]
 8007524:	dd2b      	ble.n	800757e <__exponent+0x70>
 8007526:	f10d 0407 	add.w	r4, sp, #7
 800752a:	46a4      	mov	ip, r4
 800752c:	270a      	movs	r7, #10
 800752e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007532:	460a      	mov	r2, r1
 8007534:	46a6      	mov	lr, r4
 8007536:	fb07 1516 	mls	r5, r7, r6, r1
 800753a:	2a63      	cmp	r2, #99	; 0x63
 800753c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007540:	4631      	mov	r1, r6
 8007542:	f104 34ff 	add.w	r4, r4, #4294967295
 8007546:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800754a:	dcf0      	bgt.n	800752e <__exponent+0x20>
 800754c:	3130      	adds	r1, #48	; 0x30
 800754e:	f1ae 0502 	sub.w	r5, lr, #2
 8007552:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007556:	4629      	mov	r1, r5
 8007558:	1c44      	adds	r4, r0, #1
 800755a:	4561      	cmp	r1, ip
 800755c:	d30a      	bcc.n	8007574 <__exponent+0x66>
 800755e:	f10d 0209 	add.w	r2, sp, #9
 8007562:	eba2 020e 	sub.w	r2, r2, lr
 8007566:	4565      	cmp	r5, ip
 8007568:	bf88      	it	hi
 800756a:	2200      	movhi	r2, #0
 800756c:	4413      	add	r3, r2
 800756e:	1a18      	subs	r0, r3, r0
 8007570:	b003      	add	sp, #12
 8007572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007574:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007578:	f804 2f01 	strb.w	r2, [r4, #1]!
 800757c:	e7ed      	b.n	800755a <__exponent+0x4c>
 800757e:	2330      	movs	r3, #48	; 0x30
 8007580:	3130      	adds	r1, #48	; 0x30
 8007582:	7083      	strb	r3, [r0, #2]
 8007584:	70c1      	strb	r1, [r0, #3]
 8007586:	1d03      	adds	r3, r0, #4
 8007588:	e7f1      	b.n	800756e <__exponent+0x60>
	...

0800758c <_printf_float>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	b091      	sub	sp, #68	; 0x44
 8007592:	460c      	mov	r4, r1
 8007594:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007598:	4616      	mov	r6, r2
 800759a:	461f      	mov	r7, r3
 800759c:	4605      	mov	r5, r0
 800759e:	f002 fedb 	bl	800a358 <_localeconv_r>
 80075a2:	6803      	ldr	r3, [r0, #0]
 80075a4:	4618      	mov	r0, r3
 80075a6:	9309      	str	r3, [sp, #36]	; 0x24
 80075a8:	f7f8 fdd2 	bl	8000150 <strlen>
 80075ac:	2300      	movs	r3, #0
 80075ae:	930e      	str	r3, [sp, #56]	; 0x38
 80075b0:	f8d8 3000 	ldr.w	r3, [r8]
 80075b4:	900a      	str	r0, [sp, #40]	; 0x28
 80075b6:	3307      	adds	r3, #7
 80075b8:	f023 0307 	bic.w	r3, r3, #7
 80075bc:	f103 0208 	add.w	r2, r3, #8
 80075c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80075c4:	f8d4 b000 	ldr.w	fp, [r4]
 80075c8:	f8c8 2000 	str.w	r2, [r8]
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075d4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80075d8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80075dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80075de:	f04f 32ff 	mov.w	r2, #4294967295
 80075e2:	4640      	mov	r0, r8
 80075e4:	4b9c      	ldr	r3, [pc, #624]	; (8007858 <_printf_float+0x2cc>)
 80075e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075e8:	f7f9 fa10 	bl	8000a0c <__aeabi_dcmpun>
 80075ec:	bb70      	cbnz	r0, 800764c <_printf_float+0xc0>
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295
 80075f2:	4640      	mov	r0, r8
 80075f4:	4b98      	ldr	r3, [pc, #608]	; (8007858 <_printf_float+0x2cc>)
 80075f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075f8:	f7f9 f9ea 	bl	80009d0 <__aeabi_dcmple>
 80075fc:	bb30      	cbnz	r0, 800764c <_printf_float+0xc0>
 80075fe:	2200      	movs	r2, #0
 8007600:	2300      	movs	r3, #0
 8007602:	4640      	mov	r0, r8
 8007604:	4651      	mov	r1, sl
 8007606:	f7f9 f9d9 	bl	80009bc <__aeabi_dcmplt>
 800760a:	b110      	cbz	r0, 8007612 <_printf_float+0x86>
 800760c:	232d      	movs	r3, #45	; 0x2d
 800760e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007612:	4b92      	ldr	r3, [pc, #584]	; (800785c <_printf_float+0x2d0>)
 8007614:	4892      	ldr	r0, [pc, #584]	; (8007860 <_printf_float+0x2d4>)
 8007616:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800761a:	bf94      	ite	ls
 800761c:	4698      	movls	r8, r3
 800761e:	4680      	movhi	r8, r0
 8007620:	2303      	movs	r3, #3
 8007622:	f04f 0a00 	mov.w	sl, #0
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	f02b 0304 	bic.w	r3, fp, #4
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	4633      	mov	r3, r6
 8007630:	4621      	mov	r1, r4
 8007632:	4628      	mov	r0, r5
 8007634:	9700      	str	r7, [sp, #0]
 8007636:	aa0f      	add	r2, sp, #60	; 0x3c
 8007638:	f000 f9d4 	bl	80079e4 <_printf_common>
 800763c:	3001      	adds	r0, #1
 800763e:	f040 8090 	bne.w	8007762 <_printf_float+0x1d6>
 8007642:	f04f 30ff 	mov.w	r0, #4294967295
 8007646:	b011      	add	sp, #68	; 0x44
 8007648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764c:	4642      	mov	r2, r8
 800764e:	4653      	mov	r3, sl
 8007650:	4640      	mov	r0, r8
 8007652:	4651      	mov	r1, sl
 8007654:	f7f9 f9da 	bl	8000a0c <__aeabi_dcmpun>
 8007658:	b148      	cbz	r0, 800766e <_printf_float+0xe2>
 800765a:	f1ba 0f00 	cmp.w	sl, #0
 800765e:	bfb8      	it	lt
 8007660:	232d      	movlt	r3, #45	; 0x2d
 8007662:	4880      	ldr	r0, [pc, #512]	; (8007864 <_printf_float+0x2d8>)
 8007664:	bfb8      	it	lt
 8007666:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800766a:	4b7f      	ldr	r3, [pc, #508]	; (8007868 <_printf_float+0x2dc>)
 800766c:	e7d3      	b.n	8007616 <_printf_float+0x8a>
 800766e:	6863      	ldr	r3, [r4, #4]
 8007670:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	d142      	bne.n	80076fe <_printf_float+0x172>
 8007678:	2306      	movs	r3, #6
 800767a:	6063      	str	r3, [r4, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	9206      	str	r2, [sp, #24]
 8007680:	aa0e      	add	r2, sp, #56	; 0x38
 8007682:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007686:	aa0d      	add	r2, sp, #52	; 0x34
 8007688:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800768c:	9203      	str	r2, [sp, #12]
 800768e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007692:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	4642      	mov	r2, r8
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4628      	mov	r0, r5
 80076a0:	4653      	mov	r3, sl
 80076a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80076a4:	f7ff fed4 	bl	8007450 <__cvt>
 80076a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076aa:	4680      	mov	r8, r0
 80076ac:	2947      	cmp	r1, #71	; 0x47
 80076ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076b0:	d108      	bne.n	80076c4 <_printf_float+0x138>
 80076b2:	1cc8      	adds	r0, r1, #3
 80076b4:	db02      	blt.n	80076bc <_printf_float+0x130>
 80076b6:	6863      	ldr	r3, [r4, #4]
 80076b8:	4299      	cmp	r1, r3
 80076ba:	dd40      	ble.n	800773e <_printf_float+0x1b2>
 80076bc:	f1a9 0902 	sub.w	r9, r9, #2
 80076c0:	fa5f f989 	uxtb.w	r9, r9
 80076c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80076c8:	d81f      	bhi.n	800770a <_printf_float+0x17e>
 80076ca:	464a      	mov	r2, r9
 80076cc:	3901      	subs	r1, #1
 80076ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076d2:	910d      	str	r1, [sp, #52]	; 0x34
 80076d4:	f7ff ff1b 	bl	800750e <__exponent>
 80076d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076da:	4682      	mov	sl, r0
 80076dc:	1813      	adds	r3, r2, r0
 80076de:	2a01      	cmp	r2, #1
 80076e0:	6123      	str	r3, [r4, #16]
 80076e2:	dc02      	bgt.n	80076ea <_printf_float+0x15e>
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	07d2      	lsls	r2, r2, #31
 80076e8:	d501      	bpl.n	80076ee <_printf_float+0x162>
 80076ea:	3301      	adds	r3, #1
 80076ec:	6123      	str	r3, [r4, #16]
 80076ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d09b      	beq.n	800762e <_printf_float+0xa2>
 80076f6:	232d      	movs	r3, #45	; 0x2d
 80076f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076fc:	e797      	b.n	800762e <_printf_float+0xa2>
 80076fe:	2947      	cmp	r1, #71	; 0x47
 8007700:	d1bc      	bne.n	800767c <_printf_float+0xf0>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1ba      	bne.n	800767c <_printf_float+0xf0>
 8007706:	2301      	movs	r3, #1
 8007708:	e7b7      	b.n	800767a <_printf_float+0xee>
 800770a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800770e:	d118      	bne.n	8007742 <_printf_float+0x1b6>
 8007710:	2900      	cmp	r1, #0
 8007712:	6863      	ldr	r3, [r4, #4]
 8007714:	dd0b      	ble.n	800772e <_printf_float+0x1a2>
 8007716:	6121      	str	r1, [r4, #16]
 8007718:	b913      	cbnz	r3, 8007720 <_printf_float+0x194>
 800771a:	6822      	ldr	r2, [r4, #0]
 800771c:	07d0      	lsls	r0, r2, #31
 800771e:	d502      	bpl.n	8007726 <_printf_float+0x19a>
 8007720:	3301      	adds	r3, #1
 8007722:	440b      	add	r3, r1
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	f04f 0a00 	mov.w	sl, #0
 800772a:	65a1      	str	r1, [r4, #88]	; 0x58
 800772c:	e7df      	b.n	80076ee <_printf_float+0x162>
 800772e:	b913      	cbnz	r3, 8007736 <_printf_float+0x1aa>
 8007730:	6822      	ldr	r2, [r4, #0]
 8007732:	07d2      	lsls	r2, r2, #31
 8007734:	d501      	bpl.n	800773a <_printf_float+0x1ae>
 8007736:	3302      	adds	r3, #2
 8007738:	e7f4      	b.n	8007724 <_printf_float+0x198>
 800773a:	2301      	movs	r3, #1
 800773c:	e7f2      	b.n	8007724 <_printf_float+0x198>
 800773e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007744:	4299      	cmp	r1, r3
 8007746:	db05      	blt.n	8007754 <_printf_float+0x1c8>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	6121      	str	r1, [r4, #16]
 800774c:	07d8      	lsls	r0, r3, #31
 800774e:	d5ea      	bpl.n	8007726 <_printf_float+0x19a>
 8007750:	1c4b      	adds	r3, r1, #1
 8007752:	e7e7      	b.n	8007724 <_printf_float+0x198>
 8007754:	2900      	cmp	r1, #0
 8007756:	bfcc      	ite	gt
 8007758:	2201      	movgt	r2, #1
 800775a:	f1c1 0202 	rsble	r2, r1, #2
 800775e:	4413      	add	r3, r2
 8007760:	e7e0      	b.n	8007724 <_printf_float+0x198>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	055a      	lsls	r2, r3, #21
 8007766:	d407      	bmi.n	8007778 <_printf_float+0x1ec>
 8007768:	6923      	ldr	r3, [r4, #16]
 800776a:	4642      	mov	r2, r8
 800776c:	4631      	mov	r1, r6
 800776e:	4628      	mov	r0, r5
 8007770:	47b8      	blx	r7
 8007772:	3001      	adds	r0, #1
 8007774:	d12b      	bne.n	80077ce <_printf_float+0x242>
 8007776:	e764      	b.n	8007642 <_printf_float+0xb6>
 8007778:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800777c:	f240 80dd 	bls.w	800793a <_printf_float+0x3ae>
 8007780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007784:	2200      	movs	r2, #0
 8007786:	2300      	movs	r3, #0
 8007788:	f7f9 f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800778c:	2800      	cmp	r0, #0
 800778e:	d033      	beq.n	80077f8 <_printf_float+0x26c>
 8007790:	2301      	movs	r3, #1
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	4a35      	ldr	r2, [pc, #212]	; (800786c <_printf_float+0x2e0>)
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f af51 	beq.w	8007642 <_printf_float+0xb6>
 80077a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077a4:	429a      	cmp	r2, r3
 80077a6:	db02      	blt.n	80077ae <_printf_float+0x222>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	07d8      	lsls	r0, r3, #31
 80077ac:	d50f      	bpl.n	80077ce <_printf_float+0x242>
 80077ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	f43f af42 	beq.w	8007642 <_printf_float+0xb6>
 80077be:	f04f 0800 	mov.w	r8, #0
 80077c2:	f104 091a 	add.w	r9, r4, #26
 80077c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c8:	3b01      	subs	r3, #1
 80077ca:	4543      	cmp	r3, r8
 80077cc:	dc09      	bgt.n	80077e2 <_printf_float+0x256>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	079b      	lsls	r3, r3, #30
 80077d2:	f100 8102 	bmi.w	80079da <_printf_float+0x44e>
 80077d6:	68e0      	ldr	r0, [r4, #12]
 80077d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077da:	4298      	cmp	r0, r3
 80077dc:	bfb8      	it	lt
 80077de:	4618      	movlt	r0, r3
 80077e0:	e731      	b.n	8007646 <_printf_float+0xba>
 80077e2:	2301      	movs	r3, #1
 80077e4:	464a      	mov	r2, r9
 80077e6:	4631      	mov	r1, r6
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b8      	blx	r7
 80077ec:	3001      	adds	r0, #1
 80077ee:	f43f af28 	beq.w	8007642 <_printf_float+0xb6>
 80077f2:	f108 0801 	add.w	r8, r8, #1
 80077f6:	e7e6      	b.n	80077c6 <_printf_float+0x23a>
 80077f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	dc38      	bgt.n	8007870 <_printf_float+0x2e4>
 80077fe:	2301      	movs	r3, #1
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	4a19      	ldr	r2, [pc, #100]	; (800786c <_printf_float+0x2e0>)
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	f43f af1a 	beq.w	8007642 <_printf_float+0xb6>
 800780e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007812:	4313      	orrs	r3, r2
 8007814:	d102      	bne.n	800781c <_printf_float+0x290>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	07d9      	lsls	r1, r3, #31
 800781a:	d5d8      	bpl.n	80077ce <_printf_float+0x242>
 800781c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007820:	4631      	mov	r1, r6
 8007822:	4628      	mov	r0, r5
 8007824:	47b8      	blx	r7
 8007826:	3001      	adds	r0, #1
 8007828:	f43f af0b 	beq.w	8007642 <_printf_float+0xb6>
 800782c:	f04f 0900 	mov.w	r9, #0
 8007830:	f104 0a1a 	add.w	sl, r4, #26
 8007834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007836:	425b      	negs	r3, r3
 8007838:	454b      	cmp	r3, r9
 800783a:	dc01      	bgt.n	8007840 <_printf_float+0x2b4>
 800783c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800783e:	e794      	b.n	800776a <_printf_float+0x1de>
 8007840:	2301      	movs	r3, #1
 8007842:	4652      	mov	r2, sl
 8007844:	4631      	mov	r1, r6
 8007846:	4628      	mov	r0, r5
 8007848:	47b8      	blx	r7
 800784a:	3001      	adds	r0, #1
 800784c:	f43f aef9 	beq.w	8007642 <_printf_float+0xb6>
 8007850:	f109 0901 	add.w	r9, r9, #1
 8007854:	e7ee      	b.n	8007834 <_printf_float+0x2a8>
 8007856:	bf00      	nop
 8007858:	7fefffff 	.word	0x7fefffff
 800785c:	0800b650 	.word	0x0800b650
 8007860:	0800b654 	.word	0x0800b654
 8007864:	0800b65c 	.word	0x0800b65c
 8007868:	0800b658 	.word	0x0800b658
 800786c:	0800b660 	.word	0x0800b660
 8007870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007872:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007874:	429a      	cmp	r2, r3
 8007876:	bfa8      	it	ge
 8007878:	461a      	movge	r2, r3
 800787a:	2a00      	cmp	r2, #0
 800787c:	4691      	mov	r9, r2
 800787e:	dc37      	bgt.n	80078f0 <_printf_float+0x364>
 8007880:	f04f 0b00 	mov.w	fp, #0
 8007884:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007888:	f104 021a 	add.w	r2, r4, #26
 800788c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007890:	ebaa 0309 	sub.w	r3, sl, r9
 8007894:	455b      	cmp	r3, fp
 8007896:	dc33      	bgt.n	8007900 <_printf_float+0x374>
 8007898:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800789c:	429a      	cmp	r2, r3
 800789e:	db3b      	blt.n	8007918 <_printf_float+0x38c>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	07da      	lsls	r2, r3, #31
 80078a4:	d438      	bmi.n	8007918 <_printf_float+0x38c>
 80078a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80078aa:	eba2 030a 	sub.w	r3, r2, sl
 80078ae:	eba2 0901 	sub.w	r9, r2, r1
 80078b2:	4599      	cmp	r9, r3
 80078b4:	bfa8      	it	ge
 80078b6:	4699      	movge	r9, r3
 80078b8:	f1b9 0f00 	cmp.w	r9, #0
 80078bc:	dc34      	bgt.n	8007928 <_printf_float+0x39c>
 80078be:	f04f 0800 	mov.w	r8, #0
 80078c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078c6:	f104 0a1a 	add.w	sl, r4, #26
 80078ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80078ce:	1a9b      	subs	r3, r3, r2
 80078d0:	eba3 0309 	sub.w	r3, r3, r9
 80078d4:	4543      	cmp	r3, r8
 80078d6:	f77f af7a 	ble.w	80077ce <_printf_float+0x242>
 80078da:	2301      	movs	r3, #1
 80078dc:	4652      	mov	r2, sl
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b8      	blx	r7
 80078e4:	3001      	adds	r0, #1
 80078e6:	f43f aeac 	beq.w	8007642 <_printf_float+0xb6>
 80078ea:	f108 0801 	add.w	r8, r8, #1
 80078ee:	e7ec      	b.n	80078ca <_printf_float+0x33e>
 80078f0:	4613      	mov	r3, r2
 80078f2:	4631      	mov	r1, r6
 80078f4:	4642      	mov	r2, r8
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	d1c0      	bne.n	8007880 <_printf_float+0x2f4>
 80078fe:	e6a0      	b.n	8007642 <_printf_float+0xb6>
 8007900:	2301      	movs	r3, #1
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	920b      	str	r2, [sp, #44]	; 0x2c
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	f43f ae99 	beq.w	8007642 <_printf_float+0xb6>
 8007910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007912:	f10b 0b01 	add.w	fp, fp, #1
 8007916:	e7b9      	b.n	800788c <_printf_float+0x300>
 8007918:	4631      	mov	r1, r6
 800791a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	d1bf      	bne.n	80078a6 <_printf_float+0x31a>
 8007926:	e68c      	b.n	8007642 <_printf_float+0xb6>
 8007928:	464b      	mov	r3, r9
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	eb08 020a 	add.w	r2, r8, sl
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	d1c2      	bne.n	80078be <_printf_float+0x332>
 8007938:	e683      	b.n	8007642 <_printf_float+0xb6>
 800793a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800793c:	2a01      	cmp	r2, #1
 800793e:	dc01      	bgt.n	8007944 <_printf_float+0x3b8>
 8007940:	07db      	lsls	r3, r3, #31
 8007942:	d537      	bpl.n	80079b4 <_printf_float+0x428>
 8007944:	2301      	movs	r3, #1
 8007946:	4642      	mov	r2, r8
 8007948:	4631      	mov	r1, r6
 800794a:	4628      	mov	r0, r5
 800794c:	47b8      	blx	r7
 800794e:	3001      	adds	r0, #1
 8007950:	f43f ae77 	beq.w	8007642 <_printf_float+0xb6>
 8007954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007958:	4631      	mov	r1, r6
 800795a:	4628      	mov	r0, r5
 800795c:	47b8      	blx	r7
 800795e:	3001      	adds	r0, #1
 8007960:	f43f ae6f 	beq.w	8007642 <_printf_float+0xb6>
 8007964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007968:	2200      	movs	r2, #0
 800796a:	2300      	movs	r3, #0
 800796c:	f7f9 f81c 	bl	80009a8 <__aeabi_dcmpeq>
 8007970:	b9d8      	cbnz	r0, 80079aa <_printf_float+0x41e>
 8007972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007974:	f108 0201 	add.w	r2, r8, #1
 8007978:	3b01      	subs	r3, #1
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	d10e      	bne.n	80079a2 <_printf_float+0x416>
 8007984:	e65d      	b.n	8007642 <_printf_float+0xb6>
 8007986:	2301      	movs	r3, #1
 8007988:	464a      	mov	r2, r9
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f ae56 	beq.w	8007642 <_printf_float+0xb6>
 8007996:	f108 0801 	add.w	r8, r8, #1
 800799a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800799c:	3b01      	subs	r3, #1
 800799e:	4543      	cmp	r3, r8
 80079a0:	dcf1      	bgt.n	8007986 <_printf_float+0x3fa>
 80079a2:	4653      	mov	r3, sl
 80079a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079a8:	e6e0      	b.n	800776c <_printf_float+0x1e0>
 80079aa:	f04f 0800 	mov.w	r8, #0
 80079ae:	f104 091a 	add.w	r9, r4, #26
 80079b2:	e7f2      	b.n	800799a <_printf_float+0x40e>
 80079b4:	2301      	movs	r3, #1
 80079b6:	4642      	mov	r2, r8
 80079b8:	e7df      	b.n	800797a <_printf_float+0x3ee>
 80079ba:	2301      	movs	r3, #1
 80079bc:	464a      	mov	r2, r9
 80079be:	4631      	mov	r1, r6
 80079c0:	4628      	mov	r0, r5
 80079c2:	47b8      	blx	r7
 80079c4:	3001      	adds	r0, #1
 80079c6:	f43f ae3c 	beq.w	8007642 <_printf_float+0xb6>
 80079ca:	f108 0801 	add.w	r8, r8, #1
 80079ce:	68e3      	ldr	r3, [r4, #12]
 80079d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079d2:	1a5b      	subs	r3, r3, r1
 80079d4:	4543      	cmp	r3, r8
 80079d6:	dcf0      	bgt.n	80079ba <_printf_float+0x42e>
 80079d8:	e6fd      	b.n	80077d6 <_printf_float+0x24a>
 80079da:	f04f 0800 	mov.w	r8, #0
 80079de:	f104 0919 	add.w	r9, r4, #25
 80079e2:	e7f4      	b.n	80079ce <_printf_float+0x442>

080079e4 <_printf_common>:
 80079e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e8:	4616      	mov	r6, r2
 80079ea:	4699      	mov	r9, r3
 80079ec:	688a      	ldr	r2, [r1, #8]
 80079ee:	690b      	ldr	r3, [r1, #16]
 80079f0:	4607      	mov	r7, r0
 80079f2:	4293      	cmp	r3, r2
 80079f4:	bfb8      	it	lt
 80079f6:	4613      	movlt	r3, r2
 80079f8:	6033      	str	r3, [r6, #0]
 80079fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079fe:	460c      	mov	r4, r1
 8007a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a04:	b10a      	cbz	r2, 8007a0a <_printf_common+0x26>
 8007a06:	3301      	adds	r3, #1
 8007a08:	6033      	str	r3, [r6, #0]
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	0699      	lsls	r1, r3, #26
 8007a0e:	bf42      	ittt	mi
 8007a10:	6833      	ldrmi	r3, [r6, #0]
 8007a12:	3302      	addmi	r3, #2
 8007a14:	6033      	strmi	r3, [r6, #0]
 8007a16:	6825      	ldr	r5, [r4, #0]
 8007a18:	f015 0506 	ands.w	r5, r5, #6
 8007a1c:	d106      	bne.n	8007a2c <_printf_common+0x48>
 8007a1e:	f104 0a19 	add.w	sl, r4, #25
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	6832      	ldr	r2, [r6, #0]
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	dc28      	bgt.n	8007a7e <_printf_common+0x9a>
 8007a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a30:	1e13      	subs	r3, r2, #0
 8007a32:	6822      	ldr	r2, [r4, #0]
 8007a34:	bf18      	it	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	0692      	lsls	r2, r2, #26
 8007a3a:	d42d      	bmi.n	8007a98 <_printf_common+0xb4>
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a44:	47c0      	blx	r8
 8007a46:	3001      	adds	r0, #1
 8007a48:	d020      	beq.n	8007a8c <_printf_common+0xa8>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	68e5      	ldr	r5, [r4, #12]
 8007a4e:	f003 0306 	and.w	r3, r3, #6
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	bf18      	it	ne
 8007a56:	2500      	movne	r5, #0
 8007a58:	6832      	ldr	r2, [r6, #0]
 8007a5a:	f04f 0600 	mov.w	r6, #0
 8007a5e:	68a3      	ldr	r3, [r4, #8]
 8007a60:	bf08      	it	eq
 8007a62:	1aad      	subeq	r5, r5, r2
 8007a64:	6922      	ldr	r2, [r4, #16]
 8007a66:	bf08      	it	eq
 8007a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	bfc4      	itt	gt
 8007a70:	1a9b      	subgt	r3, r3, r2
 8007a72:	18ed      	addgt	r5, r5, r3
 8007a74:	341a      	adds	r4, #26
 8007a76:	42b5      	cmp	r5, r6
 8007a78:	d11a      	bne.n	8007ab0 <_printf_common+0xcc>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	e008      	b.n	8007a90 <_printf_common+0xac>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4652      	mov	r2, sl
 8007a82:	4649      	mov	r1, r9
 8007a84:	4638      	mov	r0, r7
 8007a86:	47c0      	blx	r8
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d103      	bne.n	8007a94 <_printf_common+0xb0>
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a94:	3501      	adds	r5, #1
 8007a96:	e7c4      	b.n	8007a22 <_printf_common+0x3e>
 8007a98:	2030      	movs	r0, #48	; 0x30
 8007a9a:	18e1      	adds	r1, r4, r3
 8007a9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007aa6:	4422      	add	r2, r4
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007aae:	e7c5      	b.n	8007a3c <_printf_common+0x58>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	47c0      	blx	r8
 8007aba:	3001      	adds	r0, #1
 8007abc:	d0e6      	beq.n	8007a8c <_printf_common+0xa8>
 8007abe:	3601      	adds	r6, #1
 8007ac0:	e7d9      	b.n	8007a76 <_printf_common+0x92>
	...

08007ac4 <_printf_i>:
 8007ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac8:	460c      	mov	r4, r1
 8007aca:	7e27      	ldrb	r7, [r4, #24]
 8007acc:	4691      	mov	r9, r2
 8007ace:	2f78      	cmp	r7, #120	; 0x78
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	469a      	mov	sl, r3
 8007ad4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ada:	d807      	bhi.n	8007aec <_printf_i+0x28>
 8007adc:	2f62      	cmp	r7, #98	; 0x62
 8007ade:	d80a      	bhi.n	8007af6 <_printf_i+0x32>
 8007ae0:	2f00      	cmp	r7, #0
 8007ae2:	f000 80d9 	beq.w	8007c98 <_printf_i+0x1d4>
 8007ae6:	2f58      	cmp	r7, #88	; 0x58
 8007ae8:	f000 80a4 	beq.w	8007c34 <_printf_i+0x170>
 8007aec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007af4:	e03a      	b.n	8007b6c <_printf_i+0xa8>
 8007af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007afa:	2b15      	cmp	r3, #21
 8007afc:	d8f6      	bhi.n	8007aec <_printf_i+0x28>
 8007afe:	a001      	add	r0, pc, #4	; (adr r0, 8007b04 <_printf_i+0x40>)
 8007b00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b04:	08007b5d 	.word	0x08007b5d
 8007b08:	08007b71 	.word	0x08007b71
 8007b0c:	08007aed 	.word	0x08007aed
 8007b10:	08007aed 	.word	0x08007aed
 8007b14:	08007aed 	.word	0x08007aed
 8007b18:	08007aed 	.word	0x08007aed
 8007b1c:	08007b71 	.word	0x08007b71
 8007b20:	08007aed 	.word	0x08007aed
 8007b24:	08007aed 	.word	0x08007aed
 8007b28:	08007aed 	.word	0x08007aed
 8007b2c:	08007aed 	.word	0x08007aed
 8007b30:	08007c7f 	.word	0x08007c7f
 8007b34:	08007ba1 	.word	0x08007ba1
 8007b38:	08007c61 	.word	0x08007c61
 8007b3c:	08007aed 	.word	0x08007aed
 8007b40:	08007aed 	.word	0x08007aed
 8007b44:	08007ca1 	.word	0x08007ca1
 8007b48:	08007aed 	.word	0x08007aed
 8007b4c:	08007ba1 	.word	0x08007ba1
 8007b50:	08007aed 	.word	0x08007aed
 8007b54:	08007aed 	.word	0x08007aed
 8007b58:	08007c69 	.word	0x08007c69
 8007b5c:	680b      	ldr	r3, [r1, #0]
 8007b5e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b62:	1d1a      	adds	r2, r3, #4
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	600a      	str	r2, [r1, #0]
 8007b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e0a4      	b.n	8007cba <_printf_i+0x1f6>
 8007b70:	6825      	ldr	r5, [r4, #0]
 8007b72:	6808      	ldr	r0, [r1, #0]
 8007b74:	062e      	lsls	r6, r5, #24
 8007b76:	f100 0304 	add.w	r3, r0, #4
 8007b7a:	d50a      	bpl.n	8007b92 <_printf_i+0xce>
 8007b7c:	6805      	ldr	r5, [r0, #0]
 8007b7e:	600b      	str	r3, [r1, #0]
 8007b80:	2d00      	cmp	r5, #0
 8007b82:	da03      	bge.n	8007b8c <_printf_i+0xc8>
 8007b84:	232d      	movs	r3, #45	; 0x2d
 8007b86:	426d      	negs	r5, r5
 8007b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b8c:	230a      	movs	r3, #10
 8007b8e:	485e      	ldr	r0, [pc, #376]	; (8007d08 <_printf_i+0x244>)
 8007b90:	e019      	b.n	8007bc6 <_printf_i+0x102>
 8007b92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b96:	6805      	ldr	r5, [r0, #0]
 8007b98:	600b      	str	r3, [r1, #0]
 8007b9a:	bf18      	it	ne
 8007b9c:	b22d      	sxthne	r5, r5
 8007b9e:	e7ef      	b.n	8007b80 <_printf_i+0xbc>
 8007ba0:	680b      	ldr	r3, [r1, #0]
 8007ba2:	6825      	ldr	r5, [r4, #0]
 8007ba4:	1d18      	adds	r0, r3, #4
 8007ba6:	6008      	str	r0, [r1, #0]
 8007ba8:	0628      	lsls	r0, r5, #24
 8007baa:	d501      	bpl.n	8007bb0 <_printf_i+0xec>
 8007bac:	681d      	ldr	r5, [r3, #0]
 8007bae:	e002      	b.n	8007bb6 <_printf_i+0xf2>
 8007bb0:	0669      	lsls	r1, r5, #25
 8007bb2:	d5fb      	bpl.n	8007bac <_printf_i+0xe8>
 8007bb4:	881d      	ldrh	r5, [r3, #0]
 8007bb6:	2f6f      	cmp	r7, #111	; 0x6f
 8007bb8:	bf0c      	ite	eq
 8007bba:	2308      	moveq	r3, #8
 8007bbc:	230a      	movne	r3, #10
 8007bbe:	4852      	ldr	r0, [pc, #328]	; (8007d08 <_printf_i+0x244>)
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bc6:	6866      	ldr	r6, [r4, #4]
 8007bc8:	2e00      	cmp	r6, #0
 8007bca:	bfa8      	it	ge
 8007bcc:	6821      	ldrge	r1, [r4, #0]
 8007bce:	60a6      	str	r6, [r4, #8]
 8007bd0:	bfa4      	itt	ge
 8007bd2:	f021 0104 	bicge.w	r1, r1, #4
 8007bd6:	6021      	strge	r1, [r4, #0]
 8007bd8:	b90d      	cbnz	r5, 8007bde <_printf_i+0x11a>
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	d04d      	beq.n	8007c7a <_printf_i+0x1b6>
 8007bde:	4616      	mov	r6, r2
 8007be0:	fbb5 f1f3 	udiv	r1, r5, r3
 8007be4:	fb03 5711 	mls	r7, r3, r1, r5
 8007be8:	5dc7      	ldrb	r7, [r0, r7]
 8007bea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bee:	462f      	mov	r7, r5
 8007bf0:	42bb      	cmp	r3, r7
 8007bf2:	460d      	mov	r5, r1
 8007bf4:	d9f4      	bls.n	8007be0 <_printf_i+0x11c>
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d10b      	bne.n	8007c12 <_printf_i+0x14e>
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	07df      	lsls	r7, r3, #31
 8007bfe:	d508      	bpl.n	8007c12 <_printf_i+0x14e>
 8007c00:	6923      	ldr	r3, [r4, #16]
 8007c02:	6861      	ldr	r1, [r4, #4]
 8007c04:	4299      	cmp	r1, r3
 8007c06:	bfde      	ittt	le
 8007c08:	2330      	movle	r3, #48	; 0x30
 8007c0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c12:	1b92      	subs	r2, r2, r6
 8007c14:	6122      	str	r2, [r4, #16]
 8007c16:	464b      	mov	r3, r9
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	f8cd a000 	str.w	sl, [sp]
 8007c20:	aa03      	add	r2, sp, #12
 8007c22:	f7ff fedf 	bl	80079e4 <_printf_common>
 8007c26:	3001      	adds	r0, #1
 8007c28:	d14c      	bne.n	8007cc4 <_printf_i+0x200>
 8007c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2e:	b004      	add	sp, #16
 8007c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c34:	4834      	ldr	r0, [pc, #208]	; (8007d08 <_printf_i+0x244>)
 8007c36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c3a:	680e      	ldr	r6, [r1, #0]
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c42:	061f      	lsls	r7, r3, #24
 8007c44:	600e      	str	r6, [r1, #0]
 8007c46:	d514      	bpl.n	8007c72 <_printf_i+0x1ae>
 8007c48:	07d9      	lsls	r1, r3, #31
 8007c4a:	bf44      	itt	mi
 8007c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8007c50:	6023      	strmi	r3, [r4, #0]
 8007c52:	b91d      	cbnz	r5, 8007c5c <_printf_i+0x198>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	f023 0320 	bic.w	r3, r3, #32
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	e7af      	b.n	8007bc0 <_printf_i+0xfc>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	f043 0320 	orr.w	r3, r3, #32
 8007c66:	6023      	str	r3, [r4, #0]
 8007c68:	2378      	movs	r3, #120	; 0x78
 8007c6a:	4828      	ldr	r0, [pc, #160]	; (8007d0c <_printf_i+0x248>)
 8007c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c70:	e7e3      	b.n	8007c3a <_printf_i+0x176>
 8007c72:	065e      	lsls	r6, r3, #25
 8007c74:	bf48      	it	mi
 8007c76:	b2ad      	uxthmi	r5, r5
 8007c78:	e7e6      	b.n	8007c48 <_printf_i+0x184>
 8007c7a:	4616      	mov	r6, r2
 8007c7c:	e7bb      	b.n	8007bf6 <_printf_i+0x132>
 8007c7e:	680b      	ldr	r3, [r1, #0]
 8007c80:	6826      	ldr	r6, [r4, #0]
 8007c82:	1d1d      	adds	r5, r3, #4
 8007c84:	6960      	ldr	r0, [r4, #20]
 8007c86:	600d      	str	r5, [r1, #0]
 8007c88:	0635      	lsls	r5, r6, #24
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	d501      	bpl.n	8007c92 <_printf_i+0x1ce>
 8007c8e:	6018      	str	r0, [r3, #0]
 8007c90:	e002      	b.n	8007c98 <_printf_i+0x1d4>
 8007c92:	0671      	lsls	r1, r6, #25
 8007c94:	d5fb      	bpl.n	8007c8e <_printf_i+0x1ca>
 8007c96:	8018      	strh	r0, [r3, #0]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4616      	mov	r6, r2
 8007c9c:	6123      	str	r3, [r4, #16]
 8007c9e:	e7ba      	b.n	8007c16 <_printf_i+0x152>
 8007ca0:	680b      	ldr	r3, [r1, #0]
 8007ca2:	1d1a      	adds	r2, r3, #4
 8007ca4:	600a      	str	r2, [r1, #0]
 8007ca6:	681e      	ldr	r6, [r3, #0]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4630      	mov	r0, r6
 8007cac:	6862      	ldr	r2, [r4, #4]
 8007cae:	f002 fbd9 	bl	800a464 <memchr>
 8007cb2:	b108      	cbz	r0, 8007cb8 <_printf_i+0x1f4>
 8007cb4:	1b80      	subs	r0, r0, r6
 8007cb6:	6060      	str	r0, [r4, #4]
 8007cb8:	6863      	ldr	r3, [r4, #4]
 8007cba:	6123      	str	r3, [r4, #16]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cc2:	e7a8      	b.n	8007c16 <_printf_i+0x152>
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	4640      	mov	r0, r8
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	47d0      	blx	sl
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d0ab      	beq.n	8007c2a <_printf_i+0x166>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	079b      	lsls	r3, r3, #30
 8007cd6:	d413      	bmi.n	8007d00 <_printf_i+0x23c>
 8007cd8:	68e0      	ldr	r0, [r4, #12]
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	4298      	cmp	r0, r3
 8007cde:	bfb8      	it	lt
 8007ce0:	4618      	movlt	r0, r3
 8007ce2:	e7a4      	b.n	8007c2e <_printf_i+0x16a>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	4649      	mov	r1, r9
 8007cea:	4640      	mov	r0, r8
 8007cec:	47d0      	blx	sl
 8007cee:	3001      	adds	r0, #1
 8007cf0:	d09b      	beq.n	8007c2a <_printf_i+0x166>
 8007cf2:	3501      	adds	r5, #1
 8007cf4:	68e3      	ldr	r3, [r4, #12]
 8007cf6:	9903      	ldr	r1, [sp, #12]
 8007cf8:	1a5b      	subs	r3, r3, r1
 8007cfa:	42ab      	cmp	r3, r5
 8007cfc:	dcf2      	bgt.n	8007ce4 <_printf_i+0x220>
 8007cfe:	e7eb      	b.n	8007cd8 <_printf_i+0x214>
 8007d00:	2500      	movs	r5, #0
 8007d02:	f104 0619 	add.w	r6, r4, #25
 8007d06:	e7f5      	b.n	8007cf4 <_printf_i+0x230>
 8007d08:	0800b662 	.word	0x0800b662
 8007d0c:	0800b673 	.word	0x0800b673

08007d10 <iprintf>:
 8007d10:	b40f      	push	{r0, r1, r2, r3}
 8007d12:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <iprintf+0x2c>)
 8007d14:	b513      	push	{r0, r1, r4, lr}
 8007d16:	681c      	ldr	r4, [r3, #0]
 8007d18:	b124      	cbz	r4, 8007d24 <iprintf+0x14>
 8007d1a:	69a3      	ldr	r3, [r4, #24]
 8007d1c:	b913      	cbnz	r3, 8007d24 <iprintf+0x14>
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f001 ff16 	bl	8009b50 <__sinit>
 8007d24:	ab05      	add	r3, sp, #20
 8007d26:	4620      	mov	r0, r4
 8007d28:	9a04      	ldr	r2, [sp, #16]
 8007d2a:	68a1      	ldr	r1, [r4, #8]
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	f003 f949 	bl	800afc4 <_vfiprintf_r>
 8007d32:	b002      	add	sp, #8
 8007d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d38:	b004      	add	sp, #16
 8007d3a:	4770      	bx	lr
 8007d3c:	2000000c 	.word	0x2000000c

08007d40 <_puts_r>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	460e      	mov	r6, r1
 8007d44:	4605      	mov	r5, r0
 8007d46:	b118      	cbz	r0, 8007d50 <_puts_r+0x10>
 8007d48:	6983      	ldr	r3, [r0, #24]
 8007d4a:	b90b      	cbnz	r3, 8007d50 <_puts_r+0x10>
 8007d4c:	f001 ff00 	bl	8009b50 <__sinit>
 8007d50:	69ab      	ldr	r3, [r5, #24]
 8007d52:	68ac      	ldr	r4, [r5, #8]
 8007d54:	b913      	cbnz	r3, 8007d5c <_puts_r+0x1c>
 8007d56:	4628      	mov	r0, r5
 8007d58:	f001 fefa 	bl	8009b50 <__sinit>
 8007d5c:	4b2c      	ldr	r3, [pc, #176]	; (8007e10 <_puts_r+0xd0>)
 8007d5e:	429c      	cmp	r4, r3
 8007d60:	d120      	bne.n	8007da4 <_puts_r+0x64>
 8007d62:	686c      	ldr	r4, [r5, #4]
 8007d64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d66:	07db      	lsls	r3, r3, #31
 8007d68:	d405      	bmi.n	8007d76 <_puts_r+0x36>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	0598      	lsls	r0, r3, #22
 8007d6e:	d402      	bmi.n	8007d76 <_puts_r+0x36>
 8007d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d72:	f002 faf6 	bl	800a362 <__retarget_lock_acquire_recursive>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	0719      	lsls	r1, r3, #28
 8007d7a:	d51d      	bpl.n	8007db8 <_puts_r+0x78>
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	b1db      	cbz	r3, 8007db8 <_puts_r+0x78>
 8007d80:	3e01      	subs	r6, #1
 8007d82:	68a3      	ldr	r3, [r4, #8]
 8007d84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	60a3      	str	r3, [r4, #8]
 8007d8c:	bb39      	cbnz	r1, 8007dde <_puts_r+0x9e>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	da38      	bge.n	8007e04 <_puts_r+0xc4>
 8007d92:	4622      	mov	r2, r4
 8007d94:	210a      	movs	r1, #10
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 fe82 	bl	8008aa0 <__swbuf_r>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d011      	beq.n	8007dc4 <_puts_r+0x84>
 8007da0:	250a      	movs	r5, #10
 8007da2:	e011      	b.n	8007dc8 <_puts_r+0x88>
 8007da4:	4b1b      	ldr	r3, [pc, #108]	; (8007e14 <_puts_r+0xd4>)
 8007da6:	429c      	cmp	r4, r3
 8007da8:	d101      	bne.n	8007dae <_puts_r+0x6e>
 8007daa:	68ac      	ldr	r4, [r5, #8]
 8007dac:	e7da      	b.n	8007d64 <_puts_r+0x24>
 8007dae:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <_puts_r+0xd8>)
 8007db0:	429c      	cmp	r4, r3
 8007db2:	bf08      	it	eq
 8007db4:	68ec      	ldreq	r4, [r5, #12]
 8007db6:	e7d5      	b.n	8007d64 <_puts_r+0x24>
 8007db8:	4621      	mov	r1, r4
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 fec2 	bl	8008b44 <__swsetup_r>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d0dd      	beq.n	8007d80 <_puts_r+0x40>
 8007dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8007dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dca:	07da      	lsls	r2, r3, #31
 8007dcc:	d405      	bmi.n	8007dda <_puts_r+0x9a>
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	059b      	lsls	r3, r3, #22
 8007dd2:	d402      	bmi.n	8007dda <_puts_r+0x9a>
 8007dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dd6:	f002 fac5 	bl	800a364 <__retarget_lock_release_recursive>
 8007dda:	4628      	mov	r0, r5
 8007ddc:	bd70      	pop	{r4, r5, r6, pc}
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	da04      	bge.n	8007dec <_puts_r+0xac>
 8007de2:	69a2      	ldr	r2, [r4, #24]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	dc06      	bgt.n	8007df6 <_puts_r+0xb6>
 8007de8:	290a      	cmp	r1, #10
 8007dea:	d004      	beq.n	8007df6 <_puts_r+0xb6>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	6022      	str	r2, [r4, #0]
 8007df2:	7019      	strb	r1, [r3, #0]
 8007df4:	e7c5      	b.n	8007d82 <_puts_r+0x42>
 8007df6:	4622      	mov	r2, r4
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f000 fe51 	bl	8008aa0 <__swbuf_r>
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d1bf      	bne.n	8007d82 <_puts_r+0x42>
 8007e02:	e7df      	b.n	8007dc4 <_puts_r+0x84>
 8007e04:	250a      	movs	r5, #10
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	6022      	str	r2, [r4, #0]
 8007e0c:	701d      	strb	r5, [r3, #0]
 8007e0e:	e7db      	b.n	8007dc8 <_puts_r+0x88>
 8007e10:	0800b78c 	.word	0x0800b78c
 8007e14:	0800b7ac 	.word	0x0800b7ac
 8007e18:	0800b76c 	.word	0x0800b76c

08007e1c <puts>:
 8007e1c:	4b02      	ldr	r3, [pc, #8]	; (8007e28 <puts+0xc>)
 8007e1e:	4601      	mov	r1, r0
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	f7ff bf8d 	b.w	8007d40 <_puts_r>
 8007e26:	bf00      	nop
 8007e28:	2000000c 	.word	0x2000000c

08007e2c <strstr>:
 8007e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2e:	780c      	ldrb	r4, [r1, #0]
 8007e30:	b164      	cbz	r4, 8007e4c <strstr+0x20>
 8007e32:	4603      	mov	r3, r0
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	1c5e      	adds	r6, r3, #1
 8007e3a:	b90a      	cbnz	r2, 8007e40 <strstr+0x14>
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	e005      	b.n	8007e4c <strstr+0x20>
 8007e40:	4294      	cmp	r4, r2
 8007e42:	d108      	bne.n	8007e56 <strstr+0x2a>
 8007e44:	460d      	mov	r5, r1
 8007e46:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8007e4a:	b902      	cbnz	r2, 8007e4e <strstr+0x22>
 8007e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007e52:	4297      	cmp	r7, r2
 8007e54:	d0f7      	beq.n	8007e46 <strstr+0x1a>
 8007e56:	4633      	mov	r3, r6
 8007e58:	e7ec      	b.n	8007e34 <strstr+0x8>

08007e5a <sulp>:
 8007e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5e:	460f      	mov	r7, r1
 8007e60:	4690      	mov	r8, r2
 8007e62:	f002 fe8b 	bl	800ab7c <__ulp>
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	f1b8 0f00 	cmp.w	r8, #0
 8007e6e:	d011      	beq.n	8007e94 <sulp+0x3a>
 8007e70:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007e74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dd0b      	ble.n	8007e94 <sulp+0x3a>
 8007e7c:	2400      	movs	r4, #0
 8007e7e:	051b      	lsls	r3, r3, #20
 8007e80:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e84:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e88:	4622      	mov	r2, r4
 8007e8a:	462b      	mov	r3, r5
 8007e8c:	f7f8 fb24 	bl	80004d8 <__aeabi_dmul>
 8007e90:	4604      	mov	r4, r0
 8007e92:	460d      	mov	r5, r1
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9c:	0000      	movs	r0, r0
	...

08007ea0 <_strtod_l>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	469b      	mov	fp, r3
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	b0a1      	sub	sp, #132	; 0x84
 8007eaa:	931c      	str	r3, [sp, #112]	; 0x70
 8007eac:	4ba1      	ldr	r3, [pc, #644]	; (8008134 <_strtod_l+0x294>)
 8007eae:	4682      	mov	sl, r0
 8007eb0:	681f      	ldr	r7, [r3, #0]
 8007eb2:	460e      	mov	r6, r1
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007eb8:	f7f8 f94a 	bl	8000150 <strlen>
 8007ebc:	f04f 0800 	mov.w	r8, #0
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	f04f 0900 	mov.w	r9, #0
 8007ec6:	961b      	str	r6, [sp, #108]	; 0x6c
 8007ec8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eca:	781a      	ldrb	r2, [r3, #0]
 8007ecc:	2a2b      	cmp	r2, #43	; 0x2b
 8007ece:	d04c      	beq.n	8007f6a <_strtod_l+0xca>
 8007ed0:	d83a      	bhi.n	8007f48 <_strtod_l+0xa8>
 8007ed2:	2a0d      	cmp	r2, #13
 8007ed4:	d833      	bhi.n	8007f3e <_strtod_l+0x9e>
 8007ed6:	2a08      	cmp	r2, #8
 8007ed8:	d833      	bhi.n	8007f42 <_strtod_l+0xa2>
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	d03d      	beq.n	8007f5a <_strtod_l+0xba>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ee2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007ee4:	782b      	ldrb	r3, [r5, #0]
 8007ee6:	2b30      	cmp	r3, #48	; 0x30
 8007ee8:	f040 80af 	bne.w	800804a <_strtod_l+0x1aa>
 8007eec:	786b      	ldrb	r3, [r5, #1]
 8007eee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ef2:	2b58      	cmp	r3, #88	; 0x58
 8007ef4:	d16c      	bne.n	8007fd0 <_strtod_l+0x130>
 8007ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ef8:	4650      	mov	r0, sl
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	ab1c      	add	r3, sp, #112	; 0x70
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	4a8d      	ldr	r2, [pc, #564]	; (8008138 <_strtod_l+0x298>)
 8007f02:	f8cd b008 	str.w	fp, [sp, #8]
 8007f06:	ab1d      	add	r3, sp, #116	; 0x74
 8007f08:	a91b      	add	r1, sp, #108	; 0x6c
 8007f0a:	f001 ff27 	bl	8009d5c <__gethex>
 8007f0e:	f010 0607 	ands.w	r6, r0, #7
 8007f12:	4604      	mov	r4, r0
 8007f14:	d005      	beq.n	8007f22 <_strtod_l+0x82>
 8007f16:	2e06      	cmp	r6, #6
 8007f18:	d129      	bne.n	8007f6e <_strtod_l+0xce>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	3501      	adds	r5, #1
 8007f1e:	951b      	str	r5, [sp, #108]	; 0x6c
 8007f20:	930c      	str	r3, [sp, #48]	; 0x30
 8007f22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f040 8596 	bne.w	8008a56 <_strtod_l+0xbb6>
 8007f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f2c:	b1d3      	cbz	r3, 8007f64 <_strtod_l+0xc4>
 8007f2e:	4642      	mov	r2, r8
 8007f30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f34:	4610      	mov	r0, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	b021      	add	sp, #132	; 0x84
 8007f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3e:	2a20      	cmp	r2, #32
 8007f40:	d1cd      	bne.n	8007ede <_strtod_l+0x3e>
 8007f42:	3301      	adds	r3, #1
 8007f44:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f46:	e7bf      	b.n	8007ec8 <_strtod_l+0x28>
 8007f48:	2a2d      	cmp	r2, #45	; 0x2d
 8007f4a:	d1c8      	bne.n	8007ede <_strtod_l+0x3e>
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	920c      	str	r2, [sp, #48]	; 0x30
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1c3      	bne.n	8007ee2 <_strtod_l+0x42>
 8007f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f5c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f040 8577 	bne.w	8008a52 <_strtod_l+0xbb2>
 8007f64:	4642      	mov	r2, r8
 8007f66:	464b      	mov	r3, r9
 8007f68:	e7e4      	b.n	8007f34 <_strtod_l+0x94>
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	e7ef      	b.n	8007f4e <_strtod_l+0xae>
 8007f6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f70:	b13a      	cbz	r2, 8007f82 <_strtod_l+0xe2>
 8007f72:	2135      	movs	r1, #53	; 0x35
 8007f74:	a81e      	add	r0, sp, #120	; 0x78
 8007f76:	f002 ff05 	bl	800ad84 <__copybits>
 8007f7a:	4650      	mov	r0, sl
 8007f7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f7e:	f002 facd 	bl	800a51c <_Bfree>
 8007f82:	3e01      	subs	r6, #1
 8007f84:	2e05      	cmp	r6, #5
 8007f86:	d807      	bhi.n	8007f98 <_strtod_l+0xf8>
 8007f88:	e8df f006 	tbb	[pc, r6]
 8007f8c:	1d180b0e 	.word	0x1d180b0e
 8007f90:	030e      	.short	0x030e
 8007f92:	f04f 0900 	mov.w	r9, #0
 8007f96:	46c8      	mov	r8, r9
 8007f98:	0721      	lsls	r1, r4, #28
 8007f9a:	d5c2      	bpl.n	8007f22 <_strtod_l+0x82>
 8007f9c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007fa0:	e7bf      	b.n	8007f22 <_strtod_l+0x82>
 8007fa2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8007fa6:	e7f7      	b.n	8007f98 <_strtod_l+0xf8>
 8007fa8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007faa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8007fae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007fb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007fb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007fba:	e7ed      	b.n	8007f98 <_strtod_l+0xf8>
 8007fbc:	f04f 0800 	mov.w	r8, #0
 8007fc0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800813c <_strtod_l+0x29c>
 8007fc4:	e7e8      	b.n	8007f98 <_strtod_l+0xf8>
 8007fc6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007fca:	f04f 38ff 	mov.w	r8, #4294967295
 8007fce:	e7e3      	b.n	8007f98 <_strtod_l+0xf8>
 8007fd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	921b      	str	r2, [sp, #108]	; 0x6c
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b30      	cmp	r3, #48	; 0x30
 8007fda:	d0f9      	beq.n	8007fd0 <_strtod_l+0x130>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0a0      	beq.n	8007f22 <_strtod_l+0x82>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	9307      	str	r3, [sp, #28]
 8007fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fe6:	220a      	movs	r2, #10
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	2300      	movs	r3, #0
 8007fec:	469b      	mov	fp, r3
 8007fee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007ff2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007ff4:	7805      	ldrb	r5, [r0, #0]
 8007ff6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007ffa:	b2d9      	uxtb	r1, r3
 8007ffc:	2909      	cmp	r1, #9
 8007ffe:	d926      	bls.n	800804e <_strtod_l+0x1ae>
 8008000:	4622      	mov	r2, r4
 8008002:	4639      	mov	r1, r7
 8008004:	f003 f967 	bl	800b2d6 <strncmp>
 8008008:	2800      	cmp	r0, #0
 800800a:	d032      	beq.n	8008072 <_strtod_l+0x1d2>
 800800c:	2000      	movs	r0, #0
 800800e:	462b      	mov	r3, r5
 8008010:	465c      	mov	r4, fp
 8008012:	4602      	mov	r2, r0
 8008014:	9004      	str	r0, [sp, #16]
 8008016:	2b65      	cmp	r3, #101	; 0x65
 8008018:	d001      	beq.n	800801e <_strtod_l+0x17e>
 800801a:	2b45      	cmp	r3, #69	; 0x45
 800801c:	d113      	bne.n	8008046 <_strtod_l+0x1a6>
 800801e:	b91c      	cbnz	r4, 8008028 <_strtod_l+0x188>
 8008020:	9b07      	ldr	r3, [sp, #28]
 8008022:	4303      	orrs	r3, r0
 8008024:	d099      	beq.n	8007f5a <_strtod_l+0xba>
 8008026:	2400      	movs	r4, #0
 8008028:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800802a:	1c73      	adds	r3, r6, #1
 800802c:	931b      	str	r3, [sp, #108]	; 0x6c
 800802e:	7873      	ldrb	r3, [r6, #1]
 8008030:	2b2b      	cmp	r3, #43	; 0x2b
 8008032:	d078      	beq.n	8008126 <_strtod_l+0x286>
 8008034:	2b2d      	cmp	r3, #45	; 0x2d
 8008036:	d07b      	beq.n	8008130 <_strtod_l+0x290>
 8008038:	2700      	movs	r7, #0
 800803a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800803e:	2909      	cmp	r1, #9
 8008040:	f240 8082 	bls.w	8008148 <_strtod_l+0x2a8>
 8008044:	961b      	str	r6, [sp, #108]	; 0x6c
 8008046:	2500      	movs	r5, #0
 8008048:	e09e      	b.n	8008188 <_strtod_l+0x2e8>
 800804a:	2300      	movs	r3, #0
 800804c:	e7c9      	b.n	8007fe2 <_strtod_l+0x142>
 800804e:	f1bb 0f08 	cmp.w	fp, #8
 8008052:	bfd5      	itete	le
 8008054:	9906      	ldrle	r1, [sp, #24]
 8008056:	9905      	ldrgt	r1, [sp, #20]
 8008058:	fb02 3301 	mlale	r3, r2, r1, r3
 800805c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008060:	f100 0001 	add.w	r0, r0, #1
 8008064:	bfd4      	ite	le
 8008066:	9306      	strle	r3, [sp, #24]
 8008068:	9305      	strgt	r3, [sp, #20]
 800806a:	f10b 0b01 	add.w	fp, fp, #1
 800806e:	901b      	str	r0, [sp, #108]	; 0x6c
 8008070:	e7bf      	b.n	8007ff2 <_strtod_l+0x152>
 8008072:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008074:	191a      	adds	r2, r3, r4
 8008076:	921b      	str	r2, [sp, #108]	; 0x6c
 8008078:	5d1b      	ldrb	r3, [r3, r4]
 800807a:	f1bb 0f00 	cmp.w	fp, #0
 800807e:	d036      	beq.n	80080ee <_strtod_l+0x24e>
 8008080:	465c      	mov	r4, fp
 8008082:	9004      	str	r0, [sp, #16]
 8008084:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008088:	2a09      	cmp	r2, #9
 800808a:	d912      	bls.n	80080b2 <_strtod_l+0x212>
 800808c:	2201      	movs	r2, #1
 800808e:	e7c2      	b.n	8008016 <_strtod_l+0x176>
 8008090:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008092:	3001      	adds	r0, #1
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	921b      	str	r2, [sp, #108]	; 0x6c
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	2b30      	cmp	r3, #48	; 0x30
 800809c:	d0f8      	beq.n	8008090 <_strtod_l+0x1f0>
 800809e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80080a2:	2a08      	cmp	r2, #8
 80080a4:	f200 84dc 	bhi.w	8008a60 <_strtod_l+0xbc0>
 80080a8:	9004      	str	r0, [sp, #16]
 80080aa:	2000      	movs	r0, #0
 80080ac:	4604      	mov	r4, r0
 80080ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80080b0:	9208      	str	r2, [sp, #32]
 80080b2:	3b30      	subs	r3, #48	; 0x30
 80080b4:	f100 0201 	add.w	r2, r0, #1
 80080b8:	d013      	beq.n	80080e2 <_strtod_l+0x242>
 80080ba:	9904      	ldr	r1, [sp, #16]
 80080bc:	1905      	adds	r5, r0, r4
 80080be:	4411      	add	r1, r2
 80080c0:	9104      	str	r1, [sp, #16]
 80080c2:	4622      	mov	r2, r4
 80080c4:	210a      	movs	r1, #10
 80080c6:	42aa      	cmp	r2, r5
 80080c8:	d113      	bne.n	80080f2 <_strtod_l+0x252>
 80080ca:	1822      	adds	r2, r4, r0
 80080cc:	2a08      	cmp	r2, #8
 80080ce:	f104 0401 	add.w	r4, r4, #1
 80080d2:	4404      	add	r4, r0
 80080d4:	dc1b      	bgt.n	800810e <_strtod_l+0x26e>
 80080d6:	220a      	movs	r2, #10
 80080d8:	9906      	ldr	r1, [sp, #24]
 80080da:	fb02 3301 	mla	r3, r2, r1, r3
 80080de:	9306      	str	r3, [sp, #24]
 80080e0:	2200      	movs	r2, #0
 80080e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080e4:	4610      	mov	r0, r2
 80080e6:	1c59      	adds	r1, r3, #1
 80080e8:	911b      	str	r1, [sp, #108]	; 0x6c
 80080ea:	785b      	ldrb	r3, [r3, #1]
 80080ec:	e7ca      	b.n	8008084 <_strtod_l+0x1e4>
 80080ee:	4658      	mov	r0, fp
 80080f0:	e7d3      	b.n	800809a <_strtod_l+0x1fa>
 80080f2:	2a08      	cmp	r2, #8
 80080f4:	dc04      	bgt.n	8008100 <_strtod_l+0x260>
 80080f6:	9f06      	ldr	r7, [sp, #24]
 80080f8:	434f      	muls	r7, r1
 80080fa:	9706      	str	r7, [sp, #24]
 80080fc:	3201      	adds	r2, #1
 80080fe:	e7e2      	b.n	80080c6 <_strtod_l+0x226>
 8008100:	1c57      	adds	r7, r2, #1
 8008102:	2f10      	cmp	r7, #16
 8008104:	bfde      	ittt	le
 8008106:	9f05      	ldrle	r7, [sp, #20]
 8008108:	434f      	mulle	r7, r1
 800810a:	9705      	strle	r7, [sp, #20]
 800810c:	e7f6      	b.n	80080fc <_strtod_l+0x25c>
 800810e:	2c10      	cmp	r4, #16
 8008110:	bfdf      	itttt	le
 8008112:	220a      	movle	r2, #10
 8008114:	9905      	ldrle	r1, [sp, #20]
 8008116:	fb02 3301 	mlale	r3, r2, r1, r3
 800811a:	9305      	strle	r3, [sp, #20]
 800811c:	e7e0      	b.n	80080e0 <_strtod_l+0x240>
 800811e:	2300      	movs	r3, #0
 8008120:	2201      	movs	r2, #1
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	e77c      	b.n	8008020 <_strtod_l+0x180>
 8008126:	2700      	movs	r7, #0
 8008128:	1cb3      	adds	r3, r6, #2
 800812a:	931b      	str	r3, [sp, #108]	; 0x6c
 800812c:	78b3      	ldrb	r3, [r6, #2]
 800812e:	e784      	b.n	800803a <_strtod_l+0x19a>
 8008130:	2701      	movs	r7, #1
 8008132:	e7f9      	b.n	8008128 <_strtod_l+0x288>
 8008134:	0800b838 	.word	0x0800b838
 8008138:	0800b684 	.word	0x0800b684
 800813c:	7ff00000 	.word	0x7ff00000
 8008140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008142:	1c59      	adds	r1, r3, #1
 8008144:	911b      	str	r1, [sp, #108]	; 0x6c
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b30      	cmp	r3, #48	; 0x30
 800814a:	d0f9      	beq.n	8008140 <_strtod_l+0x2a0>
 800814c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008150:	2908      	cmp	r1, #8
 8008152:	f63f af78 	bhi.w	8008046 <_strtod_l+0x1a6>
 8008156:	f04f 0e0a 	mov.w	lr, #10
 800815a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800815e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008160:	9309      	str	r3, [sp, #36]	; 0x24
 8008162:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008164:	1c59      	adds	r1, r3, #1
 8008166:	911b      	str	r1, [sp, #108]	; 0x6c
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800816e:	2d09      	cmp	r5, #9
 8008170:	d935      	bls.n	80081de <_strtod_l+0x33e>
 8008172:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008174:	1b49      	subs	r1, r1, r5
 8008176:	2908      	cmp	r1, #8
 8008178:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800817c:	dc02      	bgt.n	8008184 <_strtod_l+0x2e4>
 800817e:	4565      	cmp	r5, ip
 8008180:	bfa8      	it	ge
 8008182:	4665      	movge	r5, ip
 8008184:	b107      	cbz	r7, 8008188 <_strtod_l+0x2e8>
 8008186:	426d      	negs	r5, r5
 8008188:	2c00      	cmp	r4, #0
 800818a:	d14c      	bne.n	8008226 <_strtod_l+0x386>
 800818c:	9907      	ldr	r1, [sp, #28]
 800818e:	4301      	orrs	r1, r0
 8008190:	f47f aec7 	bne.w	8007f22 <_strtod_l+0x82>
 8008194:	2a00      	cmp	r2, #0
 8008196:	f47f aee0 	bne.w	8007f5a <_strtod_l+0xba>
 800819a:	2b69      	cmp	r3, #105	; 0x69
 800819c:	d026      	beq.n	80081ec <_strtod_l+0x34c>
 800819e:	dc23      	bgt.n	80081e8 <_strtod_l+0x348>
 80081a0:	2b49      	cmp	r3, #73	; 0x49
 80081a2:	d023      	beq.n	80081ec <_strtod_l+0x34c>
 80081a4:	2b4e      	cmp	r3, #78	; 0x4e
 80081a6:	f47f aed8 	bne.w	8007f5a <_strtod_l+0xba>
 80081aa:	499c      	ldr	r1, [pc, #624]	; (800841c <_strtod_l+0x57c>)
 80081ac:	a81b      	add	r0, sp, #108	; 0x6c
 80081ae:	f002 f823 	bl	800a1f8 <__match>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f43f aed1 	beq.w	8007f5a <_strtod_l+0xba>
 80081b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	2b28      	cmp	r3, #40	; 0x28
 80081be:	d12c      	bne.n	800821a <_strtod_l+0x37a>
 80081c0:	4997      	ldr	r1, [pc, #604]	; (8008420 <_strtod_l+0x580>)
 80081c2:	aa1e      	add	r2, sp, #120	; 0x78
 80081c4:	a81b      	add	r0, sp, #108	; 0x6c
 80081c6:	f002 f82b 	bl	800a220 <__hexnan>
 80081ca:	2805      	cmp	r0, #5
 80081cc:	d125      	bne.n	800821a <_strtod_l+0x37a>
 80081ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80081d0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80081d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80081d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80081dc:	e6a1      	b.n	8007f22 <_strtod_l+0x82>
 80081de:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80081e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80081e6:	e7bc      	b.n	8008162 <_strtod_l+0x2c2>
 80081e8:	2b6e      	cmp	r3, #110	; 0x6e
 80081ea:	e7dc      	b.n	80081a6 <_strtod_l+0x306>
 80081ec:	498d      	ldr	r1, [pc, #564]	; (8008424 <_strtod_l+0x584>)
 80081ee:	a81b      	add	r0, sp, #108	; 0x6c
 80081f0:	f002 f802 	bl	800a1f8 <__match>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f43f aeb0 	beq.w	8007f5a <_strtod_l+0xba>
 80081fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081fc:	498a      	ldr	r1, [pc, #552]	; (8008428 <_strtod_l+0x588>)
 80081fe:	3b01      	subs	r3, #1
 8008200:	a81b      	add	r0, sp, #108	; 0x6c
 8008202:	931b      	str	r3, [sp, #108]	; 0x6c
 8008204:	f001 fff8 	bl	800a1f8 <__match>
 8008208:	b910      	cbnz	r0, 8008210 <_strtod_l+0x370>
 800820a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800820c:	3301      	adds	r3, #1
 800820e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008210:	f04f 0800 	mov.w	r8, #0
 8008214:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8008438 <_strtod_l+0x598>
 8008218:	e683      	b.n	8007f22 <_strtod_l+0x82>
 800821a:	4884      	ldr	r0, [pc, #528]	; (800842c <_strtod_l+0x58c>)
 800821c:	f003 f802 	bl	800b224 <nan>
 8008220:	4680      	mov	r8, r0
 8008222:	4689      	mov	r9, r1
 8008224:	e67d      	b.n	8007f22 <_strtod_l+0x82>
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	f1bb 0f00 	cmp.w	fp, #0
 800822c:	bf08      	it	eq
 800822e:	46a3      	moveq	fp, r4
 8008230:	1aeb      	subs	r3, r5, r3
 8008232:	2c10      	cmp	r4, #16
 8008234:	9806      	ldr	r0, [sp, #24]
 8008236:	4626      	mov	r6, r4
 8008238:	9307      	str	r3, [sp, #28]
 800823a:	bfa8      	it	ge
 800823c:	2610      	movge	r6, #16
 800823e:	f7f8 f8d1 	bl	80003e4 <__aeabi_ui2d>
 8008242:	2c09      	cmp	r4, #9
 8008244:	4680      	mov	r8, r0
 8008246:	4689      	mov	r9, r1
 8008248:	dd13      	ble.n	8008272 <_strtod_l+0x3d2>
 800824a:	4b79      	ldr	r3, [pc, #484]	; (8008430 <_strtod_l+0x590>)
 800824c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008250:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008254:	f7f8 f940 	bl	80004d8 <__aeabi_dmul>
 8008258:	4680      	mov	r8, r0
 800825a:	9805      	ldr	r0, [sp, #20]
 800825c:	4689      	mov	r9, r1
 800825e:	f7f8 f8c1 	bl	80003e4 <__aeabi_ui2d>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4640      	mov	r0, r8
 8008268:	4649      	mov	r1, r9
 800826a:	f7f7 ff7f 	bl	800016c <__adddf3>
 800826e:	4680      	mov	r8, r0
 8008270:	4689      	mov	r9, r1
 8008272:	2c0f      	cmp	r4, #15
 8008274:	dc36      	bgt.n	80082e4 <_strtod_l+0x444>
 8008276:	9b07      	ldr	r3, [sp, #28]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f43f ae52 	beq.w	8007f22 <_strtod_l+0x82>
 800827e:	dd22      	ble.n	80082c6 <_strtod_l+0x426>
 8008280:	2b16      	cmp	r3, #22
 8008282:	dc09      	bgt.n	8008298 <_strtod_l+0x3f8>
 8008284:	4c6a      	ldr	r4, [pc, #424]	; (8008430 <_strtod_l+0x590>)
 8008286:	4642      	mov	r2, r8
 8008288:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800828c:	464b      	mov	r3, r9
 800828e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008292:	f7f8 f921 	bl	80004d8 <__aeabi_dmul>
 8008296:	e7c3      	b.n	8008220 <_strtod_l+0x380>
 8008298:	9a07      	ldr	r2, [sp, #28]
 800829a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800829e:	4293      	cmp	r3, r2
 80082a0:	db20      	blt.n	80082e4 <_strtod_l+0x444>
 80082a2:	4d63      	ldr	r5, [pc, #396]	; (8008430 <_strtod_l+0x590>)
 80082a4:	f1c4 040f 	rsb	r4, r4, #15
 80082a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80082ac:	4642      	mov	r2, r8
 80082ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082b2:	464b      	mov	r3, r9
 80082b4:	f7f8 f910 	bl	80004d8 <__aeabi_dmul>
 80082b8:	9b07      	ldr	r3, [sp, #28]
 80082ba:	1b1c      	subs	r4, r3, r4
 80082bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80082c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082c4:	e7e5      	b.n	8008292 <_strtod_l+0x3f2>
 80082c6:	9b07      	ldr	r3, [sp, #28]
 80082c8:	3316      	adds	r3, #22
 80082ca:	db0b      	blt.n	80082e4 <_strtod_l+0x444>
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	4a58      	ldr	r2, [pc, #352]	; (8008430 <_strtod_l+0x590>)
 80082d0:	1b5d      	subs	r5, r3, r5
 80082d2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80082d6:	4640      	mov	r0, r8
 80082d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082dc:	4649      	mov	r1, r9
 80082de:	f7f8 fa25 	bl	800072c <__aeabi_ddiv>
 80082e2:	e79d      	b.n	8008220 <_strtod_l+0x380>
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	1ba6      	subs	r6, r4, r6
 80082e8:	441e      	add	r6, r3
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	dd71      	ble.n	80083d2 <_strtod_l+0x532>
 80082ee:	f016 030f 	ands.w	r3, r6, #15
 80082f2:	d00a      	beq.n	800830a <_strtod_l+0x46a>
 80082f4:	494e      	ldr	r1, [pc, #312]	; (8008430 <_strtod_l+0x590>)
 80082f6:	4642      	mov	r2, r8
 80082f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008300:	464b      	mov	r3, r9
 8008302:	f7f8 f8e9 	bl	80004d8 <__aeabi_dmul>
 8008306:	4680      	mov	r8, r0
 8008308:	4689      	mov	r9, r1
 800830a:	f036 060f 	bics.w	r6, r6, #15
 800830e:	d050      	beq.n	80083b2 <_strtod_l+0x512>
 8008310:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008314:	dd27      	ble.n	8008366 <_strtod_l+0x4c6>
 8008316:	f04f 0b00 	mov.w	fp, #0
 800831a:	f8cd b010 	str.w	fp, [sp, #16]
 800831e:	f8cd b020 	str.w	fp, [sp, #32]
 8008322:	f8cd b018 	str.w	fp, [sp, #24]
 8008326:	2322      	movs	r3, #34	; 0x22
 8008328:	f04f 0800 	mov.w	r8, #0
 800832c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008438 <_strtod_l+0x598>
 8008330:	f8ca 3000 	str.w	r3, [sl]
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f43f adf3 	beq.w	8007f22 <_strtod_l+0x82>
 800833c:	4650      	mov	r0, sl
 800833e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008340:	f002 f8ec 	bl	800a51c <_Bfree>
 8008344:	4650      	mov	r0, sl
 8008346:	9906      	ldr	r1, [sp, #24]
 8008348:	f002 f8e8 	bl	800a51c <_Bfree>
 800834c:	4650      	mov	r0, sl
 800834e:	9904      	ldr	r1, [sp, #16]
 8008350:	f002 f8e4 	bl	800a51c <_Bfree>
 8008354:	4650      	mov	r0, sl
 8008356:	9908      	ldr	r1, [sp, #32]
 8008358:	f002 f8e0 	bl	800a51c <_Bfree>
 800835c:	4659      	mov	r1, fp
 800835e:	4650      	mov	r0, sl
 8008360:	f002 f8dc 	bl	800a51c <_Bfree>
 8008364:	e5dd      	b.n	8007f22 <_strtod_l+0x82>
 8008366:	2300      	movs	r3, #0
 8008368:	4640      	mov	r0, r8
 800836a:	4649      	mov	r1, r9
 800836c:	461f      	mov	r7, r3
 800836e:	1136      	asrs	r6, r6, #4
 8008370:	2e01      	cmp	r6, #1
 8008372:	dc21      	bgt.n	80083b8 <_strtod_l+0x518>
 8008374:	b10b      	cbz	r3, 800837a <_strtod_l+0x4da>
 8008376:	4680      	mov	r8, r0
 8008378:	4689      	mov	r9, r1
 800837a:	4b2e      	ldr	r3, [pc, #184]	; (8008434 <_strtod_l+0x594>)
 800837c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008380:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008384:	4642      	mov	r2, r8
 8008386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800838a:	464b      	mov	r3, r9
 800838c:	f7f8 f8a4 	bl	80004d8 <__aeabi_dmul>
 8008390:	4b29      	ldr	r3, [pc, #164]	; (8008438 <_strtod_l+0x598>)
 8008392:	460a      	mov	r2, r1
 8008394:	400b      	ands	r3, r1
 8008396:	4929      	ldr	r1, [pc, #164]	; (800843c <_strtod_l+0x59c>)
 8008398:	4680      	mov	r8, r0
 800839a:	428b      	cmp	r3, r1
 800839c:	d8bb      	bhi.n	8008316 <_strtod_l+0x476>
 800839e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80083a2:	428b      	cmp	r3, r1
 80083a4:	bf86      	itte	hi
 80083a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80083aa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008440 <_strtod_l+0x5a0>
 80083ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80083b2:	2300      	movs	r3, #0
 80083b4:	9305      	str	r3, [sp, #20]
 80083b6:	e07e      	b.n	80084b6 <_strtod_l+0x616>
 80083b8:	07f2      	lsls	r2, r6, #31
 80083ba:	d507      	bpl.n	80083cc <_strtod_l+0x52c>
 80083bc:	4b1d      	ldr	r3, [pc, #116]	; (8008434 <_strtod_l+0x594>)
 80083be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f8 f887 	bl	80004d8 <__aeabi_dmul>
 80083ca:	2301      	movs	r3, #1
 80083cc:	3701      	adds	r7, #1
 80083ce:	1076      	asrs	r6, r6, #1
 80083d0:	e7ce      	b.n	8008370 <_strtod_l+0x4d0>
 80083d2:	d0ee      	beq.n	80083b2 <_strtod_l+0x512>
 80083d4:	4276      	negs	r6, r6
 80083d6:	f016 020f 	ands.w	r2, r6, #15
 80083da:	d00a      	beq.n	80083f2 <_strtod_l+0x552>
 80083dc:	4b14      	ldr	r3, [pc, #80]	; (8008430 <_strtod_l+0x590>)
 80083de:	4640      	mov	r0, r8
 80083e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083e4:	4649      	mov	r1, r9
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f7f8 f99f 	bl	800072c <__aeabi_ddiv>
 80083ee:	4680      	mov	r8, r0
 80083f0:	4689      	mov	r9, r1
 80083f2:	1136      	asrs	r6, r6, #4
 80083f4:	d0dd      	beq.n	80083b2 <_strtod_l+0x512>
 80083f6:	2e1f      	cmp	r6, #31
 80083f8:	dd24      	ble.n	8008444 <_strtod_l+0x5a4>
 80083fa:	f04f 0b00 	mov.w	fp, #0
 80083fe:	f8cd b010 	str.w	fp, [sp, #16]
 8008402:	f8cd b020 	str.w	fp, [sp, #32]
 8008406:	f8cd b018 	str.w	fp, [sp, #24]
 800840a:	2322      	movs	r3, #34	; 0x22
 800840c:	f04f 0800 	mov.w	r8, #0
 8008410:	f04f 0900 	mov.w	r9, #0
 8008414:	f8ca 3000 	str.w	r3, [sl]
 8008418:	e78c      	b.n	8008334 <_strtod_l+0x494>
 800841a:	bf00      	nop
 800841c:	0800b65d 	.word	0x0800b65d
 8008420:	0800b698 	.word	0x0800b698
 8008424:	0800b655 	.word	0x0800b655
 8008428:	0800b6db 	.word	0x0800b6db
 800842c:	0800b9f8 	.word	0x0800b9f8
 8008430:	0800b8d8 	.word	0x0800b8d8
 8008434:	0800b8b0 	.word	0x0800b8b0
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	7ca00000 	.word	0x7ca00000
 8008440:	7fefffff 	.word	0x7fefffff
 8008444:	f016 0310 	ands.w	r3, r6, #16
 8008448:	bf18      	it	ne
 800844a:	236a      	movne	r3, #106	; 0x6a
 800844c:	4640      	mov	r0, r8
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	4649      	mov	r1, r9
 8008452:	2300      	movs	r3, #0
 8008454:	4fb2      	ldr	r7, [pc, #712]	; (8008720 <_strtod_l+0x880>)
 8008456:	07f2      	lsls	r2, r6, #31
 8008458:	d504      	bpl.n	8008464 <_strtod_l+0x5c4>
 800845a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845e:	f7f8 f83b 	bl	80004d8 <__aeabi_dmul>
 8008462:	2301      	movs	r3, #1
 8008464:	1076      	asrs	r6, r6, #1
 8008466:	f107 0708 	add.w	r7, r7, #8
 800846a:	d1f4      	bne.n	8008456 <_strtod_l+0x5b6>
 800846c:	b10b      	cbz	r3, 8008472 <_strtod_l+0x5d2>
 800846e:	4680      	mov	r8, r0
 8008470:	4689      	mov	r9, r1
 8008472:	9b05      	ldr	r3, [sp, #20]
 8008474:	b1bb      	cbz	r3, 80084a6 <_strtod_l+0x606>
 8008476:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800847a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800847e:	2b00      	cmp	r3, #0
 8008480:	4649      	mov	r1, r9
 8008482:	dd10      	ble.n	80084a6 <_strtod_l+0x606>
 8008484:	2b1f      	cmp	r3, #31
 8008486:	f340 812b 	ble.w	80086e0 <_strtod_l+0x840>
 800848a:	2b34      	cmp	r3, #52	; 0x34
 800848c:	bfd8      	it	le
 800848e:	f04f 32ff 	movle.w	r2, #4294967295
 8008492:	f04f 0800 	mov.w	r8, #0
 8008496:	bfcf      	iteee	gt
 8008498:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800849c:	3b20      	suble	r3, #32
 800849e:	fa02 f303 	lslle.w	r3, r2, r3
 80084a2:	ea03 0901 	andle.w	r9, r3, r1
 80084a6:	2200      	movs	r2, #0
 80084a8:	2300      	movs	r3, #0
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	f7f8 fa7b 	bl	80009a8 <__aeabi_dcmpeq>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d1a1      	bne.n	80083fa <_strtod_l+0x55a>
 80084b6:	9b06      	ldr	r3, [sp, #24]
 80084b8:	465a      	mov	r2, fp
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4650      	mov	r0, sl
 80084be:	4623      	mov	r3, r4
 80084c0:	9908      	ldr	r1, [sp, #32]
 80084c2:	f002 f897 	bl	800a5f4 <__s2b>
 80084c6:	9008      	str	r0, [sp, #32]
 80084c8:	2800      	cmp	r0, #0
 80084ca:	f43f af24 	beq.w	8008316 <_strtod_l+0x476>
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	f04f 0b00 	mov.w	fp, #0
 80084d4:	1b5d      	subs	r5, r3, r5
 80084d6:	9b07      	ldr	r3, [sp, #28]
 80084d8:	f8cd b010 	str.w	fp, [sp, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	bfb4      	ite	lt
 80084e0:	462b      	movlt	r3, r5
 80084e2:	2300      	movge	r3, #0
 80084e4:	930e      	str	r3, [sp, #56]	; 0x38
 80084e6:	9b07      	ldr	r3, [sp, #28]
 80084e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80084ec:	9316      	str	r3, [sp, #88]	; 0x58
 80084ee:	9b08      	ldr	r3, [sp, #32]
 80084f0:	4650      	mov	r0, sl
 80084f2:	6859      	ldr	r1, [r3, #4]
 80084f4:	f001 ffd2 	bl	800a49c <_Balloc>
 80084f8:	9006      	str	r0, [sp, #24]
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f43f af13 	beq.w	8008326 <_strtod_l+0x486>
 8008500:	9b08      	ldr	r3, [sp, #32]
 8008502:	300c      	adds	r0, #12
 8008504:	691a      	ldr	r2, [r3, #16]
 8008506:	f103 010c 	add.w	r1, r3, #12
 800850a:	3202      	adds	r2, #2
 800850c:	0092      	lsls	r2, r2, #2
 800850e:	f001 ffb7 	bl	800a480 <memcpy>
 8008512:	ab1e      	add	r3, sp, #120	; 0x78
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	ab1d      	add	r3, sp, #116	; 0x74
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	4642      	mov	r2, r8
 800851c:	464b      	mov	r3, r9
 800851e:	4650      	mov	r0, sl
 8008520:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8008524:	f002 fba4 	bl	800ac70 <__d2b>
 8008528:	901c      	str	r0, [sp, #112]	; 0x70
 800852a:	2800      	cmp	r0, #0
 800852c:	f43f aefb 	beq.w	8008326 <_strtod_l+0x486>
 8008530:	2101      	movs	r1, #1
 8008532:	4650      	mov	r0, sl
 8008534:	f002 f8f6 	bl	800a724 <__i2b>
 8008538:	4603      	mov	r3, r0
 800853a:	9004      	str	r0, [sp, #16]
 800853c:	2800      	cmp	r0, #0
 800853e:	f43f aef2 	beq.w	8008326 <_strtod_l+0x486>
 8008542:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008544:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008546:	2d00      	cmp	r5, #0
 8008548:	bfab      	itete	ge
 800854a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800854c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800854e:	18ee      	addge	r6, r5, r3
 8008550:	1b5c      	sublt	r4, r3, r5
 8008552:	9b05      	ldr	r3, [sp, #20]
 8008554:	bfa8      	it	ge
 8008556:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008558:	eba5 0503 	sub.w	r5, r5, r3
 800855c:	4415      	add	r5, r2
 800855e:	4b71      	ldr	r3, [pc, #452]	; (8008724 <_strtod_l+0x884>)
 8008560:	f105 35ff 	add.w	r5, r5, #4294967295
 8008564:	bfb8      	it	lt
 8008566:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008568:	429d      	cmp	r5, r3
 800856a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800856e:	f280 80c9 	bge.w	8008704 <_strtod_l+0x864>
 8008572:	1b5b      	subs	r3, r3, r5
 8008574:	2b1f      	cmp	r3, #31
 8008576:	f04f 0701 	mov.w	r7, #1
 800857a:	eba2 0203 	sub.w	r2, r2, r3
 800857e:	f300 80b6 	bgt.w	80086ee <_strtod_l+0x84e>
 8008582:	2500      	movs	r5, #0
 8008584:	fa07 f303 	lsl.w	r3, r7, r3
 8008588:	930f      	str	r3, [sp, #60]	; 0x3c
 800858a:	18b7      	adds	r7, r6, r2
 800858c:	9b05      	ldr	r3, [sp, #20]
 800858e:	42be      	cmp	r6, r7
 8008590:	4414      	add	r4, r2
 8008592:	441c      	add	r4, r3
 8008594:	4633      	mov	r3, r6
 8008596:	bfa8      	it	ge
 8008598:	463b      	movge	r3, r7
 800859a:	42a3      	cmp	r3, r4
 800859c:	bfa8      	it	ge
 800859e:	4623      	movge	r3, r4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	bfc2      	ittt	gt
 80085a4:	1aff      	subgt	r7, r7, r3
 80085a6:	1ae4      	subgt	r4, r4, r3
 80085a8:	1af6      	subgt	r6, r6, r3
 80085aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dd17      	ble.n	80085e0 <_strtod_l+0x740>
 80085b0:	461a      	mov	r2, r3
 80085b2:	4650      	mov	r0, sl
 80085b4:	9904      	ldr	r1, [sp, #16]
 80085b6:	f002 f96f 	bl	800a898 <__pow5mult>
 80085ba:	9004      	str	r0, [sp, #16]
 80085bc:	2800      	cmp	r0, #0
 80085be:	f43f aeb2 	beq.w	8008326 <_strtod_l+0x486>
 80085c2:	4601      	mov	r1, r0
 80085c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80085c6:	4650      	mov	r0, sl
 80085c8:	f002 f8c2 	bl	800a750 <__multiply>
 80085cc:	9009      	str	r0, [sp, #36]	; 0x24
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f43f aea9 	beq.w	8008326 <_strtod_l+0x486>
 80085d4:	4650      	mov	r0, sl
 80085d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80085d8:	f001 ffa0 	bl	800a51c <_Bfree>
 80085dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085de:	931c      	str	r3, [sp, #112]	; 0x70
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	f300 8093 	bgt.w	800870c <_strtod_l+0x86c>
 80085e6:	9b07      	ldr	r3, [sp, #28]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	dd08      	ble.n	80085fe <_strtod_l+0x75e>
 80085ec:	4650      	mov	r0, sl
 80085ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80085f0:	9906      	ldr	r1, [sp, #24]
 80085f2:	f002 f951 	bl	800a898 <__pow5mult>
 80085f6:	9006      	str	r0, [sp, #24]
 80085f8:	2800      	cmp	r0, #0
 80085fa:	f43f ae94 	beq.w	8008326 <_strtod_l+0x486>
 80085fe:	2c00      	cmp	r4, #0
 8008600:	dd08      	ble.n	8008614 <_strtod_l+0x774>
 8008602:	4622      	mov	r2, r4
 8008604:	4650      	mov	r0, sl
 8008606:	9906      	ldr	r1, [sp, #24]
 8008608:	f002 f9a0 	bl	800a94c <__lshift>
 800860c:	9006      	str	r0, [sp, #24]
 800860e:	2800      	cmp	r0, #0
 8008610:	f43f ae89 	beq.w	8008326 <_strtod_l+0x486>
 8008614:	2e00      	cmp	r6, #0
 8008616:	dd08      	ble.n	800862a <_strtod_l+0x78a>
 8008618:	4632      	mov	r2, r6
 800861a:	4650      	mov	r0, sl
 800861c:	9904      	ldr	r1, [sp, #16]
 800861e:	f002 f995 	bl	800a94c <__lshift>
 8008622:	9004      	str	r0, [sp, #16]
 8008624:	2800      	cmp	r0, #0
 8008626:	f43f ae7e 	beq.w	8008326 <_strtod_l+0x486>
 800862a:	4650      	mov	r0, sl
 800862c:	9a06      	ldr	r2, [sp, #24]
 800862e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008630:	f002 fa14 	bl	800aa5c <__mdiff>
 8008634:	4683      	mov	fp, r0
 8008636:	2800      	cmp	r0, #0
 8008638:	f43f ae75 	beq.w	8008326 <_strtod_l+0x486>
 800863c:	2400      	movs	r4, #0
 800863e:	68c3      	ldr	r3, [r0, #12]
 8008640:	9904      	ldr	r1, [sp, #16]
 8008642:	60c4      	str	r4, [r0, #12]
 8008644:	930d      	str	r3, [sp, #52]	; 0x34
 8008646:	f002 f9ed 	bl	800aa24 <__mcmp>
 800864a:	42a0      	cmp	r0, r4
 800864c:	da70      	bge.n	8008730 <_strtod_l+0x890>
 800864e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008650:	ea53 0308 	orrs.w	r3, r3, r8
 8008654:	f040 8096 	bne.w	8008784 <_strtod_l+0x8e4>
 8008658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800865c:	2b00      	cmp	r3, #0
 800865e:	f040 8091 	bne.w	8008784 <_strtod_l+0x8e4>
 8008662:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008666:	0d1b      	lsrs	r3, r3, #20
 8008668:	051b      	lsls	r3, r3, #20
 800866a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800866e:	f240 8089 	bls.w	8008784 <_strtod_l+0x8e4>
 8008672:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008676:	b923      	cbnz	r3, 8008682 <_strtod_l+0x7e2>
 8008678:	f8db 3010 	ldr.w	r3, [fp, #16]
 800867c:	2b01      	cmp	r3, #1
 800867e:	f340 8081 	ble.w	8008784 <_strtod_l+0x8e4>
 8008682:	4659      	mov	r1, fp
 8008684:	2201      	movs	r2, #1
 8008686:	4650      	mov	r0, sl
 8008688:	f002 f960 	bl	800a94c <__lshift>
 800868c:	9904      	ldr	r1, [sp, #16]
 800868e:	4683      	mov	fp, r0
 8008690:	f002 f9c8 	bl	800aa24 <__mcmp>
 8008694:	2800      	cmp	r0, #0
 8008696:	dd75      	ble.n	8008784 <_strtod_l+0x8e4>
 8008698:	9905      	ldr	r1, [sp, #20]
 800869a:	464b      	mov	r3, r9
 800869c:	4a22      	ldr	r2, [pc, #136]	; (8008728 <_strtod_l+0x888>)
 800869e:	2900      	cmp	r1, #0
 80086a0:	f000 8091 	beq.w	80087c6 <_strtod_l+0x926>
 80086a4:	ea02 0109 	and.w	r1, r2, r9
 80086a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80086ac:	f300 808b 	bgt.w	80087c6 <_strtod_l+0x926>
 80086b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80086b4:	f77f aea9 	ble.w	800840a <_strtod_l+0x56a>
 80086b8:	2300      	movs	r3, #0
 80086ba:	4a1c      	ldr	r2, [pc, #112]	; (800872c <_strtod_l+0x88c>)
 80086bc:	4640      	mov	r0, r8
 80086be:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80086c2:	4649      	mov	r1, r9
 80086c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80086c8:	f7f7 ff06 	bl	80004d8 <__aeabi_dmul>
 80086cc:	460b      	mov	r3, r1
 80086ce:	4303      	orrs	r3, r0
 80086d0:	bf08      	it	eq
 80086d2:	2322      	moveq	r3, #34	; 0x22
 80086d4:	4680      	mov	r8, r0
 80086d6:	4689      	mov	r9, r1
 80086d8:	bf08      	it	eq
 80086da:	f8ca 3000 	streq.w	r3, [sl]
 80086de:	e62d      	b.n	800833c <_strtod_l+0x49c>
 80086e0:	f04f 32ff 	mov.w	r2, #4294967295
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	ea03 0808 	and.w	r8, r3, r8
 80086ec:	e6db      	b.n	80084a6 <_strtod_l+0x606>
 80086ee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80086f2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80086f6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80086fa:	35e2      	adds	r5, #226	; 0xe2
 80086fc:	fa07 f505 	lsl.w	r5, r7, r5
 8008700:	970f      	str	r7, [sp, #60]	; 0x3c
 8008702:	e742      	b.n	800858a <_strtod_l+0x6ea>
 8008704:	2301      	movs	r3, #1
 8008706:	2500      	movs	r5, #0
 8008708:	930f      	str	r3, [sp, #60]	; 0x3c
 800870a:	e73e      	b.n	800858a <_strtod_l+0x6ea>
 800870c:	463a      	mov	r2, r7
 800870e:	4650      	mov	r0, sl
 8008710:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008712:	f002 f91b 	bl	800a94c <__lshift>
 8008716:	901c      	str	r0, [sp, #112]	; 0x70
 8008718:	2800      	cmp	r0, #0
 800871a:	f47f af64 	bne.w	80085e6 <_strtod_l+0x746>
 800871e:	e602      	b.n	8008326 <_strtod_l+0x486>
 8008720:	0800b6b0 	.word	0x0800b6b0
 8008724:	fffffc02 	.word	0xfffffc02
 8008728:	7ff00000 	.word	0x7ff00000
 800872c:	39500000 	.word	0x39500000
 8008730:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008734:	d166      	bne.n	8008804 <_strtod_l+0x964>
 8008736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800873c:	b35a      	cbz	r2, 8008796 <_strtod_l+0x8f6>
 800873e:	4a9c      	ldr	r2, [pc, #624]	; (80089b0 <_strtod_l+0xb10>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d12c      	bne.n	800879e <_strtod_l+0x8fe>
 8008744:	9b05      	ldr	r3, [sp, #20]
 8008746:	4640      	mov	r0, r8
 8008748:	b303      	cbz	r3, 800878c <_strtod_l+0x8ec>
 800874a:	464b      	mov	r3, r9
 800874c:	4a99      	ldr	r2, [pc, #612]	; (80089b4 <_strtod_l+0xb14>)
 800874e:	f04f 31ff 	mov.w	r1, #4294967295
 8008752:	401a      	ands	r2, r3
 8008754:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008758:	d81b      	bhi.n	8008792 <_strtod_l+0x8f2>
 800875a:	0d12      	lsrs	r2, r2, #20
 800875c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008760:	fa01 f303 	lsl.w	r3, r1, r3
 8008764:	4298      	cmp	r0, r3
 8008766:	d11a      	bne.n	800879e <_strtod_l+0x8fe>
 8008768:	4b93      	ldr	r3, [pc, #588]	; (80089b8 <_strtod_l+0xb18>)
 800876a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800876c:	429a      	cmp	r2, r3
 800876e:	d102      	bne.n	8008776 <_strtod_l+0x8d6>
 8008770:	3001      	adds	r0, #1
 8008772:	f43f add8 	beq.w	8008326 <_strtod_l+0x486>
 8008776:	f04f 0800 	mov.w	r8, #0
 800877a:	4b8e      	ldr	r3, [pc, #568]	; (80089b4 <_strtod_l+0xb14>)
 800877c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800877e:	401a      	ands	r2, r3
 8008780:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008784:	9b05      	ldr	r3, [sp, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d196      	bne.n	80086b8 <_strtod_l+0x818>
 800878a:	e5d7      	b.n	800833c <_strtod_l+0x49c>
 800878c:	f04f 33ff 	mov.w	r3, #4294967295
 8008790:	e7e8      	b.n	8008764 <_strtod_l+0x8c4>
 8008792:	460b      	mov	r3, r1
 8008794:	e7e6      	b.n	8008764 <_strtod_l+0x8c4>
 8008796:	ea53 0308 	orrs.w	r3, r3, r8
 800879a:	f43f af7d 	beq.w	8008698 <_strtod_l+0x7f8>
 800879e:	b1e5      	cbz	r5, 80087da <_strtod_l+0x93a>
 80087a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a2:	421d      	tst	r5, r3
 80087a4:	d0ee      	beq.n	8008784 <_strtod_l+0x8e4>
 80087a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a8:	4640      	mov	r0, r8
 80087aa:	4649      	mov	r1, r9
 80087ac:	9a05      	ldr	r2, [sp, #20]
 80087ae:	b1c3      	cbz	r3, 80087e2 <_strtod_l+0x942>
 80087b0:	f7ff fb53 	bl	8007e5a <sulp>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087bc:	f7f7 fcd6 	bl	800016c <__adddf3>
 80087c0:	4680      	mov	r8, r0
 80087c2:	4689      	mov	r9, r1
 80087c4:	e7de      	b.n	8008784 <_strtod_l+0x8e4>
 80087c6:	4013      	ands	r3, r2
 80087c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80087cc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80087d0:	f04f 38ff 	mov.w	r8, #4294967295
 80087d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80087d8:	e7d4      	b.n	8008784 <_strtod_l+0x8e4>
 80087da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087dc:	ea13 0f08 	tst.w	r3, r8
 80087e0:	e7e0      	b.n	80087a4 <_strtod_l+0x904>
 80087e2:	f7ff fb3a 	bl	8007e5a <sulp>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087ee:	f7f7 fcbb 	bl	8000168 <__aeabi_dsub>
 80087f2:	2200      	movs	r2, #0
 80087f4:	2300      	movs	r3, #0
 80087f6:	4680      	mov	r8, r0
 80087f8:	4689      	mov	r9, r1
 80087fa:	f7f8 f8d5 	bl	80009a8 <__aeabi_dcmpeq>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0c0      	beq.n	8008784 <_strtod_l+0x8e4>
 8008802:	e602      	b.n	800840a <_strtod_l+0x56a>
 8008804:	4658      	mov	r0, fp
 8008806:	9904      	ldr	r1, [sp, #16]
 8008808:	f002 fa8e 	bl	800ad28 <__ratio>
 800880c:	2200      	movs	r2, #0
 800880e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	f7f8 f8db 	bl	80009d0 <__aeabi_dcmple>
 800881a:	2800      	cmp	r0, #0
 800881c:	d075      	beq.n	800890a <_strtod_l+0xa6a>
 800881e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008820:	2b00      	cmp	r3, #0
 8008822:	d047      	beq.n	80088b4 <_strtod_l+0xa14>
 8008824:	2600      	movs	r6, #0
 8008826:	4f65      	ldr	r7, [pc, #404]	; (80089bc <_strtod_l+0xb1c>)
 8008828:	4d64      	ldr	r5, [pc, #400]	; (80089bc <_strtod_l+0xb1c>)
 800882a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800882c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008830:	0d1b      	lsrs	r3, r3, #20
 8008832:	051b      	lsls	r3, r3, #20
 8008834:	930f      	str	r3, [sp, #60]	; 0x3c
 8008836:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008838:	4b61      	ldr	r3, [pc, #388]	; (80089c0 <_strtod_l+0xb20>)
 800883a:	429a      	cmp	r2, r3
 800883c:	f040 80c8 	bne.w	80089d0 <_strtod_l+0xb30>
 8008840:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008844:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884a:	4640      	mov	r0, r8
 800884c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008850:	4649      	mov	r1, r9
 8008852:	f002 f993 	bl	800ab7c <__ulp>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4630      	mov	r0, r6
 800885c:	4639      	mov	r1, r7
 800885e:	f7f7 fe3b 	bl	80004d8 <__aeabi_dmul>
 8008862:	4642      	mov	r2, r8
 8008864:	464b      	mov	r3, r9
 8008866:	f7f7 fc81 	bl	800016c <__adddf3>
 800886a:	460b      	mov	r3, r1
 800886c:	4951      	ldr	r1, [pc, #324]	; (80089b4 <_strtod_l+0xb14>)
 800886e:	4a55      	ldr	r2, [pc, #340]	; (80089c4 <_strtod_l+0xb24>)
 8008870:	4019      	ands	r1, r3
 8008872:	4291      	cmp	r1, r2
 8008874:	4680      	mov	r8, r0
 8008876:	d95e      	bls.n	8008936 <_strtod_l+0xa96>
 8008878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800887e:	4293      	cmp	r3, r2
 8008880:	d103      	bne.n	800888a <_strtod_l+0x9ea>
 8008882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008884:	3301      	adds	r3, #1
 8008886:	f43f ad4e 	beq.w	8008326 <_strtod_l+0x486>
 800888a:	f04f 38ff 	mov.w	r8, #4294967295
 800888e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80089b8 <_strtod_l+0xb18>
 8008892:	4650      	mov	r0, sl
 8008894:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008896:	f001 fe41 	bl	800a51c <_Bfree>
 800889a:	4650      	mov	r0, sl
 800889c:	9906      	ldr	r1, [sp, #24]
 800889e:	f001 fe3d 	bl	800a51c <_Bfree>
 80088a2:	4650      	mov	r0, sl
 80088a4:	9904      	ldr	r1, [sp, #16]
 80088a6:	f001 fe39 	bl	800a51c <_Bfree>
 80088aa:	4659      	mov	r1, fp
 80088ac:	4650      	mov	r0, sl
 80088ae:	f001 fe35 	bl	800a51c <_Bfree>
 80088b2:	e61c      	b.n	80084ee <_strtod_l+0x64e>
 80088b4:	f1b8 0f00 	cmp.w	r8, #0
 80088b8:	d119      	bne.n	80088ee <_strtod_l+0xa4e>
 80088ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088c0:	b9e3      	cbnz	r3, 80088fc <_strtod_l+0xa5c>
 80088c2:	2200      	movs	r2, #0
 80088c4:	4630      	mov	r0, r6
 80088c6:	4639      	mov	r1, r7
 80088c8:	4b3c      	ldr	r3, [pc, #240]	; (80089bc <_strtod_l+0xb1c>)
 80088ca:	f7f8 f877 	bl	80009bc <__aeabi_dcmplt>
 80088ce:	b9c8      	cbnz	r0, 8008904 <_strtod_l+0xa64>
 80088d0:	2200      	movs	r2, #0
 80088d2:	4630      	mov	r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	4b3c      	ldr	r3, [pc, #240]	; (80089c8 <_strtod_l+0xb28>)
 80088d8:	f7f7 fdfe 	bl	80004d8 <__aeabi_dmul>
 80088dc:	4604      	mov	r4, r0
 80088de:	460d      	mov	r5, r1
 80088e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80088e4:	9418      	str	r4, [sp, #96]	; 0x60
 80088e6:	9319      	str	r3, [sp, #100]	; 0x64
 80088e8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80088ec:	e79d      	b.n	800882a <_strtod_l+0x98a>
 80088ee:	f1b8 0f01 	cmp.w	r8, #1
 80088f2:	d103      	bne.n	80088fc <_strtod_l+0xa5c>
 80088f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f43f ad87 	beq.w	800840a <_strtod_l+0x56a>
 80088fc:	2600      	movs	r6, #0
 80088fe:	2400      	movs	r4, #0
 8008900:	4f32      	ldr	r7, [pc, #200]	; (80089cc <_strtod_l+0xb2c>)
 8008902:	e791      	b.n	8008828 <_strtod_l+0x988>
 8008904:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008906:	4d30      	ldr	r5, [pc, #192]	; (80089c8 <_strtod_l+0xb28>)
 8008908:	e7ea      	b.n	80088e0 <_strtod_l+0xa40>
 800890a:	4b2f      	ldr	r3, [pc, #188]	; (80089c8 <_strtod_l+0xb28>)
 800890c:	2200      	movs	r2, #0
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f7 fde1 	bl	80004d8 <__aeabi_dmul>
 8008916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	b933      	cbnz	r3, 800892c <_strtod_l+0xa8c>
 800891e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008922:	9010      	str	r0, [sp, #64]	; 0x40
 8008924:	9311      	str	r3, [sp, #68]	; 0x44
 8008926:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800892a:	e77e      	b.n	800882a <_strtod_l+0x98a>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008934:	e7f7      	b.n	8008926 <_strtod_l+0xa86>
 8008936:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800893a:	9b05      	ldr	r3, [sp, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1a8      	bne.n	8008892 <_strtod_l+0x9f2>
 8008940:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008944:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008946:	0d1b      	lsrs	r3, r3, #20
 8008948:	051b      	lsls	r3, r3, #20
 800894a:	429a      	cmp	r2, r3
 800894c:	d1a1      	bne.n	8008892 <_strtod_l+0x9f2>
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	f7f8 fac9 	bl	8000ee8 <__aeabi_d2lz>
 8008956:	f7f7 fd91 	bl	800047c <__aeabi_l2d>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4620      	mov	r0, r4
 8008960:	4629      	mov	r1, r5
 8008962:	f7f7 fc01 	bl	8000168 <__aeabi_dsub>
 8008966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008968:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800896c:	ea43 0308 	orr.w	r3, r3, r8
 8008970:	4313      	orrs	r3, r2
 8008972:	4604      	mov	r4, r0
 8008974:	460d      	mov	r5, r1
 8008976:	d066      	beq.n	8008a46 <_strtod_l+0xba6>
 8008978:	a309      	add	r3, pc, #36	; (adr r3, 80089a0 <_strtod_l+0xb00>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f7f8 f81d 	bl	80009bc <__aeabi_dcmplt>
 8008982:	2800      	cmp	r0, #0
 8008984:	f47f acda 	bne.w	800833c <_strtod_l+0x49c>
 8008988:	a307      	add	r3, pc, #28	; (adr r3, 80089a8 <_strtod_l+0xb08>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f8 f831 	bl	80009f8 <__aeabi_dcmpgt>
 8008996:	2800      	cmp	r0, #0
 8008998:	f43f af7b 	beq.w	8008892 <_strtod_l+0x9f2>
 800899c:	e4ce      	b.n	800833c <_strtod_l+0x49c>
 800899e:	bf00      	nop
 80089a0:	94a03595 	.word	0x94a03595
 80089a4:	3fdfffff 	.word	0x3fdfffff
 80089a8:	35afe535 	.word	0x35afe535
 80089ac:	3fe00000 	.word	0x3fe00000
 80089b0:	000fffff 	.word	0x000fffff
 80089b4:	7ff00000 	.word	0x7ff00000
 80089b8:	7fefffff 	.word	0x7fefffff
 80089bc:	3ff00000 	.word	0x3ff00000
 80089c0:	7fe00000 	.word	0x7fe00000
 80089c4:	7c9fffff 	.word	0x7c9fffff
 80089c8:	3fe00000 	.word	0x3fe00000
 80089cc:	bff00000 	.word	0xbff00000
 80089d0:	9b05      	ldr	r3, [sp, #20]
 80089d2:	b313      	cbz	r3, 8008a1a <_strtod_l+0xb7a>
 80089d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80089da:	d81e      	bhi.n	8008a1a <_strtod_l+0xb7a>
 80089dc:	a326      	add	r3, pc, #152	; (adr r3, 8008a78 <_strtod_l+0xbd8>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	4620      	mov	r0, r4
 80089e4:	4629      	mov	r1, r5
 80089e6:	f7f7 fff3 	bl	80009d0 <__aeabi_dcmple>
 80089ea:	b190      	cbz	r0, 8008a12 <_strtod_l+0xb72>
 80089ec:	4629      	mov	r1, r5
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7f8 f84a 	bl	8000a88 <__aeabi_d2uiz>
 80089f4:	2801      	cmp	r0, #1
 80089f6:	bf38      	it	cc
 80089f8:	2001      	movcc	r0, #1
 80089fa:	f7f7 fcf3 	bl	80003e4 <__aeabi_ui2d>
 80089fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a00:	4604      	mov	r4, r0
 8008a02:	460d      	mov	r5, r1
 8008a04:	b9d3      	cbnz	r3, 8008a3c <_strtod_l+0xb9c>
 8008a06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a0a:	9012      	str	r0, [sp, #72]	; 0x48
 8008a0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a0e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008a12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a14:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008a18:	1a9f      	subs	r7, r3, r2
 8008a1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a1e:	f002 f8ad 	bl	800ab7c <__ulp>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4630      	mov	r0, r6
 8008a28:	4639      	mov	r1, r7
 8008a2a:	f7f7 fd55 	bl	80004d8 <__aeabi_dmul>
 8008a2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a32:	f7f7 fb9b 	bl	800016c <__adddf3>
 8008a36:	4680      	mov	r8, r0
 8008a38:	4689      	mov	r9, r1
 8008a3a:	e77e      	b.n	800893a <_strtod_l+0xa9a>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008a44:	e7e3      	b.n	8008a0e <_strtod_l+0xb6e>
 8008a46:	a30e      	add	r3, pc, #56	; (adr r3, 8008a80 <_strtod_l+0xbe0>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 ffb6 	bl	80009bc <__aeabi_dcmplt>
 8008a50:	e7a1      	b.n	8008996 <_strtod_l+0xaf6>
 8008a52:	2300      	movs	r3, #0
 8008a54:	930c      	str	r3, [sp, #48]	; 0x30
 8008a56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	f7ff ba65 	b.w	8007f2a <_strtod_l+0x8a>
 8008a60:	2b65      	cmp	r3, #101	; 0x65
 8008a62:	f43f ab5c 	beq.w	800811e <_strtod_l+0x27e>
 8008a66:	2b45      	cmp	r3, #69	; 0x45
 8008a68:	f43f ab59 	beq.w	800811e <_strtod_l+0x27e>
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f7ff bb8d 	b.w	800818c <_strtod_l+0x2ec>
 8008a72:	bf00      	nop
 8008a74:	f3af 8000 	nop.w
 8008a78:	ffc00000 	.word	0xffc00000
 8008a7c:	41dfffff 	.word	0x41dfffff
 8008a80:	94a03595 	.word	0x94a03595
 8008a84:	3fcfffff 	.word	0x3fcfffff

08008a88 <strtod>:
 8008a88:	460a      	mov	r2, r1
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	4802      	ldr	r0, [pc, #8]	; (8008a98 <strtod+0x10>)
 8008a8e:	4b03      	ldr	r3, [pc, #12]	; (8008a9c <strtod+0x14>)
 8008a90:	6800      	ldr	r0, [r0, #0]
 8008a92:	f7ff ba05 	b.w	8007ea0 <_strtod_l>
 8008a96:	bf00      	nop
 8008a98:	2000000c 	.word	0x2000000c
 8008a9c:	20000074 	.word	0x20000074

08008aa0 <__swbuf_r>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	460e      	mov	r6, r1
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	b118      	cbz	r0, 8008ab2 <__swbuf_r+0x12>
 8008aaa:	6983      	ldr	r3, [r0, #24]
 8008aac:	b90b      	cbnz	r3, 8008ab2 <__swbuf_r+0x12>
 8008aae:	f001 f84f 	bl	8009b50 <__sinit>
 8008ab2:	4b21      	ldr	r3, [pc, #132]	; (8008b38 <__swbuf_r+0x98>)
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	d12b      	bne.n	8008b10 <__swbuf_r+0x70>
 8008ab8:	686c      	ldr	r4, [r5, #4]
 8008aba:	69a3      	ldr	r3, [r4, #24]
 8008abc:	60a3      	str	r3, [r4, #8]
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	071a      	lsls	r2, r3, #28
 8008ac2:	d52f      	bpl.n	8008b24 <__swbuf_r+0x84>
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	b36b      	cbz	r3, 8008b24 <__swbuf_r+0x84>
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	6820      	ldr	r0, [r4, #0]
 8008acc:	b2f6      	uxtb	r6, r6
 8008ace:	1ac0      	subs	r0, r0, r3
 8008ad0:	6963      	ldr	r3, [r4, #20]
 8008ad2:	4637      	mov	r7, r6
 8008ad4:	4283      	cmp	r3, r0
 8008ad6:	dc04      	bgt.n	8008ae2 <__swbuf_r+0x42>
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4628      	mov	r0, r5
 8008adc:	f000 ffa4 	bl	8009a28 <_fflush_r>
 8008ae0:	bb30      	cbnz	r0, 8008b30 <__swbuf_r+0x90>
 8008ae2:	68a3      	ldr	r3, [r4, #8]
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	60a3      	str	r3, [r4, #8]
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	6022      	str	r2, [r4, #0]
 8008af0:	701e      	strb	r6, [r3, #0]
 8008af2:	6963      	ldr	r3, [r4, #20]
 8008af4:	4283      	cmp	r3, r0
 8008af6:	d004      	beq.n	8008b02 <__swbuf_r+0x62>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	07db      	lsls	r3, r3, #31
 8008afc:	d506      	bpl.n	8008b0c <__swbuf_r+0x6c>
 8008afe:	2e0a      	cmp	r6, #10
 8008b00:	d104      	bne.n	8008b0c <__swbuf_r+0x6c>
 8008b02:	4621      	mov	r1, r4
 8008b04:	4628      	mov	r0, r5
 8008b06:	f000 ff8f 	bl	8009a28 <_fflush_r>
 8008b0a:	b988      	cbnz	r0, 8008b30 <__swbuf_r+0x90>
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <__swbuf_r+0x9c>)
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d101      	bne.n	8008b1a <__swbuf_r+0x7a>
 8008b16:	68ac      	ldr	r4, [r5, #8]
 8008b18:	e7cf      	b.n	8008aba <__swbuf_r+0x1a>
 8008b1a:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <__swbuf_r+0xa0>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	bf08      	it	eq
 8008b20:	68ec      	ldreq	r4, [r5, #12]
 8008b22:	e7ca      	b.n	8008aba <__swbuf_r+0x1a>
 8008b24:	4621      	mov	r1, r4
 8008b26:	4628      	mov	r0, r5
 8008b28:	f000 f80c 	bl	8008b44 <__swsetup_r>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d0cb      	beq.n	8008ac8 <__swbuf_r+0x28>
 8008b30:	f04f 37ff 	mov.w	r7, #4294967295
 8008b34:	e7ea      	b.n	8008b0c <__swbuf_r+0x6c>
 8008b36:	bf00      	nop
 8008b38:	0800b78c 	.word	0x0800b78c
 8008b3c:	0800b7ac 	.word	0x0800b7ac
 8008b40:	0800b76c 	.word	0x0800b76c

08008b44 <__swsetup_r>:
 8008b44:	4b32      	ldr	r3, [pc, #200]	; (8008c10 <__swsetup_r+0xcc>)
 8008b46:	b570      	push	{r4, r5, r6, lr}
 8008b48:	681d      	ldr	r5, [r3, #0]
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	b125      	cbz	r5, 8008b5a <__swsetup_r+0x16>
 8008b50:	69ab      	ldr	r3, [r5, #24]
 8008b52:	b913      	cbnz	r3, 8008b5a <__swsetup_r+0x16>
 8008b54:	4628      	mov	r0, r5
 8008b56:	f000 fffb 	bl	8009b50 <__sinit>
 8008b5a:	4b2e      	ldr	r3, [pc, #184]	; (8008c14 <__swsetup_r+0xd0>)
 8008b5c:	429c      	cmp	r4, r3
 8008b5e:	d10f      	bne.n	8008b80 <__swsetup_r+0x3c>
 8008b60:	686c      	ldr	r4, [r5, #4]
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b68:	0719      	lsls	r1, r3, #28
 8008b6a:	d42c      	bmi.n	8008bc6 <__swsetup_r+0x82>
 8008b6c:	06dd      	lsls	r5, r3, #27
 8008b6e:	d411      	bmi.n	8008b94 <__swsetup_r+0x50>
 8008b70:	2309      	movs	r3, #9
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	e03e      	b.n	8008bfe <__swsetup_r+0xba>
 8008b80:	4b25      	ldr	r3, [pc, #148]	; (8008c18 <__swsetup_r+0xd4>)
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d101      	bne.n	8008b8a <__swsetup_r+0x46>
 8008b86:	68ac      	ldr	r4, [r5, #8]
 8008b88:	e7eb      	b.n	8008b62 <__swsetup_r+0x1e>
 8008b8a:	4b24      	ldr	r3, [pc, #144]	; (8008c1c <__swsetup_r+0xd8>)
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	bf08      	it	eq
 8008b90:	68ec      	ldreq	r4, [r5, #12]
 8008b92:	e7e6      	b.n	8008b62 <__swsetup_r+0x1e>
 8008b94:	0758      	lsls	r0, r3, #29
 8008b96:	d512      	bpl.n	8008bbe <__swsetup_r+0x7a>
 8008b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b9a:	b141      	cbz	r1, 8008bae <__swsetup_r+0x6a>
 8008b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba0:	4299      	cmp	r1, r3
 8008ba2:	d002      	beq.n	8008baa <__swsetup_r+0x66>
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f002 f93f 	bl	800ae28 <_free_r>
 8008baa:	2300      	movs	r3, #0
 8008bac:	6363      	str	r3, [r4, #52]	; 0x34
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	f043 0308 	orr.w	r3, r3, #8
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	b94b      	cbnz	r3, 8008bde <__swsetup_r+0x9a>
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd4:	d003      	beq.n	8008bde <__swsetup_r+0x9a>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f001 fbe9 	bl	800a3b0 <__smakebuf_r>
 8008bde:	89a0      	ldrh	r0, [r4, #12]
 8008be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008be4:	f010 0301 	ands.w	r3, r0, #1
 8008be8:	d00a      	beq.n	8008c00 <__swsetup_r+0xbc>
 8008bea:	2300      	movs	r3, #0
 8008bec:	60a3      	str	r3, [r4, #8]
 8008bee:	6963      	ldr	r3, [r4, #20]
 8008bf0:	425b      	negs	r3, r3
 8008bf2:	61a3      	str	r3, [r4, #24]
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	b943      	cbnz	r3, 8008c0a <__swsetup_r+0xc6>
 8008bf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bfc:	d1ba      	bne.n	8008b74 <__swsetup_r+0x30>
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	0781      	lsls	r1, r0, #30
 8008c02:	bf58      	it	pl
 8008c04:	6963      	ldrpl	r3, [r4, #20]
 8008c06:	60a3      	str	r3, [r4, #8]
 8008c08:	e7f4      	b.n	8008bf4 <__swsetup_r+0xb0>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e7f7      	b.n	8008bfe <__swsetup_r+0xba>
 8008c0e:	bf00      	nop
 8008c10:	2000000c 	.word	0x2000000c
 8008c14:	0800b78c 	.word	0x0800b78c
 8008c18:	0800b7ac 	.word	0x0800b7ac
 8008c1c:	0800b76c 	.word	0x0800b76c

08008c20 <quorem>:
 8008c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	6903      	ldr	r3, [r0, #16]
 8008c26:	690c      	ldr	r4, [r1, #16]
 8008c28:	4607      	mov	r7, r0
 8008c2a:	42a3      	cmp	r3, r4
 8008c2c:	f2c0 8083 	blt.w	8008d36 <quorem+0x116>
 8008c30:	3c01      	subs	r4, #1
 8008c32:	f100 0514 	add.w	r5, r0, #20
 8008c36:	f101 0814 	add.w	r8, r1, #20
 8008c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c58:	d332      	bcc.n	8008cc0 <quorem+0xa0>
 8008c5a:	f04f 0e00 	mov.w	lr, #0
 8008c5e:	4640      	mov	r0, r8
 8008c60:	46ac      	mov	ip, r5
 8008c62:	46f2      	mov	sl, lr
 8008c64:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c68:	b293      	uxth	r3, r2
 8008c6a:	fb06 e303 	mla	r3, r6, r3, lr
 8008c6e:	0c12      	lsrs	r2, r2, #16
 8008c70:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c74:	fb06 e202 	mla	r2, r6, r2, lr
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	ebaa 0303 	sub.w	r3, sl, r3
 8008c7e:	f8dc a000 	ldr.w	sl, [ip]
 8008c82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c86:	fa1f fa8a 	uxth.w	sl, sl
 8008c8a:	4453      	add	r3, sl
 8008c8c:	fa1f fa82 	uxth.w	sl, r2
 8008c90:	f8dc 2000 	ldr.w	r2, [ip]
 8008c94:	4581      	cmp	r9, r0
 8008c96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008c9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ca4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ca8:	f84c 3b04 	str.w	r3, [ip], #4
 8008cac:	d2da      	bcs.n	8008c64 <quorem+0x44>
 8008cae:	f855 300b 	ldr.w	r3, [r5, fp]
 8008cb2:	b92b      	cbnz	r3, 8008cc0 <quorem+0xa0>
 8008cb4:	9b01      	ldr	r3, [sp, #4]
 8008cb6:	3b04      	subs	r3, #4
 8008cb8:	429d      	cmp	r5, r3
 8008cba:	461a      	mov	r2, r3
 8008cbc:	d32f      	bcc.n	8008d1e <quorem+0xfe>
 8008cbe:	613c      	str	r4, [r7, #16]
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f001 feaf 	bl	800aa24 <__mcmp>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	db25      	blt.n	8008d16 <quorem+0xf6>
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f04f 0c00 	mov.w	ip, #0
 8008cd0:	3601      	adds	r6, #1
 8008cd2:	f858 1b04 	ldr.w	r1, [r8], #4
 8008cd6:	f8d0 e000 	ldr.w	lr, [r0]
 8008cda:	b28b      	uxth	r3, r1
 8008cdc:	ebac 0303 	sub.w	r3, ip, r3
 8008ce0:	fa1f f28e 	uxth.w	r2, lr
 8008ce4:	4413      	add	r3, r2
 8008ce6:	0c0a      	lsrs	r2, r1, #16
 8008ce8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cf6:	45c1      	cmp	r9, r8
 8008cf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008cfc:	f840 3b04 	str.w	r3, [r0], #4
 8008d00:	d2e7      	bcs.n	8008cd2 <quorem+0xb2>
 8008d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d0a:	b922      	cbnz	r2, 8008d16 <quorem+0xf6>
 8008d0c:	3b04      	subs	r3, #4
 8008d0e:	429d      	cmp	r5, r3
 8008d10:	461a      	mov	r2, r3
 8008d12:	d30a      	bcc.n	8008d2a <quorem+0x10a>
 8008d14:	613c      	str	r4, [r7, #16]
 8008d16:	4630      	mov	r0, r6
 8008d18:	b003      	add	sp, #12
 8008d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	3b04      	subs	r3, #4
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	d1cb      	bne.n	8008cbe <quorem+0x9e>
 8008d26:	3c01      	subs	r4, #1
 8008d28:	e7c6      	b.n	8008cb8 <quorem+0x98>
 8008d2a:	6812      	ldr	r2, [r2, #0]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	d1f0      	bne.n	8008d14 <quorem+0xf4>
 8008d32:	3c01      	subs	r4, #1
 8008d34:	e7eb      	b.n	8008d0e <quorem+0xee>
 8008d36:	2000      	movs	r0, #0
 8008d38:	e7ee      	b.n	8008d18 <quorem+0xf8>
 8008d3a:	0000      	movs	r0, r0
 8008d3c:	0000      	movs	r0, r0
	...

08008d40 <_dtoa_r>:
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	4616      	mov	r6, r2
 8008d46:	461f      	mov	r7, r3
 8008d48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008d4a:	b099      	sub	sp, #100	; 0x64
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008d52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008d56:	b974      	cbnz	r4, 8008d76 <_dtoa_r+0x36>
 8008d58:	2010      	movs	r0, #16
 8008d5a:	f001 fb69 	bl	800a430 <malloc>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	6268      	str	r0, [r5, #36]	; 0x24
 8008d62:	b920      	cbnz	r0, 8008d6e <_dtoa_r+0x2e>
 8008d64:	21ea      	movs	r1, #234	; 0xea
 8008d66:	4bae      	ldr	r3, [pc, #696]	; (8009020 <_dtoa_r+0x2e0>)
 8008d68:	48ae      	ldr	r0, [pc, #696]	; (8009024 <_dtoa_r+0x2e4>)
 8008d6a:	f002 fae5 	bl	800b338 <__assert_func>
 8008d6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d72:	6004      	str	r4, [r0, #0]
 8008d74:	60c4      	str	r4, [r0, #12]
 8008d76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d78:	6819      	ldr	r1, [r3, #0]
 8008d7a:	b151      	cbz	r1, 8008d92 <_dtoa_r+0x52>
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4093      	lsls	r3, r2
 8008d82:	604a      	str	r2, [r1, #4]
 8008d84:	608b      	str	r3, [r1, #8]
 8008d86:	4628      	mov	r0, r5
 8008d88:	f001 fbc8 	bl	800a51c <_Bfree>
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	1e3b      	subs	r3, r7, #0
 8008d94:	bfaf      	iteee	ge
 8008d96:	2300      	movge	r3, #0
 8008d98:	2201      	movlt	r2, #1
 8008d9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d9e:	9305      	strlt	r3, [sp, #20]
 8008da0:	bfa8      	it	ge
 8008da2:	f8c8 3000 	strge.w	r3, [r8]
 8008da6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008daa:	4b9f      	ldr	r3, [pc, #636]	; (8009028 <_dtoa_r+0x2e8>)
 8008dac:	bfb8      	it	lt
 8008dae:	f8c8 2000 	strlt.w	r2, [r8]
 8008db2:	ea33 0309 	bics.w	r3, r3, r9
 8008db6:	d119      	bne.n	8008dec <_dtoa_r+0xac>
 8008db8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008dbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dc4:	4333      	orrs	r3, r6
 8008dc6:	f000 8580 	beq.w	80098ca <_dtoa_r+0xb8a>
 8008dca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dcc:	b953      	cbnz	r3, 8008de4 <_dtoa_r+0xa4>
 8008dce:	4b97      	ldr	r3, [pc, #604]	; (800902c <_dtoa_r+0x2ec>)
 8008dd0:	e022      	b.n	8008e18 <_dtoa_r+0xd8>
 8008dd2:	4b97      	ldr	r3, [pc, #604]	; (8009030 <_dtoa_r+0x2f0>)
 8008dd4:	9308      	str	r3, [sp, #32]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	9808      	ldr	r0, [sp, #32]
 8008dde:	b019      	add	sp, #100	; 0x64
 8008de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de4:	4b91      	ldr	r3, [pc, #580]	; (800902c <_dtoa_r+0x2ec>)
 8008de6:	9308      	str	r3, [sp, #32]
 8008de8:	3303      	adds	r3, #3
 8008dea:	e7f5      	b.n	8008dd8 <_dtoa_r+0x98>
 8008dec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008df0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008df4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f7f7 fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8008e00:	4680      	mov	r8, r0
 8008e02:	b158      	cbz	r0, 8008e1c <_dtoa_r+0xdc>
 8008e04:	2301      	movs	r3, #1
 8008e06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8559 	beq.w	80098c4 <_dtoa_r+0xb84>
 8008e12:	4888      	ldr	r0, [pc, #544]	; (8009034 <_dtoa_r+0x2f4>)
 8008e14:	6018      	str	r0, [r3, #0]
 8008e16:	1e43      	subs	r3, r0, #1
 8008e18:	9308      	str	r3, [sp, #32]
 8008e1a:	e7df      	b.n	8008ddc <_dtoa_r+0x9c>
 8008e1c:	ab16      	add	r3, sp, #88	; 0x58
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	ab17      	add	r3, sp, #92	; 0x5c
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	4628      	mov	r0, r5
 8008e26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e2a:	f001 ff21 	bl	800ac70 <__d2b>
 8008e2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008e32:	4682      	mov	sl, r0
 8008e34:	2c00      	cmp	r4, #0
 8008e36:	d07e      	beq.n	8008f36 <_dtoa_r+0x1f6>
 8008e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e3e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008e42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008e4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008e4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008e52:	2200      	movs	r2, #0
 8008e54:	4b78      	ldr	r3, [pc, #480]	; (8009038 <_dtoa_r+0x2f8>)
 8008e56:	f7f7 f987 	bl	8000168 <__aeabi_dsub>
 8008e5a:	a36b      	add	r3, pc, #428	; (adr r3, 8009008 <_dtoa_r+0x2c8>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f7f7 fb3a 	bl	80004d8 <__aeabi_dmul>
 8008e64:	a36a      	add	r3, pc, #424	; (adr r3, 8009010 <_dtoa_r+0x2d0>)
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	f7f7 f97f 	bl	800016c <__adddf3>
 8008e6e:	4606      	mov	r6, r0
 8008e70:	4620      	mov	r0, r4
 8008e72:	460f      	mov	r7, r1
 8008e74:	f7f7 fac6 	bl	8000404 <__aeabi_i2d>
 8008e78:	a367      	add	r3, pc, #412	; (adr r3, 8009018 <_dtoa_r+0x2d8>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fb2b 	bl	80004d8 <__aeabi_dmul>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4630      	mov	r0, r6
 8008e88:	4639      	mov	r1, r7
 8008e8a:	f7f7 f96f 	bl	800016c <__adddf3>
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460f      	mov	r7, r1
 8008e92:	f7f7 fdd1 	bl	8000a38 <__aeabi_d2iz>
 8008e96:	2200      	movs	r2, #0
 8008e98:	4681      	mov	r9, r0
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	f7f7 fd8c 	bl	80009bc <__aeabi_dcmplt>
 8008ea4:	b148      	cbz	r0, 8008eba <_dtoa_r+0x17a>
 8008ea6:	4648      	mov	r0, r9
 8008ea8:	f7f7 faac 	bl	8000404 <__aeabi_i2d>
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	f7f7 fd7a 	bl	80009a8 <__aeabi_dcmpeq>
 8008eb4:	b908      	cbnz	r0, 8008eba <_dtoa_r+0x17a>
 8008eb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8008eba:	f1b9 0f16 	cmp.w	r9, #22
 8008ebe:	d857      	bhi.n	8008f70 <_dtoa_r+0x230>
 8008ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ec4:	4b5d      	ldr	r3, [pc, #372]	; (800903c <_dtoa_r+0x2fc>)
 8008ec6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	f7f7 fd75 	bl	80009bc <__aeabi_dcmplt>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d04e      	beq.n	8008f74 <_dtoa_r+0x234>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f109 39ff 	add.w	r9, r9, #4294967295
 8008edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ede:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ee0:	1b1c      	subs	r4, r3, r4
 8008ee2:	1e63      	subs	r3, r4, #1
 8008ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee6:	bf49      	itett	mi
 8008ee8:	f1c4 0301 	rsbmi	r3, r4, #1
 8008eec:	2300      	movpl	r3, #0
 8008eee:	9306      	strmi	r3, [sp, #24]
 8008ef0:	2300      	movmi	r3, #0
 8008ef2:	bf54      	ite	pl
 8008ef4:	9306      	strpl	r3, [sp, #24]
 8008ef6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008ef8:	f1b9 0f00 	cmp.w	r9, #0
 8008efc:	db3c      	blt.n	8008f78 <_dtoa_r+0x238>
 8008efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f00:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008f04:	444b      	add	r3, r9
 8008f06:	9309      	str	r3, [sp, #36]	; 0x24
 8008f08:	2300      	movs	r3, #0
 8008f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f0e:	2b09      	cmp	r3, #9
 8008f10:	d86c      	bhi.n	8008fec <_dtoa_r+0x2ac>
 8008f12:	2b05      	cmp	r3, #5
 8008f14:	bfc4      	itt	gt
 8008f16:	3b04      	subgt	r3, #4
 8008f18:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008f1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f1c:	bfc8      	it	gt
 8008f1e:	2400      	movgt	r4, #0
 8008f20:	f1a3 0302 	sub.w	r3, r3, #2
 8008f24:	bfd8      	it	le
 8008f26:	2401      	movle	r4, #1
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	f200 808b 	bhi.w	8009044 <_dtoa_r+0x304>
 8008f2e:	e8df f003 	tbb	[pc, r3]
 8008f32:	4f2d      	.short	0x4f2d
 8008f34:	5b4d      	.short	0x5b4d
 8008f36:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008f3a:	441c      	add	r4, r3
 8008f3c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008f40:	2b20      	cmp	r3, #32
 8008f42:	bfc3      	ittte	gt
 8008f44:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f48:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008f4c:	fa09 f303 	lslgt.w	r3, r9, r3
 8008f50:	f1c3 0320 	rsble	r3, r3, #32
 8008f54:	bfc6      	itte	gt
 8008f56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f5a:	4318      	orrgt	r0, r3
 8008f5c:	fa06 f003 	lslle.w	r0, r6, r3
 8008f60:	f7f7 fa40 	bl	80003e4 <__aeabi_ui2d>
 8008f64:	2301      	movs	r3, #1
 8008f66:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008f6a:	3c01      	subs	r4, #1
 8008f6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f6e:	e770      	b.n	8008e52 <_dtoa_r+0x112>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e7b3      	b.n	8008edc <_dtoa_r+0x19c>
 8008f74:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f76:	e7b2      	b.n	8008ede <_dtoa_r+0x19e>
 8008f78:	9b06      	ldr	r3, [sp, #24]
 8008f7a:	eba3 0309 	sub.w	r3, r3, r9
 8008f7e:	9306      	str	r3, [sp, #24]
 8008f80:	f1c9 0300 	rsb	r3, r9, #0
 8008f84:	930a      	str	r3, [sp, #40]	; 0x28
 8008f86:	2300      	movs	r3, #0
 8008f88:	930e      	str	r3, [sp, #56]	; 0x38
 8008f8a:	e7bf      	b.n	8008f0c <_dtoa_r+0x1cc>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	dc59      	bgt.n	800904a <_dtoa_r+0x30a>
 8008f96:	f04f 0b01 	mov.w	fp, #1
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	f8cd b008 	str.w	fp, [sp, #8]
 8008fa0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008fa8:	6042      	str	r2, [r0, #4]
 8008faa:	2204      	movs	r2, #4
 8008fac:	f102 0614 	add.w	r6, r2, #20
 8008fb0:	429e      	cmp	r6, r3
 8008fb2:	6841      	ldr	r1, [r0, #4]
 8008fb4:	d94f      	bls.n	8009056 <_dtoa_r+0x316>
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f001 fa70 	bl	800a49c <_Balloc>
 8008fbc:	9008      	str	r0, [sp, #32]
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d14d      	bne.n	800905e <_dtoa_r+0x31e>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fc8:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <_dtoa_r+0x300>)
 8008fca:	e6cd      	b.n	8008d68 <_dtoa_r+0x28>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e7de      	b.n	8008f8e <_dtoa_r+0x24e>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fd6:	eb09 0b03 	add.w	fp, r9, r3
 8008fda:	f10b 0301 	add.w	r3, fp, #1
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	9302      	str	r3, [sp, #8]
 8008fe2:	bfb8      	it	lt
 8008fe4:	2301      	movlt	r3, #1
 8008fe6:	e7dd      	b.n	8008fa4 <_dtoa_r+0x264>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e7f2      	b.n	8008fd2 <_dtoa_r+0x292>
 8008fec:	2401      	movs	r4, #1
 8008fee:	2300      	movs	r3, #0
 8008ff0:	940b      	str	r4, [sp, #44]	; 0x2c
 8008ff2:	9322      	str	r3, [sp, #136]	; 0x88
 8008ff4:	f04f 3bff 	mov.w	fp, #4294967295
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2312      	movs	r3, #18
 8008ffc:	f8cd b008 	str.w	fp, [sp, #8]
 8009000:	9223      	str	r2, [sp, #140]	; 0x8c
 8009002:	e7cf      	b.n	8008fa4 <_dtoa_r+0x264>
 8009004:	f3af 8000 	nop.w
 8009008:	636f4361 	.word	0x636f4361
 800900c:	3fd287a7 	.word	0x3fd287a7
 8009010:	8b60c8b3 	.word	0x8b60c8b3
 8009014:	3fc68a28 	.word	0x3fc68a28
 8009018:	509f79fb 	.word	0x509f79fb
 800901c:	3fd34413 	.word	0x3fd34413
 8009020:	0800b6e5 	.word	0x0800b6e5
 8009024:	0800b6fc 	.word	0x0800b6fc
 8009028:	7ff00000 	.word	0x7ff00000
 800902c:	0800b6e1 	.word	0x0800b6e1
 8009030:	0800b6d8 	.word	0x0800b6d8
 8009034:	0800b661 	.word	0x0800b661
 8009038:	3ff80000 	.word	0x3ff80000
 800903c:	0800b8d8 	.word	0x0800b8d8
 8009040:	0800b75b 	.word	0x0800b75b
 8009044:	2301      	movs	r3, #1
 8009046:	930b      	str	r3, [sp, #44]	; 0x2c
 8009048:	e7d4      	b.n	8008ff4 <_dtoa_r+0x2b4>
 800904a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800904e:	465b      	mov	r3, fp
 8009050:	f8cd b008 	str.w	fp, [sp, #8]
 8009054:	e7a6      	b.n	8008fa4 <_dtoa_r+0x264>
 8009056:	3101      	adds	r1, #1
 8009058:	6041      	str	r1, [r0, #4]
 800905a:	0052      	lsls	r2, r2, #1
 800905c:	e7a6      	b.n	8008fac <_dtoa_r+0x26c>
 800905e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009060:	9a08      	ldr	r2, [sp, #32]
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	9b02      	ldr	r3, [sp, #8]
 8009066:	2b0e      	cmp	r3, #14
 8009068:	f200 80a8 	bhi.w	80091bc <_dtoa_r+0x47c>
 800906c:	2c00      	cmp	r4, #0
 800906e:	f000 80a5 	beq.w	80091bc <_dtoa_r+0x47c>
 8009072:	f1b9 0f00 	cmp.w	r9, #0
 8009076:	dd34      	ble.n	80090e2 <_dtoa_r+0x3a2>
 8009078:	4a9a      	ldr	r2, [pc, #616]	; (80092e4 <_dtoa_r+0x5a4>)
 800907a:	f009 030f 	and.w	r3, r9, #15
 800907e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009082:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009086:	e9d3 3400 	ldrd	r3, r4, [r3]
 800908a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800908e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009092:	d016      	beq.n	80090c2 <_dtoa_r+0x382>
 8009094:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009098:	4b93      	ldr	r3, [pc, #588]	; (80092e8 <_dtoa_r+0x5a8>)
 800909a:	2703      	movs	r7, #3
 800909c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090a0:	f7f7 fb44 	bl	800072c <__aeabi_ddiv>
 80090a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090a8:	f004 040f 	and.w	r4, r4, #15
 80090ac:	4e8e      	ldr	r6, [pc, #568]	; (80092e8 <_dtoa_r+0x5a8>)
 80090ae:	b954      	cbnz	r4, 80090c6 <_dtoa_r+0x386>
 80090b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090b8:	f7f7 fb38 	bl	800072c <__aeabi_ddiv>
 80090bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090c0:	e029      	b.n	8009116 <_dtoa_r+0x3d6>
 80090c2:	2702      	movs	r7, #2
 80090c4:	e7f2      	b.n	80090ac <_dtoa_r+0x36c>
 80090c6:	07e1      	lsls	r1, r4, #31
 80090c8:	d508      	bpl.n	80090dc <_dtoa_r+0x39c>
 80090ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090d2:	f7f7 fa01 	bl	80004d8 <__aeabi_dmul>
 80090d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090da:	3701      	adds	r7, #1
 80090dc:	1064      	asrs	r4, r4, #1
 80090de:	3608      	adds	r6, #8
 80090e0:	e7e5      	b.n	80090ae <_dtoa_r+0x36e>
 80090e2:	f000 80a5 	beq.w	8009230 <_dtoa_r+0x4f0>
 80090e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090ea:	f1c9 0400 	rsb	r4, r9, #0
 80090ee:	4b7d      	ldr	r3, [pc, #500]	; (80092e4 <_dtoa_r+0x5a4>)
 80090f0:	f004 020f 	and.w	r2, r4, #15
 80090f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f7f7 f9ec 	bl	80004d8 <__aeabi_dmul>
 8009100:	2702      	movs	r7, #2
 8009102:	2300      	movs	r3, #0
 8009104:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009108:	4e77      	ldr	r6, [pc, #476]	; (80092e8 <_dtoa_r+0x5a8>)
 800910a:	1124      	asrs	r4, r4, #4
 800910c:	2c00      	cmp	r4, #0
 800910e:	f040 8084 	bne.w	800921a <_dtoa_r+0x4da>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1d2      	bne.n	80090bc <_dtoa_r+0x37c>
 8009116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 808b 	beq.w	8009234 <_dtoa_r+0x4f4>
 800911e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009122:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009126:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800912a:	2200      	movs	r2, #0
 800912c:	4b6f      	ldr	r3, [pc, #444]	; (80092ec <_dtoa_r+0x5ac>)
 800912e:	f7f7 fc45 	bl	80009bc <__aeabi_dcmplt>
 8009132:	2800      	cmp	r0, #0
 8009134:	d07e      	beq.n	8009234 <_dtoa_r+0x4f4>
 8009136:	9b02      	ldr	r3, [sp, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d07b      	beq.n	8009234 <_dtoa_r+0x4f4>
 800913c:	f1bb 0f00 	cmp.w	fp, #0
 8009140:	dd38      	ble.n	80091b4 <_dtoa_r+0x474>
 8009142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009146:	2200      	movs	r2, #0
 8009148:	4b69      	ldr	r3, [pc, #420]	; (80092f0 <_dtoa_r+0x5b0>)
 800914a:	f7f7 f9c5 	bl	80004d8 <__aeabi_dmul>
 800914e:	465c      	mov	r4, fp
 8009150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009154:	f109 38ff 	add.w	r8, r9, #4294967295
 8009158:	3701      	adds	r7, #1
 800915a:	4638      	mov	r0, r7
 800915c:	f7f7 f952 	bl	8000404 <__aeabi_i2d>
 8009160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009164:	f7f7 f9b8 	bl	80004d8 <__aeabi_dmul>
 8009168:	2200      	movs	r2, #0
 800916a:	4b62      	ldr	r3, [pc, #392]	; (80092f4 <_dtoa_r+0x5b4>)
 800916c:	f7f6 fffe 	bl	800016c <__adddf3>
 8009170:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009174:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009178:	9611      	str	r6, [sp, #68]	; 0x44
 800917a:	2c00      	cmp	r4, #0
 800917c:	d15d      	bne.n	800923a <_dtoa_r+0x4fa>
 800917e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009182:	2200      	movs	r2, #0
 8009184:	4b5c      	ldr	r3, [pc, #368]	; (80092f8 <_dtoa_r+0x5b8>)
 8009186:	f7f6 ffef 	bl	8000168 <__aeabi_dsub>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009192:	4633      	mov	r3, r6
 8009194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009196:	f7f7 fc2f 	bl	80009f8 <__aeabi_dcmpgt>
 800919a:	2800      	cmp	r0, #0
 800919c:	f040 829e 	bne.w	80096dc <_dtoa_r+0x99c>
 80091a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80091aa:	f7f7 fc07 	bl	80009bc <__aeabi_dcmplt>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	f040 8292 	bne.w	80096d8 <_dtoa_r+0x998>
 80091b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80091b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80091bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f2c0 8153 	blt.w	800946a <_dtoa_r+0x72a>
 80091c4:	f1b9 0f0e 	cmp.w	r9, #14
 80091c8:	f300 814f 	bgt.w	800946a <_dtoa_r+0x72a>
 80091cc:	4b45      	ldr	r3, [pc, #276]	; (80092e4 <_dtoa_r+0x5a4>)
 80091ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80091d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80091da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f280 80db 	bge.w	8009398 <_dtoa_r+0x658>
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f300 80d7 	bgt.w	8009398 <_dtoa_r+0x658>
 80091ea:	f040 8274 	bne.w	80096d6 <_dtoa_r+0x996>
 80091ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091f2:	2200      	movs	r2, #0
 80091f4:	4b40      	ldr	r3, [pc, #256]	; (80092f8 <_dtoa_r+0x5b8>)
 80091f6:	f7f7 f96f 	bl	80004d8 <__aeabi_dmul>
 80091fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091fe:	f7f7 fbf1 	bl	80009e4 <__aeabi_dcmpge>
 8009202:	9c02      	ldr	r4, [sp, #8]
 8009204:	4626      	mov	r6, r4
 8009206:	2800      	cmp	r0, #0
 8009208:	f040 824a 	bne.w	80096a0 <_dtoa_r+0x960>
 800920c:	2331      	movs	r3, #49	; 0x31
 800920e:	9f08      	ldr	r7, [sp, #32]
 8009210:	f109 0901 	add.w	r9, r9, #1
 8009214:	f807 3b01 	strb.w	r3, [r7], #1
 8009218:	e246      	b.n	80096a8 <_dtoa_r+0x968>
 800921a:	07e2      	lsls	r2, r4, #31
 800921c:	d505      	bpl.n	800922a <_dtoa_r+0x4ea>
 800921e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009222:	f7f7 f959 	bl	80004d8 <__aeabi_dmul>
 8009226:	2301      	movs	r3, #1
 8009228:	3701      	adds	r7, #1
 800922a:	1064      	asrs	r4, r4, #1
 800922c:	3608      	adds	r6, #8
 800922e:	e76d      	b.n	800910c <_dtoa_r+0x3cc>
 8009230:	2702      	movs	r7, #2
 8009232:	e770      	b.n	8009116 <_dtoa_r+0x3d6>
 8009234:	46c8      	mov	r8, r9
 8009236:	9c02      	ldr	r4, [sp, #8]
 8009238:	e78f      	b.n	800915a <_dtoa_r+0x41a>
 800923a:	9908      	ldr	r1, [sp, #32]
 800923c:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <_dtoa_r+0x5a4>)
 800923e:	4421      	add	r1, r4
 8009240:	9112      	str	r1, [sp, #72]	; 0x48
 8009242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009244:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009248:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800924c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009250:	2900      	cmp	r1, #0
 8009252:	d055      	beq.n	8009300 <_dtoa_r+0x5c0>
 8009254:	2000      	movs	r0, #0
 8009256:	4929      	ldr	r1, [pc, #164]	; (80092fc <_dtoa_r+0x5bc>)
 8009258:	f7f7 fa68 	bl	800072c <__aeabi_ddiv>
 800925c:	463b      	mov	r3, r7
 800925e:	4632      	mov	r2, r6
 8009260:	f7f6 ff82 	bl	8000168 <__aeabi_dsub>
 8009264:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009268:	9f08      	ldr	r7, [sp, #32]
 800926a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800926e:	f7f7 fbe3 	bl	8000a38 <__aeabi_d2iz>
 8009272:	4604      	mov	r4, r0
 8009274:	f7f7 f8c6 	bl	8000404 <__aeabi_i2d>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009280:	f7f6 ff72 	bl	8000168 <__aeabi_dsub>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	3430      	adds	r4, #48	; 0x30
 800928a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800928e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009292:	f807 4b01 	strb.w	r4, [r7], #1
 8009296:	f7f7 fb91 	bl	80009bc <__aeabi_dcmplt>
 800929a:	2800      	cmp	r0, #0
 800929c:	d174      	bne.n	8009388 <_dtoa_r+0x648>
 800929e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a2:	2000      	movs	r0, #0
 80092a4:	4911      	ldr	r1, [pc, #68]	; (80092ec <_dtoa_r+0x5ac>)
 80092a6:	f7f6 ff5f 	bl	8000168 <__aeabi_dsub>
 80092aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80092ae:	f7f7 fb85 	bl	80009bc <__aeabi_dcmplt>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	f040 80b6 	bne.w	8009424 <_dtoa_r+0x6e4>
 80092b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092ba:	429f      	cmp	r7, r3
 80092bc:	f43f af7a 	beq.w	80091b4 <_dtoa_r+0x474>
 80092c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092c4:	2200      	movs	r2, #0
 80092c6:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <_dtoa_r+0x5b0>)
 80092c8:	f7f7 f906 	bl	80004d8 <__aeabi_dmul>
 80092cc:	2200      	movs	r2, #0
 80092ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092d6:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <_dtoa_r+0x5b0>)
 80092d8:	f7f7 f8fe 	bl	80004d8 <__aeabi_dmul>
 80092dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092e0:	e7c3      	b.n	800926a <_dtoa_r+0x52a>
 80092e2:	bf00      	nop
 80092e4:	0800b8d8 	.word	0x0800b8d8
 80092e8:	0800b8b0 	.word	0x0800b8b0
 80092ec:	3ff00000 	.word	0x3ff00000
 80092f0:	40240000 	.word	0x40240000
 80092f4:	401c0000 	.word	0x401c0000
 80092f8:	40140000 	.word	0x40140000
 80092fc:	3fe00000 	.word	0x3fe00000
 8009300:	4630      	mov	r0, r6
 8009302:	4639      	mov	r1, r7
 8009304:	f7f7 f8e8 	bl	80004d8 <__aeabi_dmul>
 8009308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800930a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800930e:	9c08      	ldr	r4, [sp, #32]
 8009310:	9314      	str	r3, [sp, #80]	; 0x50
 8009312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009316:	f7f7 fb8f 	bl	8000a38 <__aeabi_d2iz>
 800931a:	9015      	str	r0, [sp, #84]	; 0x54
 800931c:	f7f7 f872 	bl	8000404 <__aeabi_i2d>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009328:	f7f6 ff1e 	bl	8000168 <__aeabi_dsub>
 800932c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800932e:	4606      	mov	r6, r0
 8009330:	3330      	adds	r3, #48	; 0x30
 8009332:	f804 3b01 	strb.w	r3, [r4], #1
 8009336:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009338:	460f      	mov	r7, r1
 800933a:	429c      	cmp	r4, r3
 800933c:	f04f 0200 	mov.w	r2, #0
 8009340:	d124      	bne.n	800938c <_dtoa_r+0x64c>
 8009342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009346:	4bb3      	ldr	r3, [pc, #716]	; (8009614 <_dtoa_r+0x8d4>)
 8009348:	f7f6 ff10 	bl	800016c <__adddf3>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4630      	mov	r0, r6
 8009352:	4639      	mov	r1, r7
 8009354:	f7f7 fb50 	bl	80009f8 <__aeabi_dcmpgt>
 8009358:	2800      	cmp	r0, #0
 800935a:	d162      	bne.n	8009422 <_dtoa_r+0x6e2>
 800935c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009360:	2000      	movs	r0, #0
 8009362:	49ac      	ldr	r1, [pc, #688]	; (8009614 <_dtoa_r+0x8d4>)
 8009364:	f7f6 ff00 	bl	8000168 <__aeabi_dsub>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4630      	mov	r0, r6
 800936e:	4639      	mov	r1, r7
 8009370:	f7f7 fb24 	bl	80009bc <__aeabi_dcmplt>
 8009374:	2800      	cmp	r0, #0
 8009376:	f43f af1d 	beq.w	80091b4 <_dtoa_r+0x474>
 800937a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800937c:	1e7b      	subs	r3, r7, #1
 800937e:	9314      	str	r3, [sp, #80]	; 0x50
 8009380:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009384:	2b30      	cmp	r3, #48	; 0x30
 8009386:	d0f8      	beq.n	800937a <_dtoa_r+0x63a>
 8009388:	46c1      	mov	r9, r8
 800938a:	e03a      	b.n	8009402 <_dtoa_r+0x6c2>
 800938c:	4ba2      	ldr	r3, [pc, #648]	; (8009618 <_dtoa_r+0x8d8>)
 800938e:	f7f7 f8a3 	bl	80004d8 <__aeabi_dmul>
 8009392:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009396:	e7bc      	b.n	8009312 <_dtoa_r+0x5d2>
 8009398:	9f08      	ldr	r7, [sp, #32]
 800939a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800939e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a2:	f7f7 f9c3 	bl	800072c <__aeabi_ddiv>
 80093a6:	f7f7 fb47 	bl	8000a38 <__aeabi_d2iz>
 80093aa:	4604      	mov	r4, r0
 80093ac:	f7f7 f82a 	bl	8000404 <__aeabi_i2d>
 80093b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093b4:	f7f7 f890 	bl	80004d8 <__aeabi_dmul>
 80093b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80093bc:	460b      	mov	r3, r1
 80093be:	4602      	mov	r2, r0
 80093c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093c4:	f7f6 fed0 	bl	8000168 <__aeabi_dsub>
 80093c8:	f807 6b01 	strb.w	r6, [r7], #1
 80093cc:	9e08      	ldr	r6, [sp, #32]
 80093ce:	9b02      	ldr	r3, [sp, #8]
 80093d0:	1bbe      	subs	r6, r7, r6
 80093d2:	42b3      	cmp	r3, r6
 80093d4:	d13a      	bne.n	800944c <_dtoa_r+0x70c>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	f7f6 fec7 	bl	800016c <__adddf3>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093ea:	f7f7 fb05 	bl	80009f8 <__aeabi_dcmpgt>
 80093ee:	bb58      	cbnz	r0, 8009448 <_dtoa_r+0x708>
 80093f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f8:	f7f7 fad6 	bl	80009a8 <__aeabi_dcmpeq>
 80093fc:	b108      	cbz	r0, 8009402 <_dtoa_r+0x6c2>
 80093fe:	07e1      	lsls	r1, r4, #31
 8009400:	d422      	bmi.n	8009448 <_dtoa_r+0x708>
 8009402:	4628      	mov	r0, r5
 8009404:	4651      	mov	r1, sl
 8009406:	f001 f889 	bl	800a51c <_Bfree>
 800940a:	2300      	movs	r3, #0
 800940c:	703b      	strb	r3, [r7, #0]
 800940e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009410:	f109 0001 	add.w	r0, r9, #1
 8009414:	6018      	str	r0, [r3, #0]
 8009416:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009418:	2b00      	cmp	r3, #0
 800941a:	f43f acdf 	beq.w	8008ddc <_dtoa_r+0x9c>
 800941e:	601f      	str	r7, [r3, #0]
 8009420:	e4dc      	b.n	8008ddc <_dtoa_r+0x9c>
 8009422:	4627      	mov	r7, r4
 8009424:	463b      	mov	r3, r7
 8009426:	461f      	mov	r7, r3
 8009428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800942c:	2a39      	cmp	r2, #57	; 0x39
 800942e:	d107      	bne.n	8009440 <_dtoa_r+0x700>
 8009430:	9a08      	ldr	r2, [sp, #32]
 8009432:	429a      	cmp	r2, r3
 8009434:	d1f7      	bne.n	8009426 <_dtoa_r+0x6e6>
 8009436:	2230      	movs	r2, #48	; 0x30
 8009438:	9908      	ldr	r1, [sp, #32]
 800943a:	f108 0801 	add.w	r8, r8, #1
 800943e:	700a      	strb	r2, [r1, #0]
 8009440:	781a      	ldrb	r2, [r3, #0]
 8009442:	3201      	adds	r2, #1
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	e79f      	b.n	8009388 <_dtoa_r+0x648>
 8009448:	46c8      	mov	r8, r9
 800944a:	e7eb      	b.n	8009424 <_dtoa_r+0x6e4>
 800944c:	2200      	movs	r2, #0
 800944e:	4b72      	ldr	r3, [pc, #456]	; (8009618 <_dtoa_r+0x8d8>)
 8009450:	f7f7 f842 	bl	80004d8 <__aeabi_dmul>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800945c:	2200      	movs	r2, #0
 800945e:	2300      	movs	r3, #0
 8009460:	f7f7 faa2 	bl	80009a8 <__aeabi_dcmpeq>
 8009464:	2800      	cmp	r0, #0
 8009466:	d098      	beq.n	800939a <_dtoa_r+0x65a>
 8009468:	e7cb      	b.n	8009402 <_dtoa_r+0x6c2>
 800946a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800946c:	2a00      	cmp	r2, #0
 800946e:	f000 80cd 	beq.w	800960c <_dtoa_r+0x8cc>
 8009472:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009474:	2a01      	cmp	r2, #1
 8009476:	f300 80af 	bgt.w	80095d8 <_dtoa_r+0x898>
 800947a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800947c:	2a00      	cmp	r2, #0
 800947e:	f000 80a7 	beq.w	80095d0 <_dtoa_r+0x890>
 8009482:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009486:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009488:	9f06      	ldr	r7, [sp, #24]
 800948a:	9a06      	ldr	r2, [sp, #24]
 800948c:	2101      	movs	r1, #1
 800948e:	441a      	add	r2, r3
 8009490:	9206      	str	r2, [sp, #24]
 8009492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009494:	4628      	mov	r0, r5
 8009496:	441a      	add	r2, r3
 8009498:	9209      	str	r2, [sp, #36]	; 0x24
 800949a:	f001 f943 	bl	800a724 <__i2b>
 800949e:	4606      	mov	r6, r0
 80094a0:	2f00      	cmp	r7, #0
 80094a2:	dd0c      	ble.n	80094be <_dtoa_r+0x77e>
 80094a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dd09      	ble.n	80094be <_dtoa_r+0x77e>
 80094aa:	42bb      	cmp	r3, r7
 80094ac:	bfa8      	it	ge
 80094ae:	463b      	movge	r3, r7
 80094b0:	9a06      	ldr	r2, [sp, #24]
 80094b2:	1aff      	subs	r7, r7, r3
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	9206      	str	r2, [sp, #24]
 80094b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	9309      	str	r3, [sp, #36]	; 0x24
 80094be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c0:	b1f3      	cbz	r3, 8009500 <_dtoa_r+0x7c0>
 80094c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 80a9 	beq.w	800961c <_dtoa_r+0x8dc>
 80094ca:	2c00      	cmp	r4, #0
 80094cc:	dd10      	ble.n	80094f0 <_dtoa_r+0x7b0>
 80094ce:	4631      	mov	r1, r6
 80094d0:	4622      	mov	r2, r4
 80094d2:	4628      	mov	r0, r5
 80094d4:	f001 f9e0 	bl	800a898 <__pow5mult>
 80094d8:	4652      	mov	r2, sl
 80094da:	4601      	mov	r1, r0
 80094dc:	4606      	mov	r6, r0
 80094de:	4628      	mov	r0, r5
 80094e0:	f001 f936 	bl	800a750 <__multiply>
 80094e4:	4680      	mov	r8, r0
 80094e6:	4651      	mov	r1, sl
 80094e8:	4628      	mov	r0, r5
 80094ea:	f001 f817 	bl	800a51c <_Bfree>
 80094ee:	46c2      	mov	sl, r8
 80094f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f2:	1b1a      	subs	r2, r3, r4
 80094f4:	d004      	beq.n	8009500 <_dtoa_r+0x7c0>
 80094f6:	4651      	mov	r1, sl
 80094f8:	4628      	mov	r0, r5
 80094fa:	f001 f9cd 	bl	800a898 <__pow5mult>
 80094fe:	4682      	mov	sl, r0
 8009500:	2101      	movs	r1, #1
 8009502:	4628      	mov	r0, r5
 8009504:	f001 f90e 	bl	800a724 <__i2b>
 8009508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800950a:	4604      	mov	r4, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	f340 8087 	ble.w	8009620 <_dtoa_r+0x8e0>
 8009512:	461a      	mov	r2, r3
 8009514:	4601      	mov	r1, r0
 8009516:	4628      	mov	r0, r5
 8009518:	f001 f9be 	bl	800a898 <__pow5mult>
 800951c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800951e:	4604      	mov	r4, r0
 8009520:	2b01      	cmp	r3, #1
 8009522:	f340 8080 	ble.w	8009626 <_dtoa_r+0x8e6>
 8009526:	f04f 0800 	mov.w	r8, #0
 800952a:	6923      	ldr	r3, [r4, #16]
 800952c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009530:	6918      	ldr	r0, [r3, #16]
 8009532:	f001 f8a9 	bl	800a688 <__hi0bits>
 8009536:	f1c0 0020 	rsb	r0, r0, #32
 800953a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953c:	4418      	add	r0, r3
 800953e:	f010 001f 	ands.w	r0, r0, #31
 8009542:	f000 8092 	beq.w	800966a <_dtoa_r+0x92a>
 8009546:	f1c0 0320 	rsb	r3, r0, #32
 800954a:	2b04      	cmp	r3, #4
 800954c:	f340 808a 	ble.w	8009664 <_dtoa_r+0x924>
 8009550:	f1c0 001c 	rsb	r0, r0, #28
 8009554:	9b06      	ldr	r3, [sp, #24]
 8009556:	4407      	add	r7, r0
 8009558:	4403      	add	r3, r0
 800955a:	9306      	str	r3, [sp, #24]
 800955c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955e:	4403      	add	r3, r0
 8009560:	9309      	str	r3, [sp, #36]	; 0x24
 8009562:	9b06      	ldr	r3, [sp, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	dd05      	ble.n	8009574 <_dtoa_r+0x834>
 8009568:	4651      	mov	r1, sl
 800956a:	461a      	mov	r2, r3
 800956c:	4628      	mov	r0, r5
 800956e:	f001 f9ed 	bl	800a94c <__lshift>
 8009572:	4682      	mov	sl, r0
 8009574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009576:	2b00      	cmp	r3, #0
 8009578:	dd05      	ble.n	8009586 <_dtoa_r+0x846>
 800957a:	4621      	mov	r1, r4
 800957c:	461a      	mov	r2, r3
 800957e:	4628      	mov	r0, r5
 8009580:	f001 f9e4 	bl	800a94c <__lshift>
 8009584:	4604      	mov	r4, r0
 8009586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009588:	2b00      	cmp	r3, #0
 800958a:	d070      	beq.n	800966e <_dtoa_r+0x92e>
 800958c:	4621      	mov	r1, r4
 800958e:	4650      	mov	r0, sl
 8009590:	f001 fa48 	bl	800aa24 <__mcmp>
 8009594:	2800      	cmp	r0, #0
 8009596:	da6a      	bge.n	800966e <_dtoa_r+0x92e>
 8009598:	2300      	movs	r3, #0
 800959a:	4651      	mov	r1, sl
 800959c:	220a      	movs	r2, #10
 800959e:	4628      	mov	r0, r5
 80095a0:	f000 ffde 	bl	800a560 <__multadd>
 80095a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a6:	4682      	mov	sl, r0
 80095a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 8193 	beq.w	80098d8 <_dtoa_r+0xb98>
 80095b2:	4631      	mov	r1, r6
 80095b4:	2300      	movs	r3, #0
 80095b6:	220a      	movs	r2, #10
 80095b8:	4628      	mov	r0, r5
 80095ba:	f000 ffd1 	bl	800a560 <__multadd>
 80095be:	f1bb 0f00 	cmp.w	fp, #0
 80095c2:	4606      	mov	r6, r0
 80095c4:	f300 8093 	bgt.w	80096ee <_dtoa_r+0x9ae>
 80095c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	dc57      	bgt.n	800967e <_dtoa_r+0x93e>
 80095ce:	e08e      	b.n	80096ee <_dtoa_r+0x9ae>
 80095d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80095d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095d6:	e756      	b.n	8009486 <_dtoa_r+0x746>
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	1e5c      	subs	r4, r3, #1
 80095dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095de:	42a3      	cmp	r3, r4
 80095e0:	bfb7      	itett	lt
 80095e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095e4:	1b1c      	subge	r4, r3, r4
 80095e6:	1ae2      	sublt	r2, r4, r3
 80095e8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80095ea:	bfbe      	ittt	lt
 80095ec:	940a      	strlt	r4, [sp, #40]	; 0x28
 80095ee:	189b      	addlt	r3, r3, r2
 80095f0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80095f2:	9b02      	ldr	r3, [sp, #8]
 80095f4:	bfb8      	it	lt
 80095f6:	2400      	movlt	r4, #0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bfbb      	ittet	lt
 80095fc:	9b06      	ldrlt	r3, [sp, #24]
 80095fe:	9a02      	ldrlt	r2, [sp, #8]
 8009600:	9f06      	ldrge	r7, [sp, #24]
 8009602:	1a9f      	sublt	r7, r3, r2
 8009604:	bfac      	ite	ge
 8009606:	9b02      	ldrge	r3, [sp, #8]
 8009608:	2300      	movlt	r3, #0
 800960a:	e73e      	b.n	800948a <_dtoa_r+0x74a>
 800960c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800960e:	9f06      	ldr	r7, [sp, #24]
 8009610:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009612:	e745      	b.n	80094a0 <_dtoa_r+0x760>
 8009614:	3fe00000 	.word	0x3fe00000
 8009618:	40240000 	.word	0x40240000
 800961c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800961e:	e76a      	b.n	80094f6 <_dtoa_r+0x7b6>
 8009620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009622:	2b01      	cmp	r3, #1
 8009624:	dc19      	bgt.n	800965a <_dtoa_r+0x91a>
 8009626:	9b04      	ldr	r3, [sp, #16]
 8009628:	b9bb      	cbnz	r3, 800965a <_dtoa_r+0x91a>
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009630:	b99b      	cbnz	r3, 800965a <_dtoa_r+0x91a>
 8009632:	9b05      	ldr	r3, [sp, #20]
 8009634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009638:	0d1b      	lsrs	r3, r3, #20
 800963a:	051b      	lsls	r3, r3, #20
 800963c:	b183      	cbz	r3, 8009660 <_dtoa_r+0x920>
 800963e:	f04f 0801 	mov.w	r8, #1
 8009642:	9b06      	ldr	r3, [sp, #24]
 8009644:	3301      	adds	r3, #1
 8009646:	9306      	str	r3, [sp, #24]
 8009648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964a:	3301      	adds	r3, #1
 800964c:	9309      	str	r3, [sp, #36]	; 0x24
 800964e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009650:	2b00      	cmp	r3, #0
 8009652:	f47f af6a 	bne.w	800952a <_dtoa_r+0x7ea>
 8009656:	2001      	movs	r0, #1
 8009658:	e76f      	b.n	800953a <_dtoa_r+0x7fa>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	e7f6      	b.n	800964e <_dtoa_r+0x90e>
 8009660:	4698      	mov	r8, r3
 8009662:	e7f4      	b.n	800964e <_dtoa_r+0x90e>
 8009664:	f43f af7d 	beq.w	8009562 <_dtoa_r+0x822>
 8009668:	4618      	mov	r0, r3
 800966a:	301c      	adds	r0, #28
 800966c:	e772      	b.n	8009554 <_dtoa_r+0x814>
 800966e:	9b02      	ldr	r3, [sp, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	dc36      	bgt.n	80096e2 <_dtoa_r+0x9a2>
 8009674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009676:	2b02      	cmp	r3, #2
 8009678:	dd33      	ble.n	80096e2 <_dtoa_r+0x9a2>
 800967a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800967e:	f1bb 0f00 	cmp.w	fp, #0
 8009682:	d10d      	bne.n	80096a0 <_dtoa_r+0x960>
 8009684:	4621      	mov	r1, r4
 8009686:	465b      	mov	r3, fp
 8009688:	2205      	movs	r2, #5
 800968a:	4628      	mov	r0, r5
 800968c:	f000 ff68 	bl	800a560 <__multadd>
 8009690:	4601      	mov	r1, r0
 8009692:	4604      	mov	r4, r0
 8009694:	4650      	mov	r0, sl
 8009696:	f001 f9c5 	bl	800aa24 <__mcmp>
 800969a:	2800      	cmp	r0, #0
 800969c:	f73f adb6 	bgt.w	800920c <_dtoa_r+0x4cc>
 80096a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096a2:	9f08      	ldr	r7, [sp, #32]
 80096a4:	ea6f 0903 	mvn.w	r9, r3
 80096a8:	f04f 0800 	mov.w	r8, #0
 80096ac:	4621      	mov	r1, r4
 80096ae:	4628      	mov	r0, r5
 80096b0:	f000 ff34 	bl	800a51c <_Bfree>
 80096b4:	2e00      	cmp	r6, #0
 80096b6:	f43f aea4 	beq.w	8009402 <_dtoa_r+0x6c2>
 80096ba:	f1b8 0f00 	cmp.w	r8, #0
 80096be:	d005      	beq.n	80096cc <_dtoa_r+0x98c>
 80096c0:	45b0      	cmp	r8, r6
 80096c2:	d003      	beq.n	80096cc <_dtoa_r+0x98c>
 80096c4:	4641      	mov	r1, r8
 80096c6:	4628      	mov	r0, r5
 80096c8:	f000 ff28 	bl	800a51c <_Bfree>
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 ff24 	bl	800a51c <_Bfree>
 80096d4:	e695      	b.n	8009402 <_dtoa_r+0x6c2>
 80096d6:	2400      	movs	r4, #0
 80096d8:	4626      	mov	r6, r4
 80096da:	e7e1      	b.n	80096a0 <_dtoa_r+0x960>
 80096dc:	46c1      	mov	r9, r8
 80096de:	4626      	mov	r6, r4
 80096e0:	e594      	b.n	800920c <_dtoa_r+0x4cc>
 80096e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 80fc 	beq.w	80098e6 <_dtoa_r+0xba6>
 80096ee:	2f00      	cmp	r7, #0
 80096f0:	dd05      	ble.n	80096fe <_dtoa_r+0x9be>
 80096f2:	4631      	mov	r1, r6
 80096f4:	463a      	mov	r2, r7
 80096f6:	4628      	mov	r0, r5
 80096f8:	f001 f928 	bl	800a94c <__lshift>
 80096fc:	4606      	mov	r6, r0
 80096fe:	f1b8 0f00 	cmp.w	r8, #0
 8009702:	d05c      	beq.n	80097be <_dtoa_r+0xa7e>
 8009704:	4628      	mov	r0, r5
 8009706:	6871      	ldr	r1, [r6, #4]
 8009708:	f000 fec8 	bl	800a49c <_Balloc>
 800970c:	4607      	mov	r7, r0
 800970e:	b928      	cbnz	r0, 800971c <_dtoa_r+0x9dc>
 8009710:	4602      	mov	r2, r0
 8009712:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009716:	4b7e      	ldr	r3, [pc, #504]	; (8009910 <_dtoa_r+0xbd0>)
 8009718:	f7ff bb26 	b.w	8008d68 <_dtoa_r+0x28>
 800971c:	6932      	ldr	r2, [r6, #16]
 800971e:	f106 010c 	add.w	r1, r6, #12
 8009722:	3202      	adds	r2, #2
 8009724:	0092      	lsls	r2, r2, #2
 8009726:	300c      	adds	r0, #12
 8009728:	f000 feaa 	bl	800a480 <memcpy>
 800972c:	2201      	movs	r2, #1
 800972e:	4639      	mov	r1, r7
 8009730:	4628      	mov	r0, r5
 8009732:	f001 f90b 	bl	800a94c <__lshift>
 8009736:	46b0      	mov	r8, r6
 8009738:	4606      	mov	r6, r0
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	3301      	adds	r3, #1
 800973e:	9302      	str	r3, [sp, #8]
 8009740:	9b08      	ldr	r3, [sp, #32]
 8009742:	445b      	add	r3, fp
 8009744:	930a      	str	r3, [sp, #40]	; 0x28
 8009746:	9b04      	ldr	r3, [sp, #16]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	9309      	str	r3, [sp, #36]	; 0x24
 800974e:	9b02      	ldr	r3, [sp, #8]
 8009750:	4621      	mov	r1, r4
 8009752:	4650      	mov	r0, sl
 8009754:	f103 3bff 	add.w	fp, r3, #4294967295
 8009758:	f7ff fa62 	bl	8008c20 <quorem>
 800975c:	4603      	mov	r3, r0
 800975e:	4641      	mov	r1, r8
 8009760:	3330      	adds	r3, #48	; 0x30
 8009762:	9004      	str	r0, [sp, #16]
 8009764:	4650      	mov	r0, sl
 8009766:	930b      	str	r3, [sp, #44]	; 0x2c
 8009768:	f001 f95c 	bl	800aa24 <__mcmp>
 800976c:	4632      	mov	r2, r6
 800976e:	9006      	str	r0, [sp, #24]
 8009770:	4621      	mov	r1, r4
 8009772:	4628      	mov	r0, r5
 8009774:	f001 f972 	bl	800aa5c <__mdiff>
 8009778:	68c2      	ldr	r2, [r0, #12]
 800977a:	4607      	mov	r7, r0
 800977c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977e:	bb02      	cbnz	r2, 80097c2 <_dtoa_r+0xa82>
 8009780:	4601      	mov	r1, r0
 8009782:	4650      	mov	r0, sl
 8009784:	f001 f94e 	bl	800aa24 <__mcmp>
 8009788:	4602      	mov	r2, r0
 800978a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800978c:	4639      	mov	r1, r7
 800978e:	4628      	mov	r0, r5
 8009790:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009794:	f000 fec2 	bl	800a51c <_Bfree>
 8009798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800979a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800979c:	9f02      	ldr	r7, [sp, #8]
 800979e:	ea43 0102 	orr.w	r1, r3, r2
 80097a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a4:	430b      	orrs	r3, r1
 80097a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097a8:	d10d      	bne.n	80097c6 <_dtoa_r+0xa86>
 80097aa:	2b39      	cmp	r3, #57	; 0x39
 80097ac:	d027      	beq.n	80097fe <_dtoa_r+0xabe>
 80097ae:	9a06      	ldr	r2, [sp, #24]
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	dd01      	ble.n	80097b8 <_dtoa_r+0xa78>
 80097b4:	9b04      	ldr	r3, [sp, #16]
 80097b6:	3331      	adds	r3, #49	; 0x31
 80097b8:	f88b 3000 	strb.w	r3, [fp]
 80097bc:	e776      	b.n	80096ac <_dtoa_r+0x96c>
 80097be:	4630      	mov	r0, r6
 80097c0:	e7b9      	b.n	8009736 <_dtoa_r+0x9f6>
 80097c2:	2201      	movs	r2, #1
 80097c4:	e7e2      	b.n	800978c <_dtoa_r+0xa4c>
 80097c6:	9906      	ldr	r1, [sp, #24]
 80097c8:	2900      	cmp	r1, #0
 80097ca:	db04      	blt.n	80097d6 <_dtoa_r+0xa96>
 80097cc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80097ce:	4301      	orrs	r1, r0
 80097d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097d2:	4301      	orrs	r1, r0
 80097d4:	d120      	bne.n	8009818 <_dtoa_r+0xad8>
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	ddee      	ble.n	80097b8 <_dtoa_r+0xa78>
 80097da:	4651      	mov	r1, sl
 80097dc:	2201      	movs	r2, #1
 80097de:	4628      	mov	r0, r5
 80097e0:	9302      	str	r3, [sp, #8]
 80097e2:	f001 f8b3 	bl	800a94c <__lshift>
 80097e6:	4621      	mov	r1, r4
 80097e8:	4682      	mov	sl, r0
 80097ea:	f001 f91b 	bl	800aa24 <__mcmp>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	dc02      	bgt.n	80097fa <_dtoa_r+0xaba>
 80097f4:	d1e0      	bne.n	80097b8 <_dtoa_r+0xa78>
 80097f6:	07da      	lsls	r2, r3, #31
 80097f8:	d5de      	bpl.n	80097b8 <_dtoa_r+0xa78>
 80097fa:	2b39      	cmp	r3, #57	; 0x39
 80097fc:	d1da      	bne.n	80097b4 <_dtoa_r+0xa74>
 80097fe:	2339      	movs	r3, #57	; 0x39
 8009800:	f88b 3000 	strb.w	r3, [fp]
 8009804:	463b      	mov	r3, r7
 8009806:	461f      	mov	r7, r3
 8009808:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800980c:	3b01      	subs	r3, #1
 800980e:	2a39      	cmp	r2, #57	; 0x39
 8009810:	d050      	beq.n	80098b4 <_dtoa_r+0xb74>
 8009812:	3201      	adds	r2, #1
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	e749      	b.n	80096ac <_dtoa_r+0x96c>
 8009818:	2a00      	cmp	r2, #0
 800981a:	dd03      	ble.n	8009824 <_dtoa_r+0xae4>
 800981c:	2b39      	cmp	r3, #57	; 0x39
 800981e:	d0ee      	beq.n	80097fe <_dtoa_r+0xabe>
 8009820:	3301      	adds	r3, #1
 8009822:	e7c9      	b.n	80097b8 <_dtoa_r+0xa78>
 8009824:	9a02      	ldr	r2, [sp, #8]
 8009826:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009828:	f802 3c01 	strb.w	r3, [r2, #-1]
 800982c:	428a      	cmp	r2, r1
 800982e:	d02a      	beq.n	8009886 <_dtoa_r+0xb46>
 8009830:	4651      	mov	r1, sl
 8009832:	2300      	movs	r3, #0
 8009834:	220a      	movs	r2, #10
 8009836:	4628      	mov	r0, r5
 8009838:	f000 fe92 	bl	800a560 <__multadd>
 800983c:	45b0      	cmp	r8, r6
 800983e:	4682      	mov	sl, r0
 8009840:	f04f 0300 	mov.w	r3, #0
 8009844:	f04f 020a 	mov.w	r2, #10
 8009848:	4641      	mov	r1, r8
 800984a:	4628      	mov	r0, r5
 800984c:	d107      	bne.n	800985e <_dtoa_r+0xb1e>
 800984e:	f000 fe87 	bl	800a560 <__multadd>
 8009852:	4680      	mov	r8, r0
 8009854:	4606      	mov	r6, r0
 8009856:	9b02      	ldr	r3, [sp, #8]
 8009858:	3301      	adds	r3, #1
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	e777      	b.n	800974e <_dtoa_r+0xa0e>
 800985e:	f000 fe7f 	bl	800a560 <__multadd>
 8009862:	4631      	mov	r1, r6
 8009864:	4680      	mov	r8, r0
 8009866:	2300      	movs	r3, #0
 8009868:	220a      	movs	r2, #10
 800986a:	4628      	mov	r0, r5
 800986c:	f000 fe78 	bl	800a560 <__multadd>
 8009870:	4606      	mov	r6, r0
 8009872:	e7f0      	b.n	8009856 <_dtoa_r+0xb16>
 8009874:	f1bb 0f00 	cmp.w	fp, #0
 8009878:	bfcc      	ite	gt
 800987a:	465f      	movgt	r7, fp
 800987c:	2701      	movle	r7, #1
 800987e:	f04f 0800 	mov.w	r8, #0
 8009882:	9a08      	ldr	r2, [sp, #32]
 8009884:	4417      	add	r7, r2
 8009886:	4651      	mov	r1, sl
 8009888:	2201      	movs	r2, #1
 800988a:	4628      	mov	r0, r5
 800988c:	9302      	str	r3, [sp, #8]
 800988e:	f001 f85d 	bl	800a94c <__lshift>
 8009892:	4621      	mov	r1, r4
 8009894:	4682      	mov	sl, r0
 8009896:	f001 f8c5 	bl	800aa24 <__mcmp>
 800989a:	2800      	cmp	r0, #0
 800989c:	dcb2      	bgt.n	8009804 <_dtoa_r+0xac4>
 800989e:	d102      	bne.n	80098a6 <_dtoa_r+0xb66>
 80098a0:	9b02      	ldr	r3, [sp, #8]
 80098a2:	07db      	lsls	r3, r3, #31
 80098a4:	d4ae      	bmi.n	8009804 <_dtoa_r+0xac4>
 80098a6:	463b      	mov	r3, r7
 80098a8:	461f      	mov	r7, r3
 80098aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098ae:	2a30      	cmp	r2, #48	; 0x30
 80098b0:	d0fa      	beq.n	80098a8 <_dtoa_r+0xb68>
 80098b2:	e6fb      	b.n	80096ac <_dtoa_r+0x96c>
 80098b4:	9a08      	ldr	r2, [sp, #32]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d1a5      	bne.n	8009806 <_dtoa_r+0xac6>
 80098ba:	2331      	movs	r3, #49	; 0x31
 80098bc:	f109 0901 	add.w	r9, r9, #1
 80098c0:	7013      	strb	r3, [r2, #0]
 80098c2:	e6f3      	b.n	80096ac <_dtoa_r+0x96c>
 80098c4:	4b13      	ldr	r3, [pc, #76]	; (8009914 <_dtoa_r+0xbd4>)
 80098c6:	f7ff baa7 	b.w	8008e18 <_dtoa_r+0xd8>
 80098ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f47f aa80 	bne.w	8008dd2 <_dtoa_r+0x92>
 80098d2:	4b11      	ldr	r3, [pc, #68]	; (8009918 <_dtoa_r+0xbd8>)
 80098d4:	f7ff baa0 	b.w	8008e18 <_dtoa_r+0xd8>
 80098d8:	f1bb 0f00 	cmp.w	fp, #0
 80098dc:	dc03      	bgt.n	80098e6 <_dtoa_r+0xba6>
 80098de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	f73f aecc 	bgt.w	800967e <_dtoa_r+0x93e>
 80098e6:	9f08      	ldr	r7, [sp, #32]
 80098e8:	4621      	mov	r1, r4
 80098ea:	4650      	mov	r0, sl
 80098ec:	f7ff f998 	bl	8008c20 <quorem>
 80098f0:	9a08      	ldr	r2, [sp, #32]
 80098f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80098f6:	f807 3b01 	strb.w	r3, [r7], #1
 80098fa:	1aba      	subs	r2, r7, r2
 80098fc:	4593      	cmp	fp, r2
 80098fe:	ddb9      	ble.n	8009874 <_dtoa_r+0xb34>
 8009900:	4651      	mov	r1, sl
 8009902:	2300      	movs	r3, #0
 8009904:	220a      	movs	r2, #10
 8009906:	4628      	mov	r0, r5
 8009908:	f000 fe2a 	bl	800a560 <__multadd>
 800990c:	4682      	mov	sl, r0
 800990e:	e7eb      	b.n	80098e8 <_dtoa_r+0xba8>
 8009910:	0800b75b 	.word	0x0800b75b
 8009914:	0800b660 	.word	0x0800b660
 8009918:	0800b6d8 	.word	0x0800b6d8

0800991c <__sflush_r>:
 800991c:	898a      	ldrh	r2, [r1, #12]
 800991e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	4605      	mov	r5, r0
 8009924:	0710      	lsls	r0, r2, #28
 8009926:	460c      	mov	r4, r1
 8009928:	d458      	bmi.n	80099dc <__sflush_r+0xc0>
 800992a:	684b      	ldr	r3, [r1, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	dc05      	bgt.n	800993c <__sflush_r+0x20>
 8009930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009932:	2b00      	cmp	r3, #0
 8009934:	dc02      	bgt.n	800993c <__sflush_r+0x20>
 8009936:	2000      	movs	r0, #0
 8009938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800993e:	2e00      	cmp	r6, #0
 8009940:	d0f9      	beq.n	8009936 <__sflush_r+0x1a>
 8009942:	2300      	movs	r3, #0
 8009944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009948:	682f      	ldr	r7, [r5, #0]
 800994a:	602b      	str	r3, [r5, #0]
 800994c:	d032      	beq.n	80099b4 <__sflush_r+0x98>
 800994e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	075a      	lsls	r2, r3, #29
 8009954:	d505      	bpl.n	8009962 <__sflush_r+0x46>
 8009956:	6863      	ldr	r3, [r4, #4]
 8009958:	1ac0      	subs	r0, r0, r3
 800995a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800995c:	b10b      	cbz	r3, 8009962 <__sflush_r+0x46>
 800995e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009960:	1ac0      	subs	r0, r0, r3
 8009962:	2300      	movs	r3, #0
 8009964:	4602      	mov	r2, r0
 8009966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009968:	4628      	mov	r0, r5
 800996a:	6a21      	ldr	r1, [r4, #32]
 800996c:	47b0      	blx	r6
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	d106      	bne.n	8009982 <__sflush_r+0x66>
 8009974:	6829      	ldr	r1, [r5, #0]
 8009976:	291d      	cmp	r1, #29
 8009978:	d82c      	bhi.n	80099d4 <__sflush_r+0xb8>
 800997a:	4a2a      	ldr	r2, [pc, #168]	; (8009a24 <__sflush_r+0x108>)
 800997c:	40ca      	lsrs	r2, r1
 800997e:	07d6      	lsls	r6, r2, #31
 8009980:	d528      	bpl.n	80099d4 <__sflush_r+0xb8>
 8009982:	2200      	movs	r2, #0
 8009984:	6062      	str	r2, [r4, #4]
 8009986:	6922      	ldr	r2, [r4, #16]
 8009988:	04d9      	lsls	r1, r3, #19
 800998a:	6022      	str	r2, [r4, #0]
 800998c:	d504      	bpl.n	8009998 <__sflush_r+0x7c>
 800998e:	1c42      	adds	r2, r0, #1
 8009990:	d101      	bne.n	8009996 <__sflush_r+0x7a>
 8009992:	682b      	ldr	r3, [r5, #0]
 8009994:	b903      	cbnz	r3, 8009998 <__sflush_r+0x7c>
 8009996:	6560      	str	r0, [r4, #84]	; 0x54
 8009998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800999a:	602f      	str	r7, [r5, #0]
 800999c:	2900      	cmp	r1, #0
 800999e:	d0ca      	beq.n	8009936 <__sflush_r+0x1a>
 80099a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099a4:	4299      	cmp	r1, r3
 80099a6:	d002      	beq.n	80099ae <__sflush_r+0x92>
 80099a8:	4628      	mov	r0, r5
 80099aa:	f001 fa3d 	bl	800ae28 <_free_r>
 80099ae:	2000      	movs	r0, #0
 80099b0:	6360      	str	r0, [r4, #52]	; 0x34
 80099b2:	e7c1      	b.n	8009938 <__sflush_r+0x1c>
 80099b4:	6a21      	ldr	r1, [r4, #32]
 80099b6:	2301      	movs	r3, #1
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b0      	blx	r6
 80099bc:	1c41      	adds	r1, r0, #1
 80099be:	d1c7      	bne.n	8009950 <__sflush_r+0x34>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0c4      	beq.n	8009950 <__sflush_r+0x34>
 80099c6:	2b1d      	cmp	r3, #29
 80099c8:	d001      	beq.n	80099ce <__sflush_r+0xb2>
 80099ca:	2b16      	cmp	r3, #22
 80099cc:	d101      	bne.n	80099d2 <__sflush_r+0xb6>
 80099ce:	602f      	str	r7, [r5, #0]
 80099d0:	e7b1      	b.n	8009936 <__sflush_r+0x1a>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	e7ad      	b.n	8009938 <__sflush_r+0x1c>
 80099dc:	690f      	ldr	r7, [r1, #16]
 80099de:	2f00      	cmp	r7, #0
 80099e0:	d0a9      	beq.n	8009936 <__sflush_r+0x1a>
 80099e2:	0793      	lsls	r3, r2, #30
 80099e4:	bf18      	it	ne
 80099e6:	2300      	movne	r3, #0
 80099e8:	680e      	ldr	r6, [r1, #0]
 80099ea:	bf08      	it	eq
 80099ec:	694b      	ldreq	r3, [r1, #20]
 80099ee:	eba6 0807 	sub.w	r8, r6, r7
 80099f2:	600f      	str	r7, [r1, #0]
 80099f4:	608b      	str	r3, [r1, #8]
 80099f6:	f1b8 0f00 	cmp.w	r8, #0
 80099fa:	dd9c      	ble.n	8009936 <__sflush_r+0x1a>
 80099fc:	4643      	mov	r3, r8
 80099fe:	463a      	mov	r2, r7
 8009a00:	4628      	mov	r0, r5
 8009a02:	6a21      	ldr	r1, [r4, #32]
 8009a04:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a06:	47b0      	blx	r6
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	dc06      	bgt.n	8009a1a <__sflush_r+0xfe>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a16:	81a3      	strh	r3, [r4, #12]
 8009a18:	e78e      	b.n	8009938 <__sflush_r+0x1c>
 8009a1a:	4407      	add	r7, r0
 8009a1c:	eba8 0800 	sub.w	r8, r8, r0
 8009a20:	e7e9      	b.n	80099f6 <__sflush_r+0xda>
 8009a22:	bf00      	nop
 8009a24:	20400001 	.word	0x20400001

08009a28 <_fflush_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	690b      	ldr	r3, [r1, #16]
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b913      	cbnz	r3, 8009a38 <_fflush_r+0x10>
 8009a32:	2500      	movs	r5, #0
 8009a34:	4628      	mov	r0, r5
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	b118      	cbz	r0, 8009a42 <_fflush_r+0x1a>
 8009a3a:	6983      	ldr	r3, [r0, #24]
 8009a3c:	b90b      	cbnz	r3, 8009a42 <_fflush_r+0x1a>
 8009a3e:	f000 f887 	bl	8009b50 <__sinit>
 8009a42:	4b14      	ldr	r3, [pc, #80]	; (8009a94 <_fflush_r+0x6c>)
 8009a44:	429c      	cmp	r4, r3
 8009a46:	d11b      	bne.n	8009a80 <_fflush_r+0x58>
 8009a48:	686c      	ldr	r4, [r5, #4]
 8009a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0ef      	beq.n	8009a32 <_fflush_r+0xa>
 8009a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a54:	07d0      	lsls	r0, r2, #31
 8009a56:	d404      	bmi.n	8009a62 <_fflush_r+0x3a>
 8009a58:	0599      	lsls	r1, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_fflush_r+0x3a>
 8009a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5e:	f000 fc80 	bl	800a362 <__retarget_lock_acquire_recursive>
 8009a62:	4628      	mov	r0, r5
 8009a64:	4621      	mov	r1, r4
 8009a66:	f7ff ff59 	bl	800991c <__sflush_r>
 8009a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	07da      	lsls	r2, r3, #31
 8009a70:	d4e0      	bmi.n	8009a34 <_fflush_r+0xc>
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	059b      	lsls	r3, r3, #22
 8009a76:	d4dd      	bmi.n	8009a34 <_fflush_r+0xc>
 8009a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a7a:	f000 fc73 	bl	800a364 <__retarget_lock_release_recursive>
 8009a7e:	e7d9      	b.n	8009a34 <_fflush_r+0xc>
 8009a80:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <_fflush_r+0x70>)
 8009a82:	429c      	cmp	r4, r3
 8009a84:	d101      	bne.n	8009a8a <_fflush_r+0x62>
 8009a86:	68ac      	ldr	r4, [r5, #8]
 8009a88:	e7df      	b.n	8009a4a <_fflush_r+0x22>
 8009a8a:	4b04      	ldr	r3, [pc, #16]	; (8009a9c <_fflush_r+0x74>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	bf08      	it	eq
 8009a90:	68ec      	ldreq	r4, [r5, #12]
 8009a92:	e7da      	b.n	8009a4a <_fflush_r+0x22>
 8009a94:	0800b78c 	.word	0x0800b78c
 8009a98:	0800b7ac 	.word	0x0800b7ac
 8009a9c:	0800b76c 	.word	0x0800b76c

08009aa0 <std>:
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	b510      	push	{r4, lr}
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8009aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aae:	6083      	str	r3, [r0, #8]
 8009ab0:	8181      	strh	r1, [r0, #12]
 8009ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ab4:	81c2      	strh	r2, [r0, #14]
 8009ab6:	6183      	str	r3, [r0, #24]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	2208      	movs	r2, #8
 8009abc:	305c      	adds	r0, #92	; 0x5c
 8009abe:	f7fd fcbf 	bl	8007440 <memset>
 8009ac2:	4b05      	ldr	r3, [pc, #20]	; (8009ad8 <std+0x38>)
 8009ac4:	6224      	str	r4, [r4, #32]
 8009ac6:	6263      	str	r3, [r4, #36]	; 0x24
 8009ac8:	4b04      	ldr	r3, [pc, #16]	; (8009adc <std+0x3c>)
 8009aca:	62a3      	str	r3, [r4, #40]	; 0x28
 8009acc:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <std+0x40>)
 8009ace:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ad0:	4b04      	ldr	r3, [pc, #16]	; (8009ae4 <std+0x44>)
 8009ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	bf00      	nop
 8009ad8:	0800b251 	.word	0x0800b251
 8009adc:	0800b273 	.word	0x0800b273
 8009ae0:	0800b2ab 	.word	0x0800b2ab
 8009ae4:	0800b2cf 	.word	0x0800b2cf

08009ae8 <_cleanup_r>:
 8009ae8:	4901      	ldr	r1, [pc, #4]	; (8009af0 <_cleanup_r+0x8>)
 8009aea:	f000 b8af 	b.w	8009c4c <_fwalk_reent>
 8009aee:	bf00      	nop
 8009af0:	08009a29 	.word	0x08009a29

08009af4 <__sfmoreglue>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	2568      	movs	r5, #104	; 0x68
 8009af8:	1e4a      	subs	r2, r1, #1
 8009afa:	4355      	muls	r5, r2
 8009afc:	460e      	mov	r6, r1
 8009afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b02:	f001 f9dd 	bl	800aec0 <_malloc_r>
 8009b06:	4604      	mov	r4, r0
 8009b08:	b140      	cbz	r0, 8009b1c <__sfmoreglue+0x28>
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8009b10:	300c      	adds	r0, #12
 8009b12:	60a0      	str	r0, [r4, #8]
 8009b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b18:	f7fd fc92 	bl	8007440 <memset>
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	bd70      	pop	{r4, r5, r6, pc}

08009b20 <__sfp_lock_acquire>:
 8009b20:	4801      	ldr	r0, [pc, #4]	; (8009b28 <__sfp_lock_acquire+0x8>)
 8009b22:	f000 bc1e 	b.w	800a362 <__retarget_lock_acquire_recursive>
 8009b26:	bf00      	nop
 8009b28:	2000048c 	.word	0x2000048c

08009b2c <__sfp_lock_release>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	; (8009b34 <__sfp_lock_release+0x8>)
 8009b2e:	f000 bc19 	b.w	800a364 <__retarget_lock_release_recursive>
 8009b32:	bf00      	nop
 8009b34:	2000048c 	.word	0x2000048c

08009b38 <__sinit_lock_acquire>:
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <__sinit_lock_acquire+0x8>)
 8009b3a:	f000 bc12 	b.w	800a362 <__retarget_lock_acquire_recursive>
 8009b3e:	bf00      	nop
 8009b40:	20000487 	.word	0x20000487

08009b44 <__sinit_lock_release>:
 8009b44:	4801      	ldr	r0, [pc, #4]	; (8009b4c <__sinit_lock_release+0x8>)
 8009b46:	f000 bc0d 	b.w	800a364 <__retarget_lock_release_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	20000487 	.word	0x20000487

08009b50 <__sinit>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	4604      	mov	r4, r0
 8009b54:	f7ff fff0 	bl	8009b38 <__sinit_lock_acquire>
 8009b58:	69a3      	ldr	r3, [r4, #24]
 8009b5a:	b11b      	cbz	r3, 8009b64 <__sinit+0x14>
 8009b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b60:	f7ff bff0 	b.w	8009b44 <__sinit_lock_release>
 8009b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b68:	6523      	str	r3, [r4, #80]	; 0x50
 8009b6a:	4b13      	ldr	r3, [pc, #76]	; (8009bb8 <__sinit+0x68>)
 8009b6c:	4a13      	ldr	r2, [pc, #76]	; (8009bbc <__sinit+0x6c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	bf08      	it	eq
 8009b76:	2301      	moveq	r3, #1
 8009b78:	4620      	mov	r0, r4
 8009b7a:	bf08      	it	eq
 8009b7c:	61a3      	streq	r3, [r4, #24]
 8009b7e:	f000 f81f 	bl	8009bc0 <__sfp>
 8009b82:	6060      	str	r0, [r4, #4]
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 f81b 	bl	8009bc0 <__sfp>
 8009b8a:	60a0      	str	r0, [r4, #8]
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f000 f817 	bl	8009bc0 <__sfp>
 8009b92:	2200      	movs	r2, #0
 8009b94:	2104      	movs	r1, #4
 8009b96:	60e0      	str	r0, [r4, #12]
 8009b98:	6860      	ldr	r0, [r4, #4]
 8009b9a:	f7ff ff81 	bl	8009aa0 <std>
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	2109      	movs	r1, #9
 8009ba2:	68a0      	ldr	r0, [r4, #8]
 8009ba4:	f7ff ff7c 	bl	8009aa0 <std>
 8009ba8:	2202      	movs	r2, #2
 8009baa:	2112      	movs	r1, #18
 8009bac:	68e0      	ldr	r0, [r4, #12]
 8009bae:	f7ff ff77 	bl	8009aa0 <std>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	61a3      	str	r3, [r4, #24]
 8009bb6:	e7d1      	b.n	8009b5c <__sinit+0xc>
 8009bb8:	0800b64c 	.word	0x0800b64c
 8009bbc:	08009ae9 	.word	0x08009ae9

08009bc0 <__sfp>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	4607      	mov	r7, r0
 8009bc4:	f7ff ffac 	bl	8009b20 <__sfp_lock_acquire>
 8009bc8:	4b1e      	ldr	r3, [pc, #120]	; (8009c44 <__sfp+0x84>)
 8009bca:	681e      	ldr	r6, [r3, #0]
 8009bcc:	69b3      	ldr	r3, [r6, #24]
 8009bce:	b913      	cbnz	r3, 8009bd6 <__sfp+0x16>
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff ffbd 	bl	8009b50 <__sinit>
 8009bd6:	3648      	adds	r6, #72	; 0x48
 8009bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	d503      	bpl.n	8009be8 <__sfp+0x28>
 8009be0:	6833      	ldr	r3, [r6, #0]
 8009be2:	b30b      	cbz	r3, 8009c28 <__sfp+0x68>
 8009be4:	6836      	ldr	r6, [r6, #0]
 8009be6:	e7f7      	b.n	8009bd8 <__sfp+0x18>
 8009be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bec:	b9d5      	cbnz	r5, 8009c24 <__sfp+0x64>
 8009bee:	4b16      	ldr	r3, [pc, #88]	; (8009c48 <__sfp+0x88>)
 8009bf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bf4:	60e3      	str	r3, [r4, #12]
 8009bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8009bf8:	f000 fbb2 	bl	800a360 <__retarget_lock_init_recursive>
 8009bfc:	f7ff ff96 	bl	8009b2c <__sfp_lock_release>
 8009c00:	2208      	movs	r2, #8
 8009c02:	4629      	mov	r1, r5
 8009c04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c0c:	6025      	str	r5, [r4, #0]
 8009c0e:	61a5      	str	r5, [r4, #24]
 8009c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c14:	f7fd fc14 	bl	8007440 <memset>
 8009c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c20:	4620      	mov	r0, r4
 8009c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c24:	3468      	adds	r4, #104	; 0x68
 8009c26:	e7d9      	b.n	8009bdc <__sfp+0x1c>
 8009c28:	2104      	movs	r1, #4
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	f7ff ff62 	bl	8009af4 <__sfmoreglue>
 8009c30:	4604      	mov	r4, r0
 8009c32:	6030      	str	r0, [r6, #0]
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d1d5      	bne.n	8009be4 <__sfp+0x24>
 8009c38:	f7ff ff78 	bl	8009b2c <__sfp_lock_release>
 8009c3c:	230c      	movs	r3, #12
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	e7ee      	b.n	8009c20 <__sfp+0x60>
 8009c42:	bf00      	nop
 8009c44:	0800b64c 	.word	0x0800b64c
 8009c48:	ffff0001 	.word	0xffff0001

08009c4c <_fwalk_reent>:
 8009c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c50:	4606      	mov	r6, r0
 8009c52:	4688      	mov	r8, r1
 8009c54:	2700      	movs	r7, #0
 8009c56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8009c62:	d505      	bpl.n	8009c70 <_fwalk_reent+0x24>
 8009c64:	6824      	ldr	r4, [r4, #0]
 8009c66:	2c00      	cmp	r4, #0
 8009c68:	d1f7      	bne.n	8009c5a <_fwalk_reent+0xe>
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c70:	89ab      	ldrh	r3, [r5, #12]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d907      	bls.n	8009c86 <_fwalk_reent+0x3a>
 8009c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	d003      	beq.n	8009c86 <_fwalk_reent+0x3a>
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4630      	mov	r0, r6
 8009c82:	47c0      	blx	r8
 8009c84:	4307      	orrs	r7, r0
 8009c86:	3568      	adds	r5, #104	; 0x68
 8009c88:	e7e9      	b.n	8009c5e <_fwalk_reent+0x12>

08009c8a <rshift>:
 8009c8a:	6903      	ldr	r3, [r0, #16]
 8009c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c90:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c94:	f100 0414 	add.w	r4, r0, #20
 8009c98:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c9c:	dd46      	ble.n	8009d2c <rshift+0xa2>
 8009c9e:	f011 011f 	ands.w	r1, r1, #31
 8009ca2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ca6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009caa:	d10c      	bne.n	8009cc6 <rshift+0x3c>
 8009cac:	4629      	mov	r1, r5
 8009cae:	f100 0710 	add.w	r7, r0, #16
 8009cb2:	42b1      	cmp	r1, r6
 8009cb4:	d335      	bcc.n	8009d22 <rshift+0x98>
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	1eea      	subs	r2, r5, #3
 8009cbc:	4296      	cmp	r6, r2
 8009cbe:	bf38      	it	cc
 8009cc0:	2300      	movcc	r3, #0
 8009cc2:	4423      	add	r3, r4
 8009cc4:	e015      	b.n	8009cf2 <rshift+0x68>
 8009cc6:	46a1      	mov	r9, r4
 8009cc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ccc:	f1c1 0820 	rsb	r8, r1, #32
 8009cd0:	40cf      	lsrs	r7, r1
 8009cd2:	f105 0e04 	add.w	lr, r5, #4
 8009cd6:	4576      	cmp	r6, lr
 8009cd8:	46f4      	mov	ip, lr
 8009cda:	d816      	bhi.n	8009d0a <rshift+0x80>
 8009cdc:	1a9b      	subs	r3, r3, r2
 8009cde:	009a      	lsls	r2, r3, #2
 8009ce0:	3a04      	subs	r2, #4
 8009ce2:	3501      	adds	r5, #1
 8009ce4:	42ae      	cmp	r6, r5
 8009ce6:	bf38      	it	cc
 8009ce8:	2200      	movcc	r2, #0
 8009cea:	18a3      	adds	r3, r4, r2
 8009cec:	50a7      	str	r7, [r4, r2]
 8009cee:	b107      	cbz	r7, 8009cf2 <rshift+0x68>
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	42a3      	cmp	r3, r4
 8009cf4:	eba3 0204 	sub.w	r2, r3, r4
 8009cf8:	bf08      	it	eq
 8009cfa:	2300      	moveq	r3, #0
 8009cfc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d00:	6102      	str	r2, [r0, #16]
 8009d02:	bf08      	it	eq
 8009d04:	6143      	streq	r3, [r0, #20]
 8009d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d0a:	f8dc c000 	ldr.w	ip, [ip]
 8009d0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d12:	ea4c 0707 	orr.w	r7, ip, r7
 8009d16:	f849 7b04 	str.w	r7, [r9], #4
 8009d1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d1e:	40cf      	lsrs	r7, r1
 8009d20:	e7d9      	b.n	8009cd6 <rshift+0x4c>
 8009d22:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d26:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d2a:	e7c2      	b.n	8009cb2 <rshift+0x28>
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	e7e0      	b.n	8009cf2 <rshift+0x68>

08009d30 <__hexdig_fun>:
 8009d30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d34:	2b09      	cmp	r3, #9
 8009d36:	d802      	bhi.n	8009d3e <__hexdig_fun+0xe>
 8009d38:	3820      	subs	r0, #32
 8009d3a:	b2c0      	uxtb	r0, r0
 8009d3c:	4770      	bx	lr
 8009d3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	d801      	bhi.n	8009d4a <__hexdig_fun+0x1a>
 8009d46:	3847      	subs	r0, #71	; 0x47
 8009d48:	e7f7      	b.n	8009d3a <__hexdig_fun+0xa>
 8009d4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d4e:	2b05      	cmp	r3, #5
 8009d50:	d801      	bhi.n	8009d56 <__hexdig_fun+0x26>
 8009d52:	3827      	subs	r0, #39	; 0x27
 8009d54:	e7f1      	b.n	8009d3a <__hexdig_fun+0xa>
 8009d56:	2000      	movs	r0, #0
 8009d58:	4770      	bx	lr
	...

08009d5c <__gethex>:
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	b08b      	sub	sp, #44	; 0x2c
 8009d62:	9306      	str	r3, [sp, #24]
 8009d64:	4bb9      	ldr	r3, [pc, #740]	; (800a04c <__gethex+0x2f0>)
 8009d66:	9002      	str	r0, [sp, #8]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	468b      	mov	fp, r1
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	4690      	mov	r8, r2
 8009d70:	9303      	str	r3, [sp, #12]
 8009d72:	f7f6 f9ed 	bl	8000150 <strlen>
 8009d76:	4682      	mov	sl, r0
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	f8db 2000 	ldr.w	r2, [fp]
 8009d7e:	4403      	add	r3, r0
 8009d80:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009d84:	9307      	str	r3, [sp, #28]
 8009d86:	1c93      	adds	r3, r2, #2
 8009d88:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009d8c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009d90:	32fe      	adds	r2, #254	; 0xfe
 8009d92:	18d1      	adds	r1, r2, r3
 8009d94:	461f      	mov	r7, r3
 8009d96:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d9a:	9101      	str	r1, [sp, #4]
 8009d9c:	2830      	cmp	r0, #48	; 0x30
 8009d9e:	d0f8      	beq.n	8009d92 <__gethex+0x36>
 8009da0:	f7ff ffc6 	bl	8009d30 <__hexdig_fun>
 8009da4:	4604      	mov	r4, r0
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d13a      	bne.n	8009e20 <__gethex+0xc4>
 8009daa:	4652      	mov	r2, sl
 8009dac:	4638      	mov	r0, r7
 8009dae:	9903      	ldr	r1, [sp, #12]
 8009db0:	f001 fa91 	bl	800b2d6 <strncmp>
 8009db4:	4605      	mov	r5, r0
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d166      	bne.n	8009e88 <__gethex+0x12c>
 8009dba:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009dbe:	eb07 060a 	add.w	r6, r7, sl
 8009dc2:	f7ff ffb5 	bl	8009d30 <__hexdig_fun>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d060      	beq.n	8009e8c <__gethex+0x130>
 8009dca:	4633      	mov	r3, r6
 8009dcc:	7818      	ldrb	r0, [r3, #0]
 8009dce:	461f      	mov	r7, r3
 8009dd0:	2830      	cmp	r0, #48	; 0x30
 8009dd2:	f103 0301 	add.w	r3, r3, #1
 8009dd6:	d0f9      	beq.n	8009dcc <__gethex+0x70>
 8009dd8:	f7ff ffaa 	bl	8009d30 <__hexdig_fun>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	fab0 f480 	clz	r4, r0
 8009de2:	4635      	mov	r5, r6
 8009de4:	0964      	lsrs	r4, r4, #5
 8009de6:	9301      	str	r3, [sp, #4]
 8009de8:	463a      	mov	r2, r7
 8009dea:	4616      	mov	r6, r2
 8009dec:	7830      	ldrb	r0, [r6, #0]
 8009dee:	3201      	adds	r2, #1
 8009df0:	f7ff ff9e 	bl	8009d30 <__hexdig_fun>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d1f8      	bne.n	8009dea <__gethex+0x8e>
 8009df8:	4652      	mov	r2, sl
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	9903      	ldr	r1, [sp, #12]
 8009dfe:	f001 fa6a 	bl	800b2d6 <strncmp>
 8009e02:	b980      	cbnz	r0, 8009e26 <__gethex+0xca>
 8009e04:	b94d      	cbnz	r5, 8009e1a <__gethex+0xbe>
 8009e06:	eb06 050a 	add.w	r5, r6, sl
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	4616      	mov	r6, r2
 8009e0e:	7830      	ldrb	r0, [r6, #0]
 8009e10:	3201      	adds	r2, #1
 8009e12:	f7ff ff8d 	bl	8009d30 <__hexdig_fun>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d1f8      	bne.n	8009e0c <__gethex+0xb0>
 8009e1a:	1bad      	subs	r5, r5, r6
 8009e1c:	00ad      	lsls	r5, r5, #2
 8009e1e:	e004      	b.n	8009e2a <__gethex+0xce>
 8009e20:	2400      	movs	r4, #0
 8009e22:	4625      	mov	r5, r4
 8009e24:	e7e0      	b.n	8009de8 <__gethex+0x8c>
 8009e26:	2d00      	cmp	r5, #0
 8009e28:	d1f7      	bne.n	8009e1a <__gethex+0xbe>
 8009e2a:	7833      	ldrb	r3, [r6, #0]
 8009e2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e30:	2b50      	cmp	r3, #80	; 0x50
 8009e32:	d139      	bne.n	8009ea8 <__gethex+0x14c>
 8009e34:	7873      	ldrb	r3, [r6, #1]
 8009e36:	2b2b      	cmp	r3, #43	; 0x2b
 8009e38:	d02a      	beq.n	8009e90 <__gethex+0x134>
 8009e3a:	2b2d      	cmp	r3, #45	; 0x2d
 8009e3c:	d02c      	beq.n	8009e98 <__gethex+0x13c>
 8009e3e:	f04f 0900 	mov.w	r9, #0
 8009e42:	1c71      	adds	r1, r6, #1
 8009e44:	7808      	ldrb	r0, [r1, #0]
 8009e46:	f7ff ff73 	bl	8009d30 <__hexdig_fun>
 8009e4a:	1e43      	subs	r3, r0, #1
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b18      	cmp	r3, #24
 8009e50:	d82a      	bhi.n	8009ea8 <__gethex+0x14c>
 8009e52:	f1a0 0210 	sub.w	r2, r0, #16
 8009e56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e5a:	f7ff ff69 	bl	8009d30 <__hexdig_fun>
 8009e5e:	1e43      	subs	r3, r0, #1
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b18      	cmp	r3, #24
 8009e64:	d91b      	bls.n	8009e9e <__gethex+0x142>
 8009e66:	f1b9 0f00 	cmp.w	r9, #0
 8009e6a:	d000      	beq.n	8009e6e <__gethex+0x112>
 8009e6c:	4252      	negs	r2, r2
 8009e6e:	4415      	add	r5, r2
 8009e70:	f8cb 1000 	str.w	r1, [fp]
 8009e74:	b1d4      	cbz	r4, 8009eac <__gethex+0x150>
 8009e76:	9b01      	ldr	r3, [sp, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bf14      	ite	ne
 8009e7c:	2700      	movne	r7, #0
 8009e7e:	2706      	moveq	r7, #6
 8009e80:	4638      	mov	r0, r7
 8009e82:	b00b      	add	sp, #44	; 0x2c
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e88:	463e      	mov	r6, r7
 8009e8a:	4625      	mov	r5, r4
 8009e8c:	2401      	movs	r4, #1
 8009e8e:	e7cc      	b.n	8009e2a <__gethex+0xce>
 8009e90:	f04f 0900 	mov.w	r9, #0
 8009e94:	1cb1      	adds	r1, r6, #2
 8009e96:	e7d5      	b.n	8009e44 <__gethex+0xe8>
 8009e98:	f04f 0901 	mov.w	r9, #1
 8009e9c:	e7fa      	b.n	8009e94 <__gethex+0x138>
 8009e9e:	230a      	movs	r3, #10
 8009ea0:	fb03 0202 	mla	r2, r3, r2, r0
 8009ea4:	3a10      	subs	r2, #16
 8009ea6:	e7d6      	b.n	8009e56 <__gethex+0xfa>
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	e7e1      	b.n	8009e70 <__gethex+0x114>
 8009eac:	4621      	mov	r1, r4
 8009eae:	1bf3      	subs	r3, r6, r7
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	2b07      	cmp	r3, #7
 8009eb4:	dc0a      	bgt.n	8009ecc <__gethex+0x170>
 8009eb6:	9802      	ldr	r0, [sp, #8]
 8009eb8:	f000 faf0 	bl	800a49c <_Balloc>
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	b940      	cbnz	r0, 8009ed2 <__gethex+0x176>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	21de      	movs	r1, #222	; 0xde
 8009ec4:	4b62      	ldr	r3, [pc, #392]	; (800a050 <__gethex+0x2f4>)
 8009ec6:	4863      	ldr	r0, [pc, #396]	; (800a054 <__gethex+0x2f8>)
 8009ec8:	f001 fa36 	bl	800b338 <__assert_func>
 8009ecc:	3101      	adds	r1, #1
 8009ece:	105b      	asrs	r3, r3, #1
 8009ed0:	e7ef      	b.n	8009eb2 <__gethex+0x156>
 8009ed2:	f04f 0b00 	mov.w	fp, #0
 8009ed6:	f100 0914 	add.w	r9, r0, #20
 8009eda:	f1ca 0301 	rsb	r3, sl, #1
 8009ede:	f8cd 9010 	str.w	r9, [sp, #16]
 8009ee2:	f8cd b004 	str.w	fp, [sp, #4]
 8009ee6:	9308      	str	r3, [sp, #32]
 8009ee8:	42b7      	cmp	r7, r6
 8009eea:	d33f      	bcc.n	8009f6c <__gethex+0x210>
 8009eec:	9f04      	ldr	r7, [sp, #16]
 8009eee:	9b01      	ldr	r3, [sp, #4]
 8009ef0:	f847 3b04 	str.w	r3, [r7], #4
 8009ef4:	eba7 0709 	sub.w	r7, r7, r9
 8009ef8:	10bf      	asrs	r7, r7, #2
 8009efa:	6127      	str	r7, [r4, #16]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fbc3 	bl	800a688 <__hi0bits>
 8009f02:	017f      	lsls	r7, r7, #5
 8009f04:	f8d8 6000 	ldr.w	r6, [r8]
 8009f08:	1a3f      	subs	r7, r7, r0
 8009f0a:	42b7      	cmp	r7, r6
 8009f0c:	dd62      	ble.n	8009fd4 <__gethex+0x278>
 8009f0e:	1bbf      	subs	r7, r7, r6
 8009f10:	4639      	mov	r1, r7
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 ff59 	bl	800adca <__any_on>
 8009f18:	4682      	mov	sl, r0
 8009f1a:	b1a8      	cbz	r0, 8009f48 <__gethex+0x1ec>
 8009f1c:	f04f 0a01 	mov.w	sl, #1
 8009f20:	1e7b      	subs	r3, r7, #1
 8009f22:	1159      	asrs	r1, r3, #5
 8009f24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f28:	f003 021f 	and.w	r2, r3, #31
 8009f2c:	fa0a f202 	lsl.w	r2, sl, r2
 8009f30:	420a      	tst	r2, r1
 8009f32:	d009      	beq.n	8009f48 <__gethex+0x1ec>
 8009f34:	4553      	cmp	r3, sl
 8009f36:	dd05      	ble.n	8009f44 <__gethex+0x1e8>
 8009f38:	4620      	mov	r0, r4
 8009f3a:	1eb9      	subs	r1, r7, #2
 8009f3c:	f000 ff45 	bl	800adca <__any_on>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d144      	bne.n	8009fce <__gethex+0x272>
 8009f44:	f04f 0a02 	mov.w	sl, #2
 8009f48:	4639      	mov	r1, r7
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f7ff fe9d 	bl	8009c8a <rshift>
 8009f50:	443d      	add	r5, r7
 8009f52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f56:	42ab      	cmp	r3, r5
 8009f58:	da4a      	bge.n	8009ff0 <__gethex+0x294>
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	9802      	ldr	r0, [sp, #8]
 8009f5e:	f000 fadd 	bl	800a51c <_Bfree>
 8009f62:	2300      	movs	r3, #0
 8009f64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f66:	27a3      	movs	r7, #163	; 0xa3
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	e789      	b.n	8009e80 <__gethex+0x124>
 8009f6c:	1e73      	subs	r3, r6, #1
 8009f6e:	9a07      	ldr	r2, [sp, #28]
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d019      	beq.n	8009fae <__gethex+0x252>
 8009f7a:	f1bb 0f20 	cmp.w	fp, #32
 8009f7e:	d107      	bne.n	8009f90 <__gethex+0x234>
 8009f80:	9b04      	ldr	r3, [sp, #16]
 8009f82:	9a01      	ldr	r2, [sp, #4]
 8009f84:	f843 2b04 	str.w	r2, [r3], #4
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	469b      	mov	fp, r3
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009f94:	f7ff fecc 	bl	8009d30 <__hexdig_fun>
 8009f98:	9b01      	ldr	r3, [sp, #4]
 8009f9a:	f000 000f 	and.w	r0, r0, #15
 8009f9e:	fa00 f00b 	lsl.w	r0, r0, fp
 8009fa2:	4303      	orrs	r3, r0
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	f10b 0b04 	add.w	fp, fp, #4
 8009faa:	9b05      	ldr	r3, [sp, #20]
 8009fac:	e00d      	b.n	8009fca <__gethex+0x26e>
 8009fae:	9b05      	ldr	r3, [sp, #20]
 8009fb0:	9a08      	ldr	r2, [sp, #32]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	42bb      	cmp	r3, r7
 8009fb6:	d3e0      	bcc.n	8009f7a <__gethex+0x21e>
 8009fb8:	4618      	mov	r0, r3
 8009fba:	4652      	mov	r2, sl
 8009fbc:	9903      	ldr	r1, [sp, #12]
 8009fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc0:	f001 f989 	bl	800b2d6 <strncmp>
 8009fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d1d7      	bne.n	8009f7a <__gethex+0x21e>
 8009fca:	461e      	mov	r6, r3
 8009fcc:	e78c      	b.n	8009ee8 <__gethex+0x18c>
 8009fce:	f04f 0a03 	mov.w	sl, #3
 8009fd2:	e7b9      	b.n	8009f48 <__gethex+0x1ec>
 8009fd4:	da09      	bge.n	8009fea <__gethex+0x28e>
 8009fd6:	1bf7      	subs	r7, r6, r7
 8009fd8:	4621      	mov	r1, r4
 8009fda:	463a      	mov	r2, r7
 8009fdc:	9802      	ldr	r0, [sp, #8]
 8009fde:	f000 fcb5 	bl	800a94c <__lshift>
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	1bed      	subs	r5, r5, r7
 8009fe6:	f100 0914 	add.w	r9, r0, #20
 8009fea:	f04f 0a00 	mov.w	sl, #0
 8009fee:	e7b0      	b.n	8009f52 <__gethex+0x1f6>
 8009ff0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ff4:	42a8      	cmp	r0, r5
 8009ff6:	dd71      	ble.n	800a0dc <__gethex+0x380>
 8009ff8:	1b45      	subs	r5, r0, r5
 8009ffa:	42ae      	cmp	r6, r5
 8009ffc:	dc34      	bgt.n	800a068 <__gethex+0x30c>
 8009ffe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a002:	2b02      	cmp	r3, #2
 800a004:	d028      	beq.n	800a058 <__gethex+0x2fc>
 800a006:	2b03      	cmp	r3, #3
 800a008:	d02a      	beq.n	800a060 <__gethex+0x304>
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d115      	bne.n	800a03a <__gethex+0x2de>
 800a00e:	42ae      	cmp	r6, r5
 800a010:	d113      	bne.n	800a03a <__gethex+0x2de>
 800a012:	2e01      	cmp	r6, #1
 800a014:	d10b      	bne.n	800a02e <__gethex+0x2d2>
 800a016:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a01a:	9a06      	ldr	r2, [sp, #24]
 800a01c:	2762      	movs	r7, #98	; 0x62
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	2301      	movs	r3, #1
 800a022:	6123      	str	r3, [r4, #16]
 800a024:	f8c9 3000 	str.w	r3, [r9]
 800a028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a02a:	601c      	str	r4, [r3, #0]
 800a02c:	e728      	b.n	8009e80 <__gethex+0x124>
 800a02e:	4620      	mov	r0, r4
 800a030:	1e71      	subs	r1, r6, #1
 800a032:	f000 feca 	bl	800adca <__any_on>
 800a036:	2800      	cmp	r0, #0
 800a038:	d1ed      	bne.n	800a016 <__gethex+0x2ba>
 800a03a:	4621      	mov	r1, r4
 800a03c:	9802      	ldr	r0, [sp, #8]
 800a03e:	f000 fa6d 	bl	800a51c <_Bfree>
 800a042:	2300      	movs	r3, #0
 800a044:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a046:	2750      	movs	r7, #80	; 0x50
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	e719      	b.n	8009e80 <__gethex+0x124>
 800a04c:	0800b838 	.word	0x0800b838
 800a050:	0800b75b 	.word	0x0800b75b
 800a054:	0800b7cc 	.word	0x0800b7cc
 800a058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1ed      	bne.n	800a03a <__gethex+0x2de>
 800a05e:	e7da      	b.n	800a016 <__gethex+0x2ba>
 800a060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1d7      	bne.n	800a016 <__gethex+0x2ba>
 800a066:	e7e8      	b.n	800a03a <__gethex+0x2de>
 800a068:	1e6f      	subs	r7, r5, #1
 800a06a:	f1ba 0f00 	cmp.w	sl, #0
 800a06e:	d132      	bne.n	800a0d6 <__gethex+0x37a>
 800a070:	b127      	cbz	r7, 800a07c <__gethex+0x320>
 800a072:	4639      	mov	r1, r7
 800a074:	4620      	mov	r0, r4
 800a076:	f000 fea8 	bl	800adca <__any_on>
 800a07a:	4682      	mov	sl, r0
 800a07c:	2101      	movs	r1, #1
 800a07e:	117b      	asrs	r3, r7, #5
 800a080:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a084:	f007 071f 	and.w	r7, r7, #31
 800a088:	fa01 f707 	lsl.w	r7, r1, r7
 800a08c:	421f      	tst	r7, r3
 800a08e:	f04f 0702 	mov.w	r7, #2
 800a092:	4629      	mov	r1, r5
 800a094:	4620      	mov	r0, r4
 800a096:	bf18      	it	ne
 800a098:	f04a 0a02 	orrne.w	sl, sl, #2
 800a09c:	1b76      	subs	r6, r6, r5
 800a09e:	f7ff fdf4 	bl	8009c8a <rshift>
 800a0a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a0a6:	f1ba 0f00 	cmp.w	sl, #0
 800a0aa:	d048      	beq.n	800a13e <__gethex+0x3e2>
 800a0ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d015      	beq.n	800a0e0 <__gethex+0x384>
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d017      	beq.n	800a0e8 <__gethex+0x38c>
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d109      	bne.n	800a0d0 <__gethex+0x374>
 800a0bc:	f01a 0f02 	tst.w	sl, #2
 800a0c0:	d006      	beq.n	800a0d0 <__gethex+0x374>
 800a0c2:	f8d9 0000 	ldr.w	r0, [r9]
 800a0c6:	ea4a 0a00 	orr.w	sl, sl, r0
 800a0ca:	f01a 0f01 	tst.w	sl, #1
 800a0ce:	d10e      	bne.n	800a0ee <__gethex+0x392>
 800a0d0:	f047 0710 	orr.w	r7, r7, #16
 800a0d4:	e033      	b.n	800a13e <__gethex+0x3e2>
 800a0d6:	f04f 0a01 	mov.w	sl, #1
 800a0da:	e7cf      	b.n	800a07c <__gethex+0x320>
 800a0dc:	2701      	movs	r7, #1
 800a0de:	e7e2      	b.n	800a0a6 <__gethex+0x34a>
 800a0e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0e2:	f1c3 0301 	rsb	r3, r3, #1
 800a0e6:	9315      	str	r3, [sp, #84]	; 0x54
 800a0e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0f0      	beq.n	800a0d0 <__gethex+0x374>
 800a0ee:	f04f 0c00 	mov.w	ip, #0
 800a0f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0f6:	f104 0314 	add.w	r3, r4, #20
 800a0fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a0fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a102:	4618      	mov	r0, r3
 800a104:	f853 2b04 	ldr.w	r2, [r3], #4
 800a108:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a10c:	d01c      	beq.n	800a148 <__gethex+0x3ec>
 800a10e:	3201      	adds	r2, #1
 800a110:	6002      	str	r2, [r0, #0]
 800a112:	2f02      	cmp	r7, #2
 800a114:	f104 0314 	add.w	r3, r4, #20
 800a118:	d13d      	bne.n	800a196 <__gethex+0x43a>
 800a11a:	f8d8 2000 	ldr.w	r2, [r8]
 800a11e:	3a01      	subs	r2, #1
 800a120:	42b2      	cmp	r2, r6
 800a122:	d10a      	bne.n	800a13a <__gethex+0x3de>
 800a124:	2201      	movs	r2, #1
 800a126:	1171      	asrs	r1, r6, #5
 800a128:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a12c:	f006 061f 	and.w	r6, r6, #31
 800a130:	fa02 f606 	lsl.w	r6, r2, r6
 800a134:	421e      	tst	r6, r3
 800a136:	bf18      	it	ne
 800a138:	4617      	movne	r7, r2
 800a13a:	f047 0720 	orr.w	r7, r7, #32
 800a13e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a140:	601c      	str	r4, [r3, #0]
 800a142:	9b06      	ldr	r3, [sp, #24]
 800a144:	601d      	str	r5, [r3, #0]
 800a146:	e69b      	b.n	8009e80 <__gethex+0x124>
 800a148:	4299      	cmp	r1, r3
 800a14a:	f843 cc04 	str.w	ip, [r3, #-4]
 800a14e:	d8d8      	bhi.n	800a102 <__gethex+0x3a6>
 800a150:	68a3      	ldr	r3, [r4, #8]
 800a152:	459b      	cmp	fp, r3
 800a154:	db17      	blt.n	800a186 <__gethex+0x42a>
 800a156:	6861      	ldr	r1, [r4, #4]
 800a158:	9802      	ldr	r0, [sp, #8]
 800a15a:	3101      	adds	r1, #1
 800a15c:	f000 f99e 	bl	800a49c <_Balloc>
 800a160:	4681      	mov	r9, r0
 800a162:	b918      	cbnz	r0, 800a16c <__gethex+0x410>
 800a164:	4602      	mov	r2, r0
 800a166:	2184      	movs	r1, #132	; 0x84
 800a168:	4b19      	ldr	r3, [pc, #100]	; (800a1d0 <__gethex+0x474>)
 800a16a:	e6ac      	b.n	8009ec6 <__gethex+0x16a>
 800a16c:	6922      	ldr	r2, [r4, #16]
 800a16e:	f104 010c 	add.w	r1, r4, #12
 800a172:	3202      	adds	r2, #2
 800a174:	0092      	lsls	r2, r2, #2
 800a176:	300c      	adds	r0, #12
 800a178:	f000 f982 	bl	800a480 <memcpy>
 800a17c:	4621      	mov	r1, r4
 800a17e:	9802      	ldr	r0, [sp, #8]
 800a180:	f000 f9cc 	bl	800a51c <_Bfree>
 800a184:	464c      	mov	r4, r9
 800a186:	6923      	ldr	r3, [r4, #16]
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	6122      	str	r2, [r4, #16]
 800a18c:	2201      	movs	r2, #1
 800a18e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a192:	615a      	str	r2, [r3, #20]
 800a194:	e7bd      	b.n	800a112 <__gethex+0x3b6>
 800a196:	6922      	ldr	r2, [r4, #16]
 800a198:	455a      	cmp	r2, fp
 800a19a:	dd0b      	ble.n	800a1b4 <__gethex+0x458>
 800a19c:	2101      	movs	r1, #1
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7ff fd73 	bl	8009c8a <rshift>
 800a1a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1a8:	3501      	adds	r5, #1
 800a1aa:	42ab      	cmp	r3, r5
 800a1ac:	f6ff aed5 	blt.w	8009f5a <__gethex+0x1fe>
 800a1b0:	2701      	movs	r7, #1
 800a1b2:	e7c2      	b.n	800a13a <__gethex+0x3de>
 800a1b4:	f016 061f 	ands.w	r6, r6, #31
 800a1b8:	d0fa      	beq.n	800a1b0 <__gethex+0x454>
 800a1ba:	449a      	add	sl, r3
 800a1bc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a1c0:	f000 fa62 	bl	800a688 <__hi0bits>
 800a1c4:	f1c6 0620 	rsb	r6, r6, #32
 800a1c8:	42b0      	cmp	r0, r6
 800a1ca:	dbe7      	blt.n	800a19c <__gethex+0x440>
 800a1cc:	e7f0      	b.n	800a1b0 <__gethex+0x454>
 800a1ce:	bf00      	nop
 800a1d0:	0800b75b 	.word	0x0800b75b

0800a1d4 <L_shift>:
 800a1d4:	f1c2 0208 	rsb	r2, r2, #8
 800a1d8:	0092      	lsls	r2, r2, #2
 800a1da:	b570      	push	{r4, r5, r6, lr}
 800a1dc:	f1c2 0620 	rsb	r6, r2, #32
 800a1e0:	6843      	ldr	r3, [r0, #4]
 800a1e2:	6804      	ldr	r4, [r0, #0]
 800a1e4:	fa03 f506 	lsl.w	r5, r3, r6
 800a1e8:	432c      	orrs	r4, r5
 800a1ea:	40d3      	lsrs	r3, r2
 800a1ec:	6004      	str	r4, [r0, #0]
 800a1ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1f2:	4288      	cmp	r0, r1
 800a1f4:	d3f4      	bcc.n	800a1e0 <L_shift+0xc>
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}

0800a1f8 <__match>:
 800a1f8:	b530      	push	{r4, r5, lr}
 800a1fa:	6803      	ldr	r3, [r0, #0]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a202:	b914      	cbnz	r4, 800a20a <__match+0x12>
 800a204:	6003      	str	r3, [r0, #0]
 800a206:	2001      	movs	r0, #1
 800a208:	bd30      	pop	{r4, r5, pc}
 800a20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a20e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a212:	2d19      	cmp	r5, #25
 800a214:	bf98      	it	ls
 800a216:	3220      	addls	r2, #32
 800a218:	42a2      	cmp	r2, r4
 800a21a:	d0f0      	beq.n	800a1fe <__match+0x6>
 800a21c:	2000      	movs	r0, #0
 800a21e:	e7f3      	b.n	800a208 <__match+0x10>

0800a220 <__hexnan>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	2500      	movs	r5, #0
 800a226:	680b      	ldr	r3, [r1, #0]
 800a228:	4682      	mov	sl, r0
 800a22a:	115e      	asrs	r6, r3, #5
 800a22c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a230:	f013 031f 	ands.w	r3, r3, #31
 800a234:	bf18      	it	ne
 800a236:	3604      	addne	r6, #4
 800a238:	1f37      	subs	r7, r6, #4
 800a23a:	4690      	mov	r8, r2
 800a23c:	46b9      	mov	r9, r7
 800a23e:	463c      	mov	r4, r7
 800a240:	46ab      	mov	fp, r5
 800a242:	b087      	sub	sp, #28
 800a244:	6801      	ldr	r1, [r0, #0]
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	f846 5c04 	str.w	r5, [r6, #-4]
 800a24c:	9502      	str	r5, [sp, #8]
 800a24e:	784a      	ldrb	r2, [r1, #1]
 800a250:	1c4b      	adds	r3, r1, #1
 800a252:	9303      	str	r3, [sp, #12]
 800a254:	b342      	cbz	r2, 800a2a8 <__hexnan+0x88>
 800a256:	4610      	mov	r0, r2
 800a258:	9105      	str	r1, [sp, #20]
 800a25a:	9204      	str	r2, [sp, #16]
 800a25c:	f7ff fd68 	bl	8009d30 <__hexdig_fun>
 800a260:	2800      	cmp	r0, #0
 800a262:	d14f      	bne.n	800a304 <__hexnan+0xe4>
 800a264:	9a04      	ldr	r2, [sp, #16]
 800a266:	9905      	ldr	r1, [sp, #20]
 800a268:	2a20      	cmp	r2, #32
 800a26a:	d818      	bhi.n	800a29e <__hexnan+0x7e>
 800a26c:	9b02      	ldr	r3, [sp, #8]
 800a26e:	459b      	cmp	fp, r3
 800a270:	dd13      	ble.n	800a29a <__hexnan+0x7a>
 800a272:	454c      	cmp	r4, r9
 800a274:	d206      	bcs.n	800a284 <__hexnan+0x64>
 800a276:	2d07      	cmp	r5, #7
 800a278:	dc04      	bgt.n	800a284 <__hexnan+0x64>
 800a27a:	462a      	mov	r2, r5
 800a27c:	4649      	mov	r1, r9
 800a27e:	4620      	mov	r0, r4
 800a280:	f7ff ffa8 	bl	800a1d4 <L_shift>
 800a284:	4544      	cmp	r4, r8
 800a286:	d950      	bls.n	800a32a <__hexnan+0x10a>
 800a288:	2300      	movs	r3, #0
 800a28a:	f1a4 0904 	sub.w	r9, r4, #4
 800a28e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a292:	461d      	mov	r5, r3
 800a294:	464c      	mov	r4, r9
 800a296:	f8cd b008 	str.w	fp, [sp, #8]
 800a29a:	9903      	ldr	r1, [sp, #12]
 800a29c:	e7d7      	b.n	800a24e <__hexnan+0x2e>
 800a29e:	2a29      	cmp	r2, #41	; 0x29
 800a2a0:	d156      	bne.n	800a350 <__hexnan+0x130>
 800a2a2:	3102      	adds	r1, #2
 800a2a4:	f8ca 1000 	str.w	r1, [sl]
 800a2a8:	f1bb 0f00 	cmp.w	fp, #0
 800a2ac:	d050      	beq.n	800a350 <__hexnan+0x130>
 800a2ae:	454c      	cmp	r4, r9
 800a2b0:	d206      	bcs.n	800a2c0 <__hexnan+0xa0>
 800a2b2:	2d07      	cmp	r5, #7
 800a2b4:	dc04      	bgt.n	800a2c0 <__hexnan+0xa0>
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f7ff ff8a 	bl	800a1d4 <L_shift>
 800a2c0:	4544      	cmp	r4, r8
 800a2c2:	d934      	bls.n	800a32e <__hexnan+0x10e>
 800a2c4:	4623      	mov	r3, r4
 800a2c6:	f1a8 0204 	sub.w	r2, r8, #4
 800a2ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2ce:	429f      	cmp	r7, r3
 800a2d0:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2d4:	d2f9      	bcs.n	800a2ca <__hexnan+0xaa>
 800a2d6:	1b3b      	subs	r3, r7, r4
 800a2d8:	f023 0303 	bic.w	r3, r3, #3
 800a2dc:	3304      	adds	r3, #4
 800a2de:	3401      	adds	r4, #1
 800a2e0:	3e03      	subs	r6, #3
 800a2e2:	42b4      	cmp	r4, r6
 800a2e4:	bf88      	it	hi
 800a2e6:	2304      	movhi	r3, #4
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	4443      	add	r3, r8
 800a2ec:	f843 2b04 	str.w	r2, [r3], #4
 800a2f0:	429f      	cmp	r7, r3
 800a2f2:	d2fb      	bcs.n	800a2ec <__hexnan+0xcc>
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	b91b      	cbnz	r3, 800a300 <__hexnan+0xe0>
 800a2f8:	4547      	cmp	r7, r8
 800a2fa:	d127      	bne.n	800a34c <__hexnan+0x12c>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	603b      	str	r3, [r7, #0]
 800a300:	2005      	movs	r0, #5
 800a302:	e026      	b.n	800a352 <__hexnan+0x132>
 800a304:	3501      	adds	r5, #1
 800a306:	2d08      	cmp	r5, #8
 800a308:	f10b 0b01 	add.w	fp, fp, #1
 800a30c:	dd06      	ble.n	800a31c <__hexnan+0xfc>
 800a30e:	4544      	cmp	r4, r8
 800a310:	d9c3      	bls.n	800a29a <__hexnan+0x7a>
 800a312:	2300      	movs	r3, #0
 800a314:	2501      	movs	r5, #1
 800a316:	f844 3c04 	str.w	r3, [r4, #-4]
 800a31a:	3c04      	subs	r4, #4
 800a31c:	6822      	ldr	r2, [r4, #0]
 800a31e:	f000 000f 	and.w	r0, r0, #15
 800a322:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a326:	6022      	str	r2, [r4, #0]
 800a328:	e7b7      	b.n	800a29a <__hexnan+0x7a>
 800a32a:	2508      	movs	r5, #8
 800a32c:	e7b5      	b.n	800a29a <__hexnan+0x7a>
 800a32e:	9b01      	ldr	r3, [sp, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d0df      	beq.n	800a2f4 <__hexnan+0xd4>
 800a334:	f04f 32ff 	mov.w	r2, #4294967295
 800a338:	f1c3 0320 	rsb	r3, r3, #32
 800a33c:	fa22 f303 	lsr.w	r3, r2, r3
 800a340:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a344:	401a      	ands	r2, r3
 800a346:	f846 2c04 	str.w	r2, [r6, #-4]
 800a34a:	e7d3      	b.n	800a2f4 <__hexnan+0xd4>
 800a34c:	3f04      	subs	r7, #4
 800a34e:	e7d1      	b.n	800a2f4 <__hexnan+0xd4>
 800a350:	2004      	movs	r0, #4
 800a352:	b007      	add	sp, #28
 800a354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a358 <_localeconv_r>:
 800a358:	4800      	ldr	r0, [pc, #0]	; (800a35c <_localeconv_r+0x4>)
 800a35a:	4770      	bx	lr
 800a35c:	20000164 	.word	0x20000164

0800a360 <__retarget_lock_init_recursive>:
 800a360:	4770      	bx	lr

0800a362 <__retarget_lock_acquire_recursive>:
 800a362:	4770      	bx	lr

0800a364 <__retarget_lock_release_recursive>:
 800a364:	4770      	bx	lr

0800a366 <__swhatbuf_r>:
 800a366:	b570      	push	{r4, r5, r6, lr}
 800a368:	460e      	mov	r6, r1
 800a36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36e:	4614      	mov	r4, r2
 800a370:	2900      	cmp	r1, #0
 800a372:	461d      	mov	r5, r3
 800a374:	b096      	sub	sp, #88	; 0x58
 800a376:	da07      	bge.n	800a388 <__swhatbuf_r+0x22>
 800a378:	2300      	movs	r3, #0
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	89b3      	ldrh	r3, [r6, #12]
 800a37e:	061a      	lsls	r2, r3, #24
 800a380:	d410      	bmi.n	800a3a4 <__swhatbuf_r+0x3e>
 800a382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a386:	e00e      	b.n	800a3a6 <__swhatbuf_r+0x40>
 800a388:	466a      	mov	r2, sp
 800a38a:	f001 f815 	bl	800b3b8 <_fstat_r>
 800a38e:	2800      	cmp	r0, #0
 800a390:	dbf2      	blt.n	800a378 <__swhatbuf_r+0x12>
 800a392:	9a01      	ldr	r2, [sp, #4]
 800a394:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a398:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a39c:	425a      	negs	r2, r3
 800a39e:	415a      	adcs	r2, r3
 800a3a0:	602a      	str	r2, [r5, #0]
 800a3a2:	e7ee      	b.n	800a382 <__swhatbuf_r+0x1c>
 800a3a4:	2340      	movs	r3, #64	; 0x40
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	b016      	add	sp, #88	; 0x58
 800a3ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a3b0 <__smakebuf_r>:
 800a3b0:	898b      	ldrh	r3, [r1, #12]
 800a3b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3b4:	079d      	lsls	r5, r3, #30
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	d507      	bpl.n	800a3cc <__smakebuf_r+0x1c>
 800a3bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	6123      	str	r3, [r4, #16]
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	6163      	str	r3, [r4, #20]
 800a3c8:	b002      	add	sp, #8
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	466a      	mov	r2, sp
 800a3ce:	ab01      	add	r3, sp, #4
 800a3d0:	f7ff ffc9 	bl	800a366 <__swhatbuf_r>
 800a3d4:	9900      	ldr	r1, [sp, #0]
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f000 fd71 	bl	800aec0 <_malloc_r>
 800a3de:	b948      	cbnz	r0, 800a3f4 <__smakebuf_r+0x44>
 800a3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e4:	059a      	lsls	r2, r3, #22
 800a3e6:	d4ef      	bmi.n	800a3c8 <__smakebuf_r+0x18>
 800a3e8:	f023 0303 	bic.w	r3, r3, #3
 800a3ec:	f043 0302 	orr.w	r3, r3, #2
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	e7e3      	b.n	800a3bc <__smakebuf_r+0xc>
 800a3f4:	4b0d      	ldr	r3, [pc, #52]	; (800a42c <__smakebuf_r+0x7c>)
 800a3f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	6020      	str	r0, [r4, #0]
 800a3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a400:	81a3      	strh	r3, [r4, #12]
 800a402:	9b00      	ldr	r3, [sp, #0]
 800a404:	6120      	str	r0, [r4, #16]
 800a406:	6163      	str	r3, [r4, #20]
 800a408:	9b01      	ldr	r3, [sp, #4]
 800a40a:	b15b      	cbz	r3, 800a424 <__smakebuf_r+0x74>
 800a40c:	4630      	mov	r0, r6
 800a40e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a412:	f000 ffe3 	bl	800b3dc <_isatty_r>
 800a416:	b128      	cbz	r0, 800a424 <__smakebuf_r+0x74>
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	f023 0303 	bic.w	r3, r3, #3
 800a41e:	f043 0301 	orr.w	r3, r3, #1
 800a422:	81a3      	strh	r3, [r4, #12]
 800a424:	89a0      	ldrh	r0, [r4, #12]
 800a426:	4305      	orrs	r5, r0
 800a428:	81a5      	strh	r5, [r4, #12]
 800a42a:	e7cd      	b.n	800a3c8 <__smakebuf_r+0x18>
 800a42c:	08009ae9 	.word	0x08009ae9

0800a430 <malloc>:
 800a430:	4b02      	ldr	r3, [pc, #8]	; (800a43c <malloc+0xc>)
 800a432:	4601      	mov	r1, r0
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f000 bd43 	b.w	800aec0 <_malloc_r>
 800a43a:	bf00      	nop
 800a43c:	2000000c 	.word	0x2000000c

0800a440 <__ascii_mbtowc>:
 800a440:	b082      	sub	sp, #8
 800a442:	b901      	cbnz	r1, 800a446 <__ascii_mbtowc+0x6>
 800a444:	a901      	add	r1, sp, #4
 800a446:	b142      	cbz	r2, 800a45a <__ascii_mbtowc+0x1a>
 800a448:	b14b      	cbz	r3, 800a45e <__ascii_mbtowc+0x1e>
 800a44a:	7813      	ldrb	r3, [r2, #0]
 800a44c:	600b      	str	r3, [r1, #0]
 800a44e:	7812      	ldrb	r2, [r2, #0]
 800a450:	1e10      	subs	r0, r2, #0
 800a452:	bf18      	it	ne
 800a454:	2001      	movne	r0, #1
 800a456:	b002      	add	sp, #8
 800a458:	4770      	bx	lr
 800a45a:	4610      	mov	r0, r2
 800a45c:	e7fb      	b.n	800a456 <__ascii_mbtowc+0x16>
 800a45e:	f06f 0001 	mvn.w	r0, #1
 800a462:	e7f8      	b.n	800a456 <__ascii_mbtowc+0x16>

0800a464 <memchr>:
 800a464:	4603      	mov	r3, r0
 800a466:	b510      	push	{r4, lr}
 800a468:	b2c9      	uxtb	r1, r1
 800a46a:	4402      	add	r2, r0
 800a46c:	4293      	cmp	r3, r2
 800a46e:	4618      	mov	r0, r3
 800a470:	d101      	bne.n	800a476 <memchr+0x12>
 800a472:	2000      	movs	r0, #0
 800a474:	e003      	b.n	800a47e <memchr+0x1a>
 800a476:	7804      	ldrb	r4, [r0, #0]
 800a478:	3301      	adds	r3, #1
 800a47a:	428c      	cmp	r4, r1
 800a47c:	d1f6      	bne.n	800a46c <memchr+0x8>
 800a47e:	bd10      	pop	{r4, pc}

0800a480 <memcpy>:
 800a480:	440a      	add	r2, r1
 800a482:	4291      	cmp	r1, r2
 800a484:	f100 33ff 	add.w	r3, r0, #4294967295
 800a488:	d100      	bne.n	800a48c <memcpy+0xc>
 800a48a:	4770      	bx	lr
 800a48c:	b510      	push	{r4, lr}
 800a48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a492:	4291      	cmp	r1, r2
 800a494:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a498:	d1f9      	bne.n	800a48e <memcpy+0xe>
 800a49a:	bd10      	pop	{r4, pc}

0800a49c <_Balloc>:
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	460d      	mov	r5, r1
 800a4a4:	b976      	cbnz	r6, 800a4c4 <_Balloc+0x28>
 800a4a6:	2010      	movs	r0, #16
 800a4a8:	f7ff ffc2 	bl	800a430 <malloc>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	6260      	str	r0, [r4, #36]	; 0x24
 800a4b0:	b920      	cbnz	r0, 800a4bc <_Balloc+0x20>
 800a4b2:	2166      	movs	r1, #102	; 0x66
 800a4b4:	4b17      	ldr	r3, [pc, #92]	; (800a514 <_Balloc+0x78>)
 800a4b6:	4818      	ldr	r0, [pc, #96]	; (800a518 <_Balloc+0x7c>)
 800a4b8:	f000 ff3e 	bl	800b338 <__assert_func>
 800a4bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4c0:	6006      	str	r6, [r0, #0]
 800a4c2:	60c6      	str	r6, [r0, #12]
 800a4c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4c6:	68f3      	ldr	r3, [r6, #12]
 800a4c8:	b183      	cbz	r3, 800a4ec <_Balloc+0x50>
 800a4ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4d2:	b9b8      	cbnz	r0, 800a504 <_Balloc+0x68>
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	fa01 f605 	lsl.w	r6, r1, r5
 800a4da:	1d72      	adds	r2, r6, #5
 800a4dc:	4620      	mov	r0, r4
 800a4de:	0092      	lsls	r2, r2, #2
 800a4e0:	f000 fc94 	bl	800ae0c <_calloc_r>
 800a4e4:	b160      	cbz	r0, 800a500 <_Balloc+0x64>
 800a4e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4ea:	e00e      	b.n	800a50a <_Balloc+0x6e>
 800a4ec:	2221      	movs	r2, #33	; 0x21
 800a4ee:	2104      	movs	r1, #4
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f000 fc8b 	bl	800ae0c <_calloc_r>
 800a4f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4f8:	60f0      	str	r0, [r6, #12]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1e4      	bne.n	800a4ca <_Balloc+0x2e>
 800a500:	2000      	movs	r0, #0
 800a502:	bd70      	pop	{r4, r5, r6, pc}
 800a504:	6802      	ldr	r2, [r0, #0]
 800a506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a50a:	2300      	movs	r3, #0
 800a50c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a510:	e7f7      	b.n	800a502 <_Balloc+0x66>
 800a512:	bf00      	nop
 800a514:	0800b6e5 	.word	0x0800b6e5
 800a518:	0800b84c 	.word	0x0800b84c

0800a51c <_Bfree>:
 800a51c:	b570      	push	{r4, r5, r6, lr}
 800a51e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a520:	4605      	mov	r5, r0
 800a522:	460c      	mov	r4, r1
 800a524:	b976      	cbnz	r6, 800a544 <_Bfree+0x28>
 800a526:	2010      	movs	r0, #16
 800a528:	f7ff ff82 	bl	800a430 <malloc>
 800a52c:	4602      	mov	r2, r0
 800a52e:	6268      	str	r0, [r5, #36]	; 0x24
 800a530:	b920      	cbnz	r0, 800a53c <_Bfree+0x20>
 800a532:	218a      	movs	r1, #138	; 0x8a
 800a534:	4b08      	ldr	r3, [pc, #32]	; (800a558 <_Bfree+0x3c>)
 800a536:	4809      	ldr	r0, [pc, #36]	; (800a55c <_Bfree+0x40>)
 800a538:	f000 fefe 	bl	800b338 <__assert_func>
 800a53c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a540:	6006      	str	r6, [r0, #0]
 800a542:	60c6      	str	r6, [r0, #12]
 800a544:	b13c      	cbz	r4, 800a556 <_Bfree+0x3a>
 800a546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a548:	6862      	ldr	r2, [r4, #4]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a550:	6021      	str	r1, [r4, #0]
 800a552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a556:	bd70      	pop	{r4, r5, r6, pc}
 800a558:	0800b6e5 	.word	0x0800b6e5
 800a55c:	0800b84c 	.word	0x0800b84c

0800a560 <__multadd>:
 800a560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a564:	4698      	mov	r8, r3
 800a566:	460c      	mov	r4, r1
 800a568:	2300      	movs	r3, #0
 800a56a:	690e      	ldr	r6, [r1, #16]
 800a56c:	4607      	mov	r7, r0
 800a56e:	f101 0014 	add.w	r0, r1, #20
 800a572:	6805      	ldr	r5, [r0, #0]
 800a574:	3301      	adds	r3, #1
 800a576:	b2a9      	uxth	r1, r5
 800a578:	fb02 8101 	mla	r1, r2, r1, r8
 800a57c:	0c2d      	lsrs	r5, r5, #16
 800a57e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a582:	fb02 c505 	mla	r5, r2, r5, ip
 800a586:	b289      	uxth	r1, r1
 800a588:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a58c:	429e      	cmp	r6, r3
 800a58e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a592:	f840 1b04 	str.w	r1, [r0], #4
 800a596:	dcec      	bgt.n	800a572 <__multadd+0x12>
 800a598:	f1b8 0f00 	cmp.w	r8, #0
 800a59c:	d022      	beq.n	800a5e4 <__multadd+0x84>
 800a59e:	68a3      	ldr	r3, [r4, #8]
 800a5a0:	42b3      	cmp	r3, r6
 800a5a2:	dc19      	bgt.n	800a5d8 <__multadd+0x78>
 800a5a4:	6861      	ldr	r1, [r4, #4]
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	3101      	adds	r1, #1
 800a5aa:	f7ff ff77 	bl	800a49c <_Balloc>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	b928      	cbnz	r0, 800a5be <__multadd+0x5e>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	21b5      	movs	r1, #181	; 0xb5
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <__multadd+0x8c>)
 800a5b8:	480d      	ldr	r0, [pc, #52]	; (800a5f0 <__multadd+0x90>)
 800a5ba:	f000 febd 	bl	800b338 <__assert_func>
 800a5be:	6922      	ldr	r2, [r4, #16]
 800a5c0:	f104 010c 	add.w	r1, r4, #12
 800a5c4:	3202      	adds	r2, #2
 800a5c6:	0092      	lsls	r2, r2, #2
 800a5c8:	300c      	adds	r0, #12
 800a5ca:	f7ff ff59 	bl	800a480 <memcpy>
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	f7ff ffa3 	bl	800a51c <_Bfree>
 800a5d6:	462c      	mov	r4, r5
 800a5d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a5dc:	3601      	adds	r6, #1
 800a5de:	f8c3 8014 	str.w	r8, [r3, #20]
 800a5e2:	6126      	str	r6, [r4, #16]
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ea:	bf00      	nop
 800a5ec:	0800b75b 	.word	0x0800b75b
 800a5f0:	0800b84c 	.word	0x0800b84c

0800a5f4 <__s2b>:
 800a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	4615      	mov	r5, r2
 800a5fa:	2209      	movs	r2, #9
 800a5fc:	461f      	mov	r7, r3
 800a5fe:	3308      	adds	r3, #8
 800a600:	460c      	mov	r4, r1
 800a602:	fb93 f3f2 	sdiv	r3, r3, r2
 800a606:	4606      	mov	r6, r0
 800a608:	2201      	movs	r2, #1
 800a60a:	2100      	movs	r1, #0
 800a60c:	429a      	cmp	r2, r3
 800a60e:	db09      	blt.n	800a624 <__s2b+0x30>
 800a610:	4630      	mov	r0, r6
 800a612:	f7ff ff43 	bl	800a49c <_Balloc>
 800a616:	b940      	cbnz	r0, 800a62a <__s2b+0x36>
 800a618:	4602      	mov	r2, r0
 800a61a:	21ce      	movs	r1, #206	; 0xce
 800a61c:	4b18      	ldr	r3, [pc, #96]	; (800a680 <__s2b+0x8c>)
 800a61e:	4819      	ldr	r0, [pc, #100]	; (800a684 <__s2b+0x90>)
 800a620:	f000 fe8a 	bl	800b338 <__assert_func>
 800a624:	0052      	lsls	r2, r2, #1
 800a626:	3101      	adds	r1, #1
 800a628:	e7f0      	b.n	800a60c <__s2b+0x18>
 800a62a:	9b08      	ldr	r3, [sp, #32]
 800a62c:	2d09      	cmp	r5, #9
 800a62e:	6143      	str	r3, [r0, #20]
 800a630:	f04f 0301 	mov.w	r3, #1
 800a634:	6103      	str	r3, [r0, #16]
 800a636:	dd16      	ble.n	800a666 <__s2b+0x72>
 800a638:	f104 0909 	add.w	r9, r4, #9
 800a63c:	46c8      	mov	r8, r9
 800a63e:	442c      	add	r4, r5
 800a640:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a644:	4601      	mov	r1, r0
 800a646:	220a      	movs	r2, #10
 800a648:	4630      	mov	r0, r6
 800a64a:	3b30      	subs	r3, #48	; 0x30
 800a64c:	f7ff ff88 	bl	800a560 <__multadd>
 800a650:	45a0      	cmp	r8, r4
 800a652:	d1f5      	bne.n	800a640 <__s2b+0x4c>
 800a654:	f1a5 0408 	sub.w	r4, r5, #8
 800a658:	444c      	add	r4, r9
 800a65a:	1b2d      	subs	r5, r5, r4
 800a65c:	1963      	adds	r3, r4, r5
 800a65e:	42bb      	cmp	r3, r7
 800a660:	db04      	blt.n	800a66c <__s2b+0x78>
 800a662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a666:	2509      	movs	r5, #9
 800a668:	340a      	adds	r4, #10
 800a66a:	e7f6      	b.n	800a65a <__s2b+0x66>
 800a66c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a670:	4601      	mov	r1, r0
 800a672:	220a      	movs	r2, #10
 800a674:	4630      	mov	r0, r6
 800a676:	3b30      	subs	r3, #48	; 0x30
 800a678:	f7ff ff72 	bl	800a560 <__multadd>
 800a67c:	e7ee      	b.n	800a65c <__s2b+0x68>
 800a67e:	bf00      	nop
 800a680:	0800b75b 	.word	0x0800b75b
 800a684:	0800b84c 	.word	0x0800b84c

0800a688 <__hi0bits>:
 800a688:	0c02      	lsrs	r2, r0, #16
 800a68a:	0412      	lsls	r2, r2, #16
 800a68c:	4603      	mov	r3, r0
 800a68e:	b9ca      	cbnz	r2, 800a6c4 <__hi0bits+0x3c>
 800a690:	0403      	lsls	r3, r0, #16
 800a692:	2010      	movs	r0, #16
 800a694:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a698:	bf04      	itt	eq
 800a69a:	021b      	lsleq	r3, r3, #8
 800a69c:	3008      	addeq	r0, #8
 800a69e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a6a2:	bf04      	itt	eq
 800a6a4:	011b      	lsleq	r3, r3, #4
 800a6a6:	3004      	addeq	r0, #4
 800a6a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a6ac:	bf04      	itt	eq
 800a6ae:	009b      	lsleq	r3, r3, #2
 800a6b0:	3002      	addeq	r0, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	db05      	blt.n	800a6c2 <__hi0bits+0x3a>
 800a6b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a6ba:	f100 0001 	add.w	r0, r0, #1
 800a6be:	bf08      	it	eq
 800a6c0:	2020      	moveq	r0, #32
 800a6c2:	4770      	bx	lr
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	e7e5      	b.n	800a694 <__hi0bits+0xc>

0800a6c8 <__lo0bits>:
 800a6c8:	6803      	ldr	r3, [r0, #0]
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	f013 0007 	ands.w	r0, r3, #7
 800a6d0:	d00b      	beq.n	800a6ea <__lo0bits+0x22>
 800a6d2:	07d9      	lsls	r1, r3, #31
 800a6d4:	d422      	bmi.n	800a71c <__lo0bits+0x54>
 800a6d6:	0798      	lsls	r0, r3, #30
 800a6d8:	bf49      	itett	mi
 800a6da:	085b      	lsrmi	r3, r3, #1
 800a6dc:	089b      	lsrpl	r3, r3, #2
 800a6de:	2001      	movmi	r0, #1
 800a6e0:	6013      	strmi	r3, [r2, #0]
 800a6e2:	bf5c      	itt	pl
 800a6e4:	2002      	movpl	r0, #2
 800a6e6:	6013      	strpl	r3, [r2, #0]
 800a6e8:	4770      	bx	lr
 800a6ea:	b299      	uxth	r1, r3
 800a6ec:	b909      	cbnz	r1, 800a6f2 <__lo0bits+0x2a>
 800a6ee:	2010      	movs	r0, #16
 800a6f0:	0c1b      	lsrs	r3, r3, #16
 800a6f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a6f6:	bf04      	itt	eq
 800a6f8:	0a1b      	lsreq	r3, r3, #8
 800a6fa:	3008      	addeq	r0, #8
 800a6fc:	0719      	lsls	r1, r3, #28
 800a6fe:	bf04      	itt	eq
 800a700:	091b      	lsreq	r3, r3, #4
 800a702:	3004      	addeq	r0, #4
 800a704:	0799      	lsls	r1, r3, #30
 800a706:	bf04      	itt	eq
 800a708:	089b      	lsreq	r3, r3, #2
 800a70a:	3002      	addeq	r0, #2
 800a70c:	07d9      	lsls	r1, r3, #31
 800a70e:	d403      	bmi.n	800a718 <__lo0bits+0x50>
 800a710:	085b      	lsrs	r3, r3, #1
 800a712:	f100 0001 	add.w	r0, r0, #1
 800a716:	d003      	beq.n	800a720 <__lo0bits+0x58>
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	4770      	bx	lr
 800a71c:	2000      	movs	r0, #0
 800a71e:	4770      	bx	lr
 800a720:	2020      	movs	r0, #32
 800a722:	4770      	bx	lr

0800a724 <__i2b>:
 800a724:	b510      	push	{r4, lr}
 800a726:	460c      	mov	r4, r1
 800a728:	2101      	movs	r1, #1
 800a72a:	f7ff feb7 	bl	800a49c <_Balloc>
 800a72e:	4602      	mov	r2, r0
 800a730:	b928      	cbnz	r0, 800a73e <__i2b+0x1a>
 800a732:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a736:	4b04      	ldr	r3, [pc, #16]	; (800a748 <__i2b+0x24>)
 800a738:	4804      	ldr	r0, [pc, #16]	; (800a74c <__i2b+0x28>)
 800a73a:	f000 fdfd 	bl	800b338 <__assert_func>
 800a73e:	2301      	movs	r3, #1
 800a740:	6144      	str	r4, [r0, #20]
 800a742:	6103      	str	r3, [r0, #16]
 800a744:	bd10      	pop	{r4, pc}
 800a746:	bf00      	nop
 800a748:	0800b75b 	.word	0x0800b75b
 800a74c:	0800b84c 	.word	0x0800b84c

0800a750 <__multiply>:
 800a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	4614      	mov	r4, r2
 800a756:	690a      	ldr	r2, [r1, #16]
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	460d      	mov	r5, r1
 800a75c:	429a      	cmp	r2, r3
 800a75e:	bfbe      	ittt	lt
 800a760:	460b      	movlt	r3, r1
 800a762:	4625      	movlt	r5, r4
 800a764:	461c      	movlt	r4, r3
 800a766:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a76a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a76e:	68ab      	ldr	r3, [r5, #8]
 800a770:	6869      	ldr	r1, [r5, #4]
 800a772:	eb0a 0709 	add.w	r7, sl, r9
 800a776:	42bb      	cmp	r3, r7
 800a778:	b085      	sub	sp, #20
 800a77a:	bfb8      	it	lt
 800a77c:	3101      	addlt	r1, #1
 800a77e:	f7ff fe8d 	bl	800a49c <_Balloc>
 800a782:	b930      	cbnz	r0, 800a792 <__multiply+0x42>
 800a784:	4602      	mov	r2, r0
 800a786:	f240 115d 	movw	r1, #349	; 0x15d
 800a78a:	4b41      	ldr	r3, [pc, #260]	; (800a890 <__multiply+0x140>)
 800a78c:	4841      	ldr	r0, [pc, #260]	; (800a894 <__multiply+0x144>)
 800a78e:	f000 fdd3 	bl	800b338 <__assert_func>
 800a792:	f100 0614 	add.w	r6, r0, #20
 800a796:	4633      	mov	r3, r6
 800a798:	2200      	movs	r2, #0
 800a79a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a79e:	4543      	cmp	r3, r8
 800a7a0:	d31e      	bcc.n	800a7e0 <__multiply+0x90>
 800a7a2:	f105 0c14 	add.w	ip, r5, #20
 800a7a6:	f104 0314 	add.w	r3, r4, #20
 800a7aa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a7ae:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a7b2:	9202      	str	r2, [sp, #8]
 800a7b4:	ebac 0205 	sub.w	r2, ip, r5
 800a7b8:	3a15      	subs	r2, #21
 800a7ba:	f022 0203 	bic.w	r2, r2, #3
 800a7be:	3204      	adds	r2, #4
 800a7c0:	f105 0115 	add.w	r1, r5, #21
 800a7c4:	458c      	cmp	ip, r1
 800a7c6:	bf38      	it	cc
 800a7c8:	2204      	movcc	r2, #4
 800a7ca:	9201      	str	r2, [sp, #4]
 800a7cc:	9a02      	ldr	r2, [sp, #8]
 800a7ce:	9303      	str	r3, [sp, #12]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d808      	bhi.n	800a7e6 <__multiply+0x96>
 800a7d4:	2f00      	cmp	r7, #0
 800a7d6:	dc55      	bgt.n	800a884 <__multiply+0x134>
 800a7d8:	6107      	str	r7, [r0, #16]
 800a7da:	b005      	add	sp, #20
 800a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e0:	f843 2b04 	str.w	r2, [r3], #4
 800a7e4:	e7db      	b.n	800a79e <__multiply+0x4e>
 800a7e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a7ea:	f1ba 0f00 	cmp.w	sl, #0
 800a7ee:	d020      	beq.n	800a832 <__multiply+0xe2>
 800a7f0:	46b1      	mov	r9, r6
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f105 0e14 	add.w	lr, r5, #20
 800a7f8:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a7fc:	f8d9 b000 	ldr.w	fp, [r9]
 800a800:	b2a1      	uxth	r1, r4
 800a802:	fa1f fb8b 	uxth.w	fp, fp
 800a806:	fb0a b101 	mla	r1, sl, r1, fp
 800a80a:	4411      	add	r1, r2
 800a80c:	f8d9 2000 	ldr.w	r2, [r9]
 800a810:	0c24      	lsrs	r4, r4, #16
 800a812:	0c12      	lsrs	r2, r2, #16
 800a814:	fb0a 2404 	mla	r4, sl, r4, r2
 800a818:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a81c:	b289      	uxth	r1, r1
 800a81e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a822:	45f4      	cmp	ip, lr
 800a824:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a828:	f849 1b04 	str.w	r1, [r9], #4
 800a82c:	d8e4      	bhi.n	800a7f8 <__multiply+0xa8>
 800a82e:	9901      	ldr	r1, [sp, #4]
 800a830:	5072      	str	r2, [r6, r1]
 800a832:	9a03      	ldr	r2, [sp, #12]
 800a834:	3304      	adds	r3, #4
 800a836:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a83a:	f1b9 0f00 	cmp.w	r9, #0
 800a83e:	d01f      	beq.n	800a880 <__multiply+0x130>
 800a840:	46b6      	mov	lr, r6
 800a842:	f04f 0a00 	mov.w	sl, #0
 800a846:	6834      	ldr	r4, [r6, #0]
 800a848:	f105 0114 	add.w	r1, r5, #20
 800a84c:	880a      	ldrh	r2, [r1, #0]
 800a84e:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a852:	b2a4      	uxth	r4, r4
 800a854:	fb09 b202 	mla	r2, r9, r2, fp
 800a858:	4492      	add	sl, r2
 800a85a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a85e:	f84e 4b04 	str.w	r4, [lr], #4
 800a862:	f851 4b04 	ldr.w	r4, [r1], #4
 800a866:	f8be 2000 	ldrh.w	r2, [lr]
 800a86a:	0c24      	lsrs	r4, r4, #16
 800a86c:	fb09 2404 	mla	r4, r9, r4, r2
 800a870:	458c      	cmp	ip, r1
 800a872:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a876:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a87a:	d8e7      	bhi.n	800a84c <__multiply+0xfc>
 800a87c:	9a01      	ldr	r2, [sp, #4]
 800a87e:	50b4      	str	r4, [r6, r2]
 800a880:	3604      	adds	r6, #4
 800a882:	e7a3      	b.n	800a7cc <__multiply+0x7c>
 800a884:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1a5      	bne.n	800a7d8 <__multiply+0x88>
 800a88c:	3f01      	subs	r7, #1
 800a88e:	e7a1      	b.n	800a7d4 <__multiply+0x84>
 800a890:	0800b75b 	.word	0x0800b75b
 800a894:	0800b84c 	.word	0x0800b84c

0800a898 <__pow5mult>:
 800a898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a89c:	4615      	mov	r5, r2
 800a89e:	f012 0203 	ands.w	r2, r2, #3
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	d007      	beq.n	800a8b8 <__pow5mult+0x20>
 800a8a8:	4c25      	ldr	r4, [pc, #148]	; (800a940 <__pow5mult+0xa8>)
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8b2:	f7ff fe55 	bl	800a560 <__multadd>
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	10ad      	asrs	r5, r5, #2
 800a8ba:	d03d      	beq.n	800a938 <__pow5mult+0xa0>
 800a8bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a8be:	b97c      	cbnz	r4, 800a8e0 <__pow5mult+0x48>
 800a8c0:	2010      	movs	r0, #16
 800a8c2:	f7ff fdb5 	bl	800a430 <malloc>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	6270      	str	r0, [r6, #36]	; 0x24
 800a8ca:	b928      	cbnz	r0, 800a8d8 <__pow5mult+0x40>
 800a8cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a8d0:	4b1c      	ldr	r3, [pc, #112]	; (800a944 <__pow5mult+0xac>)
 800a8d2:	481d      	ldr	r0, [pc, #116]	; (800a948 <__pow5mult+0xb0>)
 800a8d4:	f000 fd30 	bl	800b338 <__assert_func>
 800a8d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8dc:	6004      	str	r4, [r0, #0]
 800a8de:	60c4      	str	r4, [r0, #12]
 800a8e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a8e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8e8:	b94c      	cbnz	r4, 800a8fe <__pow5mult+0x66>
 800a8ea:	f240 2171 	movw	r1, #625	; 0x271
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ff18 	bl	800a724 <__i2b>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	f04f 0900 	mov.w	r9, #0
 800a902:	07eb      	lsls	r3, r5, #31
 800a904:	d50a      	bpl.n	800a91c <__pow5mult+0x84>
 800a906:	4639      	mov	r1, r7
 800a908:	4622      	mov	r2, r4
 800a90a:	4630      	mov	r0, r6
 800a90c:	f7ff ff20 	bl	800a750 <__multiply>
 800a910:	4680      	mov	r8, r0
 800a912:	4639      	mov	r1, r7
 800a914:	4630      	mov	r0, r6
 800a916:	f7ff fe01 	bl	800a51c <_Bfree>
 800a91a:	4647      	mov	r7, r8
 800a91c:	106d      	asrs	r5, r5, #1
 800a91e:	d00b      	beq.n	800a938 <__pow5mult+0xa0>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	b938      	cbnz	r0, 800a934 <__pow5mult+0x9c>
 800a924:	4622      	mov	r2, r4
 800a926:	4621      	mov	r1, r4
 800a928:	4630      	mov	r0, r6
 800a92a:	f7ff ff11 	bl	800a750 <__multiply>
 800a92e:	6020      	str	r0, [r4, #0]
 800a930:	f8c0 9000 	str.w	r9, [r0]
 800a934:	4604      	mov	r4, r0
 800a936:	e7e4      	b.n	800a902 <__pow5mult+0x6a>
 800a938:	4638      	mov	r0, r7
 800a93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a93e:	bf00      	nop
 800a940:	0800b9a0 	.word	0x0800b9a0
 800a944:	0800b6e5 	.word	0x0800b6e5
 800a948:	0800b84c 	.word	0x0800b84c

0800a94c <__lshift>:
 800a94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a950:	460c      	mov	r4, r1
 800a952:	4607      	mov	r7, r0
 800a954:	4691      	mov	r9, r2
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	6849      	ldr	r1, [r1, #4]
 800a95a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a95e:	68a3      	ldr	r3, [r4, #8]
 800a960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a964:	f108 0601 	add.w	r6, r8, #1
 800a968:	42b3      	cmp	r3, r6
 800a96a:	db0b      	blt.n	800a984 <__lshift+0x38>
 800a96c:	4638      	mov	r0, r7
 800a96e:	f7ff fd95 	bl	800a49c <_Balloc>
 800a972:	4605      	mov	r5, r0
 800a974:	b948      	cbnz	r0, 800a98a <__lshift+0x3e>
 800a976:	4602      	mov	r2, r0
 800a978:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a97c:	4b27      	ldr	r3, [pc, #156]	; (800aa1c <__lshift+0xd0>)
 800a97e:	4828      	ldr	r0, [pc, #160]	; (800aa20 <__lshift+0xd4>)
 800a980:	f000 fcda 	bl	800b338 <__assert_func>
 800a984:	3101      	adds	r1, #1
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	e7ee      	b.n	800a968 <__lshift+0x1c>
 800a98a:	2300      	movs	r3, #0
 800a98c:	f100 0114 	add.w	r1, r0, #20
 800a990:	f100 0210 	add.w	r2, r0, #16
 800a994:	4618      	mov	r0, r3
 800a996:	4553      	cmp	r3, sl
 800a998:	db33      	blt.n	800aa02 <__lshift+0xb6>
 800a99a:	6920      	ldr	r0, [r4, #16]
 800a99c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9a0:	f104 0314 	add.w	r3, r4, #20
 800a9a4:	f019 091f 	ands.w	r9, r9, #31
 800a9a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9b0:	d02b      	beq.n	800aa0a <__lshift+0xbe>
 800a9b2:	468a      	mov	sl, r1
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f1c9 0e20 	rsb	lr, r9, #32
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	fa00 f009 	lsl.w	r0, r0, r9
 800a9c0:	4302      	orrs	r2, r0
 800a9c2:	f84a 2b04 	str.w	r2, [sl], #4
 800a9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ca:	459c      	cmp	ip, r3
 800a9cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9d0:	d8f3      	bhi.n	800a9ba <__lshift+0x6e>
 800a9d2:	ebac 0304 	sub.w	r3, ip, r4
 800a9d6:	3b15      	subs	r3, #21
 800a9d8:	f023 0303 	bic.w	r3, r3, #3
 800a9dc:	3304      	adds	r3, #4
 800a9de:	f104 0015 	add.w	r0, r4, #21
 800a9e2:	4584      	cmp	ip, r0
 800a9e4:	bf38      	it	cc
 800a9e6:	2304      	movcc	r3, #4
 800a9e8:	50ca      	str	r2, [r1, r3]
 800a9ea:	b10a      	cbz	r2, 800a9f0 <__lshift+0xa4>
 800a9ec:	f108 0602 	add.w	r6, r8, #2
 800a9f0:	3e01      	subs	r6, #1
 800a9f2:	4638      	mov	r0, r7
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	612e      	str	r6, [r5, #16]
 800a9f8:	f7ff fd90 	bl	800a51c <_Bfree>
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa02:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa06:	3301      	adds	r3, #1
 800aa08:	e7c5      	b.n	800a996 <__lshift+0x4a>
 800aa0a:	3904      	subs	r1, #4
 800aa0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa10:	459c      	cmp	ip, r3
 800aa12:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa16:	d8f9      	bhi.n	800aa0c <__lshift+0xc0>
 800aa18:	e7ea      	b.n	800a9f0 <__lshift+0xa4>
 800aa1a:	bf00      	nop
 800aa1c:	0800b75b 	.word	0x0800b75b
 800aa20:	0800b84c 	.word	0x0800b84c

0800aa24 <__mcmp>:
 800aa24:	4603      	mov	r3, r0
 800aa26:	690a      	ldr	r2, [r1, #16]
 800aa28:	6900      	ldr	r0, [r0, #16]
 800aa2a:	b530      	push	{r4, r5, lr}
 800aa2c:	1a80      	subs	r0, r0, r2
 800aa2e:	d10d      	bne.n	800aa4c <__mcmp+0x28>
 800aa30:	3314      	adds	r3, #20
 800aa32:	3114      	adds	r1, #20
 800aa34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa44:	4295      	cmp	r5, r2
 800aa46:	d002      	beq.n	800aa4e <__mcmp+0x2a>
 800aa48:	d304      	bcc.n	800aa54 <__mcmp+0x30>
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	bd30      	pop	{r4, r5, pc}
 800aa4e:	42a3      	cmp	r3, r4
 800aa50:	d3f4      	bcc.n	800aa3c <__mcmp+0x18>
 800aa52:	e7fb      	b.n	800aa4c <__mcmp+0x28>
 800aa54:	f04f 30ff 	mov.w	r0, #4294967295
 800aa58:	e7f8      	b.n	800aa4c <__mcmp+0x28>
	...

0800aa5c <__mdiff>:
 800aa5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	460c      	mov	r4, r1
 800aa62:	4606      	mov	r6, r0
 800aa64:	4611      	mov	r1, r2
 800aa66:	4620      	mov	r0, r4
 800aa68:	4692      	mov	sl, r2
 800aa6a:	f7ff ffdb 	bl	800aa24 <__mcmp>
 800aa6e:	1e05      	subs	r5, r0, #0
 800aa70:	d111      	bne.n	800aa96 <__mdiff+0x3a>
 800aa72:	4629      	mov	r1, r5
 800aa74:	4630      	mov	r0, r6
 800aa76:	f7ff fd11 	bl	800a49c <_Balloc>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	b928      	cbnz	r0, 800aa8a <__mdiff+0x2e>
 800aa7e:	f240 2132 	movw	r1, #562	; 0x232
 800aa82:	4b3c      	ldr	r3, [pc, #240]	; (800ab74 <__mdiff+0x118>)
 800aa84:	483c      	ldr	r0, [pc, #240]	; (800ab78 <__mdiff+0x11c>)
 800aa86:	f000 fc57 	bl	800b338 <__assert_func>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa90:	4610      	mov	r0, r2
 800aa92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa96:	bfa4      	itt	ge
 800aa98:	4653      	movge	r3, sl
 800aa9a:	46a2      	movge	sl, r4
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800aaa2:	bfa6      	itte	ge
 800aaa4:	461c      	movge	r4, r3
 800aaa6:	2500      	movge	r5, #0
 800aaa8:	2501      	movlt	r5, #1
 800aaaa:	f7ff fcf7 	bl	800a49c <_Balloc>
 800aaae:	4602      	mov	r2, r0
 800aab0:	b918      	cbnz	r0, 800aaba <__mdiff+0x5e>
 800aab2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aab6:	4b2f      	ldr	r3, [pc, #188]	; (800ab74 <__mdiff+0x118>)
 800aab8:	e7e4      	b.n	800aa84 <__mdiff+0x28>
 800aaba:	f100 0814 	add.w	r8, r0, #20
 800aabe:	f8da 7010 	ldr.w	r7, [sl, #16]
 800aac2:	60c5      	str	r5, [r0, #12]
 800aac4:	f04f 0c00 	mov.w	ip, #0
 800aac8:	f10a 0514 	add.w	r5, sl, #20
 800aacc:	f10a 0010 	add.w	r0, sl, #16
 800aad0:	46c2      	mov	sl, r8
 800aad2:	6926      	ldr	r6, [r4, #16]
 800aad4:	f104 0914 	add.w	r9, r4, #20
 800aad8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800aadc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aae0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800aae4:	f859 3b04 	ldr.w	r3, [r9], #4
 800aae8:	fa1f f18b 	uxth.w	r1, fp
 800aaec:	4461      	add	r1, ip
 800aaee:	fa1f fc83 	uxth.w	ip, r3
 800aaf2:	0c1b      	lsrs	r3, r3, #16
 800aaf4:	eba1 010c 	sub.w	r1, r1, ip
 800aaf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aafc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ab00:	b289      	uxth	r1, r1
 800ab02:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ab06:	454e      	cmp	r6, r9
 800ab08:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ab0c:	f84a 3b04 	str.w	r3, [sl], #4
 800ab10:	d8e6      	bhi.n	800aae0 <__mdiff+0x84>
 800ab12:	1b33      	subs	r3, r6, r4
 800ab14:	3b15      	subs	r3, #21
 800ab16:	f023 0303 	bic.w	r3, r3, #3
 800ab1a:	3415      	adds	r4, #21
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	42a6      	cmp	r6, r4
 800ab20:	bf38      	it	cc
 800ab22:	2304      	movcc	r3, #4
 800ab24:	441d      	add	r5, r3
 800ab26:	4443      	add	r3, r8
 800ab28:	461e      	mov	r6, r3
 800ab2a:	462c      	mov	r4, r5
 800ab2c:	4574      	cmp	r4, lr
 800ab2e:	d30e      	bcc.n	800ab4e <__mdiff+0xf2>
 800ab30:	f10e 0103 	add.w	r1, lr, #3
 800ab34:	1b49      	subs	r1, r1, r5
 800ab36:	f021 0103 	bic.w	r1, r1, #3
 800ab3a:	3d03      	subs	r5, #3
 800ab3c:	45ae      	cmp	lr, r5
 800ab3e:	bf38      	it	cc
 800ab40:	2100      	movcc	r1, #0
 800ab42:	4419      	add	r1, r3
 800ab44:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ab48:	b18b      	cbz	r3, 800ab6e <__mdiff+0x112>
 800ab4a:	6117      	str	r7, [r2, #16]
 800ab4c:	e7a0      	b.n	800aa90 <__mdiff+0x34>
 800ab4e:	f854 8b04 	ldr.w	r8, [r4], #4
 800ab52:	fa1f f188 	uxth.w	r1, r8
 800ab56:	4461      	add	r1, ip
 800ab58:	1408      	asrs	r0, r1, #16
 800ab5a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800ab5e:	b289      	uxth	r1, r1
 800ab60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab68:	f846 1b04 	str.w	r1, [r6], #4
 800ab6c:	e7de      	b.n	800ab2c <__mdiff+0xd0>
 800ab6e:	3f01      	subs	r7, #1
 800ab70:	e7e8      	b.n	800ab44 <__mdiff+0xe8>
 800ab72:	bf00      	nop
 800ab74:	0800b75b 	.word	0x0800b75b
 800ab78:	0800b84c 	.word	0x0800b84c

0800ab7c <__ulp>:
 800ab7c:	4b11      	ldr	r3, [pc, #68]	; (800abc4 <__ulp+0x48>)
 800ab7e:	400b      	ands	r3, r1
 800ab80:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dd02      	ble.n	800ab8e <__ulp+0x12>
 800ab88:	2000      	movs	r0, #0
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4770      	bx	lr
 800ab8e:	425b      	negs	r3, r3
 800ab90:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ab94:	f04f 0000 	mov.w	r0, #0
 800ab98:	f04f 0100 	mov.w	r1, #0
 800ab9c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aba0:	da04      	bge.n	800abac <__ulp+0x30>
 800aba2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aba6:	fa43 f102 	asr.w	r1, r3, r2
 800abaa:	4770      	bx	lr
 800abac:	f1a2 0314 	sub.w	r3, r2, #20
 800abb0:	2b1e      	cmp	r3, #30
 800abb2:	bfd6      	itet	le
 800abb4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800abb8:	2301      	movgt	r3, #1
 800abba:	fa22 f303 	lsrle.w	r3, r2, r3
 800abbe:	4618      	mov	r0, r3
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	7ff00000 	.word	0x7ff00000

0800abc8 <__b2d>:
 800abc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abcc:	6907      	ldr	r7, [r0, #16]
 800abce:	f100 0914 	add.w	r9, r0, #20
 800abd2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800abd6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800abda:	f1a7 0804 	sub.w	r8, r7, #4
 800abde:	4630      	mov	r0, r6
 800abe0:	f7ff fd52 	bl	800a688 <__hi0bits>
 800abe4:	f1c0 0320 	rsb	r3, r0, #32
 800abe8:	280a      	cmp	r0, #10
 800abea:	600b      	str	r3, [r1, #0]
 800abec:	491f      	ldr	r1, [pc, #124]	; (800ac6c <__b2d+0xa4>)
 800abee:	dc17      	bgt.n	800ac20 <__b2d+0x58>
 800abf0:	45c1      	cmp	r9, r8
 800abf2:	bf28      	it	cs
 800abf4:	2200      	movcs	r2, #0
 800abf6:	f1c0 0c0b 	rsb	ip, r0, #11
 800abfa:	fa26 f30c 	lsr.w	r3, r6, ip
 800abfe:	bf38      	it	cc
 800ac00:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ac04:	ea43 0501 	orr.w	r5, r3, r1
 800ac08:	f100 0315 	add.w	r3, r0, #21
 800ac0c:	fa06 f303 	lsl.w	r3, r6, r3
 800ac10:	fa22 f20c 	lsr.w	r2, r2, ip
 800ac14:	ea43 0402 	orr.w	r4, r3, r2
 800ac18:	4620      	mov	r0, r4
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac20:	45c1      	cmp	r9, r8
 800ac22:	bf2e      	itee	cs
 800ac24:	2200      	movcs	r2, #0
 800ac26:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ac2a:	f1a7 0808 	subcc.w	r8, r7, #8
 800ac2e:	f1b0 030b 	subs.w	r3, r0, #11
 800ac32:	d016      	beq.n	800ac62 <__b2d+0x9a>
 800ac34:	f1c3 0720 	rsb	r7, r3, #32
 800ac38:	fa22 f107 	lsr.w	r1, r2, r7
 800ac3c:	45c8      	cmp	r8, r9
 800ac3e:	fa06 f603 	lsl.w	r6, r6, r3
 800ac42:	ea46 0601 	orr.w	r6, r6, r1
 800ac46:	bf94      	ite	ls
 800ac48:	2100      	movls	r1, #0
 800ac4a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ac4e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ac52:	fa02 f003 	lsl.w	r0, r2, r3
 800ac56:	40f9      	lsrs	r1, r7
 800ac58:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac5c:	ea40 0401 	orr.w	r4, r0, r1
 800ac60:	e7da      	b.n	800ac18 <__b2d+0x50>
 800ac62:	4614      	mov	r4, r2
 800ac64:	ea46 0501 	orr.w	r5, r6, r1
 800ac68:	e7d6      	b.n	800ac18 <__b2d+0x50>
 800ac6a:	bf00      	nop
 800ac6c:	3ff00000 	.word	0x3ff00000

0800ac70 <__d2b>:
 800ac70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ac74:	2101      	movs	r1, #1
 800ac76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ac7a:	4690      	mov	r8, r2
 800ac7c:	461d      	mov	r5, r3
 800ac7e:	f7ff fc0d 	bl	800a49c <_Balloc>
 800ac82:	4604      	mov	r4, r0
 800ac84:	b930      	cbnz	r0, 800ac94 <__d2b+0x24>
 800ac86:	4602      	mov	r2, r0
 800ac88:	f240 310a 	movw	r1, #778	; 0x30a
 800ac8c:	4b24      	ldr	r3, [pc, #144]	; (800ad20 <__d2b+0xb0>)
 800ac8e:	4825      	ldr	r0, [pc, #148]	; (800ad24 <__d2b+0xb4>)
 800ac90:	f000 fb52 	bl	800b338 <__assert_func>
 800ac94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ac98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ac9c:	bb2d      	cbnz	r5, 800acea <__d2b+0x7a>
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	f1b8 0300 	subs.w	r3, r8, #0
 800aca4:	d026      	beq.n	800acf4 <__d2b+0x84>
 800aca6:	4668      	mov	r0, sp
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	f7ff fd0d 	bl	800a6c8 <__lo0bits>
 800acae:	9900      	ldr	r1, [sp, #0]
 800acb0:	b1f0      	cbz	r0, 800acf0 <__d2b+0x80>
 800acb2:	9a01      	ldr	r2, [sp, #4]
 800acb4:	f1c0 0320 	rsb	r3, r0, #32
 800acb8:	fa02 f303 	lsl.w	r3, r2, r3
 800acbc:	430b      	orrs	r3, r1
 800acbe:	40c2      	lsrs	r2, r0
 800acc0:	6163      	str	r3, [r4, #20]
 800acc2:	9201      	str	r2, [sp, #4]
 800acc4:	9b01      	ldr	r3, [sp, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bf14      	ite	ne
 800acca:	2102      	movne	r1, #2
 800accc:	2101      	moveq	r1, #1
 800acce:	61a3      	str	r3, [r4, #24]
 800acd0:	6121      	str	r1, [r4, #16]
 800acd2:	b1c5      	cbz	r5, 800ad06 <__d2b+0x96>
 800acd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acd8:	4405      	add	r5, r0
 800acda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acde:	603d      	str	r5, [r7, #0]
 800ace0:	6030      	str	r0, [r6, #0]
 800ace2:	4620      	mov	r0, r4
 800ace4:	b002      	add	sp, #8
 800ace6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acee:	e7d6      	b.n	800ac9e <__d2b+0x2e>
 800acf0:	6161      	str	r1, [r4, #20]
 800acf2:	e7e7      	b.n	800acc4 <__d2b+0x54>
 800acf4:	a801      	add	r0, sp, #4
 800acf6:	f7ff fce7 	bl	800a6c8 <__lo0bits>
 800acfa:	2101      	movs	r1, #1
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	6121      	str	r1, [r4, #16]
 800ad00:	6163      	str	r3, [r4, #20]
 800ad02:	3020      	adds	r0, #32
 800ad04:	e7e5      	b.n	800acd2 <__d2b+0x62>
 800ad06:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ad0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad0e:	6038      	str	r0, [r7, #0]
 800ad10:	6918      	ldr	r0, [r3, #16]
 800ad12:	f7ff fcb9 	bl	800a688 <__hi0bits>
 800ad16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ad1a:	6031      	str	r1, [r6, #0]
 800ad1c:	e7e1      	b.n	800ace2 <__d2b+0x72>
 800ad1e:	bf00      	nop
 800ad20:	0800b75b 	.word	0x0800b75b
 800ad24:	0800b84c 	.word	0x0800b84c

0800ad28 <__ratio>:
 800ad28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	4688      	mov	r8, r1
 800ad2e:	4669      	mov	r1, sp
 800ad30:	4681      	mov	r9, r0
 800ad32:	f7ff ff49 	bl	800abc8 <__b2d>
 800ad36:	460f      	mov	r7, r1
 800ad38:	4604      	mov	r4, r0
 800ad3a:	460d      	mov	r5, r1
 800ad3c:	4640      	mov	r0, r8
 800ad3e:	a901      	add	r1, sp, #4
 800ad40:	f7ff ff42 	bl	800abc8 <__b2d>
 800ad44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad48:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad4c:	468b      	mov	fp, r1
 800ad4e:	eba3 0c02 	sub.w	ip, r3, r2
 800ad52:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad56:	1a9b      	subs	r3, r3, r2
 800ad58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bfd5      	itete	le
 800ad60:	460a      	movle	r2, r1
 800ad62:	462a      	movgt	r2, r5
 800ad64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad68:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad6c:	bfd8      	it	le
 800ad6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ad72:	465b      	mov	r3, fp
 800ad74:	4602      	mov	r2, r0
 800ad76:	4639      	mov	r1, r7
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f7f5 fcd7 	bl	800072c <__aeabi_ddiv>
 800ad7e:	b003      	add	sp, #12
 800ad80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad84 <__copybits>:
 800ad84:	3901      	subs	r1, #1
 800ad86:	b570      	push	{r4, r5, r6, lr}
 800ad88:	1149      	asrs	r1, r1, #5
 800ad8a:	6914      	ldr	r4, [r2, #16]
 800ad8c:	3101      	adds	r1, #1
 800ad8e:	f102 0314 	add.w	r3, r2, #20
 800ad92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad9a:	1f05      	subs	r5, r0, #4
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	d30c      	bcc.n	800adba <__copybits+0x36>
 800ada0:	1aa3      	subs	r3, r4, r2
 800ada2:	3b11      	subs	r3, #17
 800ada4:	f023 0303 	bic.w	r3, r3, #3
 800ada8:	3211      	adds	r2, #17
 800adaa:	42a2      	cmp	r2, r4
 800adac:	bf88      	it	hi
 800adae:	2300      	movhi	r3, #0
 800adb0:	4418      	add	r0, r3
 800adb2:	2300      	movs	r3, #0
 800adb4:	4288      	cmp	r0, r1
 800adb6:	d305      	bcc.n	800adc4 <__copybits+0x40>
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	f853 6b04 	ldr.w	r6, [r3], #4
 800adbe:	f845 6f04 	str.w	r6, [r5, #4]!
 800adc2:	e7eb      	b.n	800ad9c <__copybits+0x18>
 800adc4:	f840 3b04 	str.w	r3, [r0], #4
 800adc8:	e7f4      	b.n	800adb4 <__copybits+0x30>

0800adca <__any_on>:
 800adca:	f100 0214 	add.w	r2, r0, #20
 800adce:	6900      	ldr	r0, [r0, #16]
 800add0:	114b      	asrs	r3, r1, #5
 800add2:	4298      	cmp	r0, r3
 800add4:	b510      	push	{r4, lr}
 800add6:	db11      	blt.n	800adfc <__any_on+0x32>
 800add8:	dd0a      	ble.n	800adf0 <__any_on+0x26>
 800adda:	f011 011f 	ands.w	r1, r1, #31
 800adde:	d007      	beq.n	800adf0 <__any_on+0x26>
 800ade0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ade4:	fa24 f001 	lsr.w	r0, r4, r1
 800ade8:	fa00 f101 	lsl.w	r1, r0, r1
 800adec:	428c      	cmp	r4, r1
 800adee:	d10b      	bne.n	800ae08 <__any_on+0x3e>
 800adf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d803      	bhi.n	800ae00 <__any_on+0x36>
 800adf8:	2000      	movs	r0, #0
 800adfa:	bd10      	pop	{r4, pc}
 800adfc:	4603      	mov	r3, r0
 800adfe:	e7f7      	b.n	800adf0 <__any_on+0x26>
 800ae00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae04:	2900      	cmp	r1, #0
 800ae06:	d0f5      	beq.n	800adf4 <__any_on+0x2a>
 800ae08:	2001      	movs	r0, #1
 800ae0a:	e7f6      	b.n	800adfa <__any_on+0x30>

0800ae0c <_calloc_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	fb02 f501 	mul.w	r5, r2, r1
 800ae12:	4629      	mov	r1, r5
 800ae14:	f000 f854 	bl	800aec0 <_malloc_r>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	b118      	cbz	r0, 800ae24 <_calloc_r+0x18>
 800ae1c:	462a      	mov	r2, r5
 800ae1e:	2100      	movs	r1, #0
 800ae20:	f7fc fb0e 	bl	8007440 <memset>
 800ae24:	4620      	mov	r0, r4
 800ae26:	bd38      	pop	{r3, r4, r5, pc}

0800ae28 <_free_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	2900      	cmp	r1, #0
 800ae2e:	d043      	beq.n	800aeb8 <_free_r+0x90>
 800ae30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae34:	1f0c      	subs	r4, r1, #4
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	bfb8      	it	lt
 800ae3a:	18e4      	addlt	r4, r4, r3
 800ae3c:	f000 faf0 	bl	800b420 <__malloc_lock>
 800ae40:	4a1e      	ldr	r2, [pc, #120]	; (800aebc <_free_r+0x94>)
 800ae42:	6813      	ldr	r3, [r2, #0]
 800ae44:	4610      	mov	r0, r2
 800ae46:	b933      	cbnz	r3, 800ae56 <_free_r+0x2e>
 800ae48:	6063      	str	r3, [r4, #4]
 800ae4a:	6014      	str	r4, [r2, #0]
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae52:	f000 baeb 	b.w	800b42c <__malloc_unlock>
 800ae56:	42a3      	cmp	r3, r4
 800ae58:	d90a      	bls.n	800ae70 <_free_r+0x48>
 800ae5a:	6821      	ldr	r1, [r4, #0]
 800ae5c:	1862      	adds	r2, r4, r1
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	bf01      	itttt	eq
 800ae62:	681a      	ldreq	r2, [r3, #0]
 800ae64:	685b      	ldreq	r3, [r3, #4]
 800ae66:	1852      	addeq	r2, r2, r1
 800ae68:	6022      	streq	r2, [r4, #0]
 800ae6a:	6063      	str	r3, [r4, #4]
 800ae6c:	6004      	str	r4, [r0, #0]
 800ae6e:	e7ed      	b.n	800ae4c <_free_r+0x24>
 800ae70:	461a      	mov	r2, r3
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	b10b      	cbz	r3, 800ae7a <_free_r+0x52>
 800ae76:	42a3      	cmp	r3, r4
 800ae78:	d9fa      	bls.n	800ae70 <_free_r+0x48>
 800ae7a:	6811      	ldr	r1, [r2, #0]
 800ae7c:	1850      	adds	r0, r2, r1
 800ae7e:	42a0      	cmp	r0, r4
 800ae80:	d10b      	bne.n	800ae9a <_free_r+0x72>
 800ae82:	6820      	ldr	r0, [r4, #0]
 800ae84:	4401      	add	r1, r0
 800ae86:	1850      	adds	r0, r2, r1
 800ae88:	4283      	cmp	r3, r0
 800ae8a:	6011      	str	r1, [r2, #0]
 800ae8c:	d1de      	bne.n	800ae4c <_free_r+0x24>
 800ae8e:	6818      	ldr	r0, [r3, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	4401      	add	r1, r0
 800ae94:	6011      	str	r1, [r2, #0]
 800ae96:	6053      	str	r3, [r2, #4]
 800ae98:	e7d8      	b.n	800ae4c <_free_r+0x24>
 800ae9a:	d902      	bls.n	800aea2 <_free_r+0x7a>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	602b      	str	r3, [r5, #0]
 800aea0:	e7d4      	b.n	800ae4c <_free_r+0x24>
 800aea2:	6820      	ldr	r0, [r4, #0]
 800aea4:	1821      	adds	r1, r4, r0
 800aea6:	428b      	cmp	r3, r1
 800aea8:	bf01      	itttt	eq
 800aeaa:	6819      	ldreq	r1, [r3, #0]
 800aeac:	685b      	ldreq	r3, [r3, #4]
 800aeae:	1809      	addeq	r1, r1, r0
 800aeb0:	6021      	streq	r1, [r4, #0]
 800aeb2:	6063      	str	r3, [r4, #4]
 800aeb4:	6054      	str	r4, [r2, #4]
 800aeb6:	e7c9      	b.n	800ae4c <_free_r+0x24>
 800aeb8:	bd38      	pop	{r3, r4, r5, pc}
 800aeba:	bf00      	nop
 800aebc:	20000200 	.word	0x20000200

0800aec0 <_malloc_r>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	1ccd      	adds	r5, r1, #3
 800aec4:	f025 0503 	bic.w	r5, r5, #3
 800aec8:	3508      	adds	r5, #8
 800aeca:	2d0c      	cmp	r5, #12
 800aecc:	bf38      	it	cc
 800aece:	250c      	movcc	r5, #12
 800aed0:	2d00      	cmp	r5, #0
 800aed2:	4606      	mov	r6, r0
 800aed4:	db01      	blt.n	800aeda <_malloc_r+0x1a>
 800aed6:	42a9      	cmp	r1, r5
 800aed8:	d903      	bls.n	800aee2 <_malloc_r+0x22>
 800aeda:	230c      	movs	r3, #12
 800aedc:	6033      	str	r3, [r6, #0]
 800aede:	2000      	movs	r0, #0
 800aee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee2:	f000 fa9d 	bl	800b420 <__malloc_lock>
 800aee6:	4921      	ldr	r1, [pc, #132]	; (800af6c <_malloc_r+0xac>)
 800aee8:	680a      	ldr	r2, [r1, #0]
 800aeea:	4614      	mov	r4, r2
 800aeec:	b99c      	cbnz	r4, 800af16 <_malloc_r+0x56>
 800aeee:	4f20      	ldr	r7, [pc, #128]	; (800af70 <_malloc_r+0xb0>)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	b923      	cbnz	r3, 800aefe <_malloc_r+0x3e>
 800aef4:	4621      	mov	r1, r4
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 f99a 	bl	800b230 <_sbrk_r>
 800aefc:	6038      	str	r0, [r7, #0]
 800aefe:	4629      	mov	r1, r5
 800af00:	4630      	mov	r0, r6
 800af02:	f000 f995 	bl	800b230 <_sbrk_r>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d123      	bne.n	800af52 <_malloc_r+0x92>
 800af0a:	230c      	movs	r3, #12
 800af0c:	4630      	mov	r0, r6
 800af0e:	6033      	str	r3, [r6, #0]
 800af10:	f000 fa8c 	bl	800b42c <__malloc_unlock>
 800af14:	e7e3      	b.n	800aede <_malloc_r+0x1e>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	1b5b      	subs	r3, r3, r5
 800af1a:	d417      	bmi.n	800af4c <_malloc_r+0x8c>
 800af1c:	2b0b      	cmp	r3, #11
 800af1e:	d903      	bls.n	800af28 <_malloc_r+0x68>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	441c      	add	r4, r3
 800af24:	6025      	str	r5, [r4, #0]
 800af26:	e004      	b.n	800af32 <_malloc_r+0x72>
 800af28:	6863      	ldr	r3, [r4, #4]
 800af2a:	42a2      	cmp	r2, r4
 800af2c:	bf0c      	ite	eq
 800af2e:	600b      	streq	r3, [r1, #0]
 800af30:	6053      	strne	r3, [r2, #4]
 800af32:	4630      	mov	r0, r6
 800af34:	f000 fa7a 	bl	800b42c <__malloc_unlock>
 800af38:	f104 000b 	add.w	r0, r4, #11
 800af3c:	1d23      	adds	r3, r4, #4
 800af3e:	f020 0007 	bic.w	r0, r0, #7
 800af42:	1ac2      	subs	r2, r0, r3
 800af44:	d0cc      	beq.n	800aee0 <_malloc_r+0x20>
 800af46:	1a1b      	subs	r3, r3, r0
 800af48:	50a3      	str	r3, [r4, r2]
 800af4a:	e7c9      	b.n	800aee0 <_malloc_r+0x20>
 800af4c:	4622      	mov	r2, r4
 800af4e:	6864      	ldr	r4, [r4, #4]
 800af50:	e7cc      	b.n	800aeec <_malloc_r+0x2c>
 800af52:	1cc4      	adds	r4, r0, #3
 800af54:	f024 0403 	bic.w	r4, r4, #3
 800af58:	42a0      	cmp	r0, r4
 800af5a:	d0e3      	beq.n	800af24 <_malloc_r+0x64>
 800af5c:	1a21      	subs	r1, r4, r0
 800af5e:	4630      	mov	r0, r6
 800af60:	f000 f966 	bl	800b230 <_sbrk_r>
 800af64:	3001      	adds	r0, #1
 800af66:	d1dd      	bne.n	800af24 <_malloc_r+0x64>
 800af68:	e7cf      	b.n	800af0a <_malloc_r+0x4a>
 800af6a:	bf00      	nop
 800af6c:	20000200 	.word	0x20000200
 800af70:	20000204 	.word	0x20000204

0800af74 <__sfputc_r>:
 800af74:	6893      	ldr	r3, [r2, #8]
 800af76:	b410      	push	{r4}
 800af78:	3b01      	subs	r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	6093      	str	r3, [r2, #8]
 800af7e:	da07      	bge.n	800af90 <__sfputc_r+0x1c>
 800af80:	6994      	ldr	r4, [r2, #24]
 800af82:	42a3      	cmp	r3, r4
 800af84:	db01      	blt.n	800af8a <__sfputc_r+0x16>
 800af86:	290a      	cmp	r1, #10
 800af88:	d102      	bne.n	800af90 <__sfputc_r+0x1c>
 800af8a:	bc10      	pop	{r4}
 800af8c:	f7fd bd88 	b.w	8008aa0 <__swbuf_r>
 800af90:	6813      	ldr	r3, [r2, #0]
 800af92:	1c58      	adds	r0, r3, #1
 800af94:	6010      	str	r0, [r2, #0]
 800af96:	7019      	strb	r1, [r3, #0]
 800af98:	4608      	mov	r0, r1
 800af9a:	bc10      	pop	{r4}
 800af9c:	4770      	bx	lr

0800af9e <__sfputs_r>:
 800af9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa0:	4606      	mov	r6, r0
 800afa2:	460f      	mov	r7, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	18d5      	adds	r5, r2, r3
 800afa8:	42ac      	cmp	r4, r5
 800afaa:	d101      	bne.n	800afb0 <__sfputs_r+0x12>
 800afac:	2000      	movs	r0, #0
 800afae:	e007      	b.n	800afc0 <__sfputs_r+0x22>
 800afb0:	463a      	mov	r2, r7
 800afb2:	4630      	mov	r0, r6
 800afb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb8:	f7ff ffdc 	bl	800af74 <__sfputc_r>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d1f3      	bne.n	800afa8 <__sfputs_r+0xa>
 800afc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afc4 <_vfiprintf_r>:
 800afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	460d      	mov	r5, r1
 800afca:	4614      	mov	r4, r2
 800afcc:	4698      	mov	r8, r3
 800afce:	4606      	mov	r6, r0
 800afd0:	b09d      	sub	sp, #116	; 0x74
 800afd2:	b118      	cbz	r0, 800afdc <_vfiprintf_r+0x18>
 800afd4:	6983      	ldr	r3, [r0, #24]
 800afd6:	b90b      	cbnz	r3, 800afdc <_vfiprintf_r+0x18>
 800afd8:	f7fe fdba 	bl	8009b50 <__sinit>
 800afdc:	4b89      	ldr	r3, [pc, #548]	; (800b204 <_vfiprintf_r+0x240>)
 800afde:	429d      	cmp	r5, r3
 800afe0:	d11b      	bne.n	800b01a <_vfiprintf_r+0x56>
 800afe2:	6875      	ldr	r5, [r6, #4]
 800afe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afe6:	07d9      	lsls	r1, r3, #31
 800afe8:	d405      	bmi.n	800aff6 <_vfiprintf_r+0x32>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	059a      	lsls	r2, r3, #22
 800afee:	d402      	bmi.n	800aff6 <_vfiprintf_r+0x32>
 800aff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff2:	f7ff f9b6 	bl	800a362 <__retarget_lock_acquire_recursive>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	071b      	lsls	r3, r3, #28
 800affa:	d501      	bpl.n	800b000 <_vfiprintf_r+0x3c>
 800affc:	692b      	ldr	r3, [r5, #16]
 800affe:	b9eb      	cbnz	r3, 800b03c <_vfiprintf_r+0x78>
 800b000:	4629      	mov	r1, r5
 800b002:	4630      	mov	r0, r6
 800b004:	f7fd fd9e 	bl	8008b44 <__swsetup_r>
 800b008:	b1c0      	cbz	r0, 800b03c <_vfiprintf_r+0x78>
 800b00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b00c:	07dc      	lsls	r4, r3, #31
 800b00e:	d50e      	bpl.n	800b02e <_vfiprintf_r+0x6a>
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	b01d      	add	sp, #116	; 0x74
 800b016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01a:	4b7b      	ldr	r3, [pc, #492]	; (800b208 <_vfiprintf_r+0x244>)
 800b01c:	429d      	cmp	r5, r3
 800b01e:	d101      	bne.n	800b024 <_vfiprintf_r+0x60>
 800b020:	68b5      	ldr	r5, [r6, #8]
 800b022:	e7df      	b.n	800afe4 <_vfiprintf_r+0x20>
 800b024:	4b79      	ldr	r3, [pc, #484]	; (800b20c <_vfiprintf_r+0x248>)
 800b026:	429d      	cmp	r5, r3
 800b028:	bf08      	it	eq
 800b02a:	68f5      	ldreq	r5, [r6, #12]
 800b02c:	e7da      	b.n	800afe4 <_vfiprintf_r+0x20>
 800b02e:	89ab      	ldrh	r3, [r5, #12]
 800b030:	0598      	lsls	r0, r3, #22
 800b032:	d4ed      	bmi.n	800b010 <_vfiprintf_r+0x4c>
 800b034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b036:	f7ff f995 	bl	800a364 <__retarget_lock_release_recursive>
 800b03a:	e7e9      	b.n	800b010 <_vfiprintf_r+0x4c>
 800b03c:	2300      	movs	r3, #0
 800b03e:	9309      	str	r3, [sp, #36]	; 0x24
 800b040:	2320      	movs	r3, #32
 800b042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b046:	2330      	movs	r3, #48	; 0x30
 800b048:	f04f 0901 	mov.w	r9, #1
 800b04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b050:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b210 <_vfiprintf_r+0x24c>
 800b054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b058:	4623      	mov	r3, r4
 800b05a:	469a      	mov	sl, r3
 800b05c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b060:	b10a      	cbz	r2, 800b066 <_vfiprintf_r+0xa2>
 800b062:	2a25      	cmp	r2, #37	; 0x25
 800b064:	d1f9      	bne.n	800b05a <_vfiprintf_r+0x96>
 800b066:	ebba 0b04 	subs.w	fp, sl, r4
 800b06a:	d00b      	beq.n	800b084 <_vfiprintf_r+0xc0>
 800b06c:	465b      	mov	r3, fp
 800b06e:	4622      	mov	r2, r4
 800b070:	4629      	mov	r1, r5
 800b072:	4630      	mov	r0, r6
 800b074:	f7ff ff93 	bl	800af9e <__sfputs_r>
 800b078:	3001      	adds	r0, #1
 800b07a:	f000 80aa 	beq.w	800b1d2 <_vfiprintf_r+0x20e>
 800b07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b080:	445a      	add	r2, fp
 800b082:	9209      	str	r2, [sp, #36]	; 0x24
 800b084:	f89a 3000 	ldrb.w	r3, [sl]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 80a2 	beq.w	800b1d2 <_vfiprintf_r+0x20e>
 800b08e:	2300      	movs	r3, #0
 800b090:	f04f 32ff 	mov.w	r2, #4294967295
 800b094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b098:	f10a 0a01 	add.w	sl, sl, #1
 800b09c:	9304      	str	r3, [sp, #16]
 800b09e:	9307      	str	r3, [sp, #28]
 800b0a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b0a6:	4654      	mov	r4, sl
 800b0a8:	2205      	movs	r2, #5
 800b0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ae:	4858      	ldr	r0, [pc, #352]	; (800b210 <_vfiprintf_r+0x24c>)
 800b0b0:	f7ff f9d8 	bl	800a464 <memchr>
 800b0b4:	9a04      	ldr	r2, [sp, #16]
 800b0b6:	b9d8      	cbnz	r0, 800b0f0 <_vfiprintf_r+0x12c>
 800b0b8:	06d1      	lsls	r1, r2, #27
 800b0ba:	bf44      	itt	mi
 800b0bc:	2320      	movmi	r3, #32
 800b0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c2:	0713      	lsls	r3, r2, #28
 800b0c4:	bf44      	itt	mi
 800b0c6:	232b      	movmi	r3, #43	; 0x2b
 800b0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0d2:	d015      	beq.n	800b100 <_vfiprintf_r+0x13c>
 800b0d4:	4654      	mov	r4, sl
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	f04f 0c0a 	mov.w	ip, #10
 800b0dc:	9a07      	ldr	r2, [sp, #28]
 800b0de:	4621      	mov	r1, r4
 800b0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e4:	3b30      	subs	r3, #48	; 0x30
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	d94e      	bls.n	800b188 <_vfiprintf_r+0x1c4>
 800b0ea:	b1b0      	cbz	r0, 800b11a <_vfiprintf_r+0x156>
 800b0ec:	9207      	str	r2, [sp, #28]
 800b0ee:	e014      	b.n	800b11a <_vfiprintf_r+0x156>
 800b0f0:	eba0 0308 	sub.w	r3, r0, r8
 800b0f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	46a2      	mov	sl, r4
 800b0fc:	9304      	str	r3, [sp, #16]
 800b0fe:	e7d2      	b.n	800b0a6 <_vfiprintf_r+0xe2>
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	1d19      	adds	r1, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	9103      	str	r1, [sp, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	bfbb      	ittet	lt
 800b10c:	425b      	neglt	r3, r3
 800b10e:	f042 0202 	orrlt.w	r2, r2, #2
 800b112:	9307      	strge	r3, [sp, #28]
 800b114:	9307      	strlt	r3, [sp, #28]
 800b116:	bfb8      	it	lt
 800b118:	9204      	strlt	r2, [sp, #16]
 800b11a:	7823      	ldrb	r3, [r4, #0]
 800b11c:	2b2e      	cmp	r3, #46	; 0x2e
 800b11e:	d10c      	bne.n	800b13a <_vfiprintf_r+0x176>
 800b120:	7863      	ldrb	r3, [r4, #1]
 800b122:	2b2a      	cmp	r3, #42	; 0x2a
 800b124:	d135      	bne.n	800b192 <_vfiprintf_r+0x1ce>
 800b126:	9b03      	ldr	r3, [sp, #12]
 800b128:	3402      	adds	r4, #2
 800b12a:	1d1a      	adds	r2, r3, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	9203      	str	r2, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfb8      	it	lt
 800b134:	f04f 33ff 	movlt.w	r3, #4294967295
 800b138:	9305      	str	r3, [sp, #20]
 800b13a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b220 <_vfiprintf_r+0x25c>
 800b13e:	2203      	movs	r2, #3
 800b140:	4650      	mov	r0, sl
 800b142:	7821      	ldrb	r1, [r4, #0]
 800b144:	f7ff f98e 	bl	800a464 <memchr>
 800b148:	b140      	cbz	r0, 800b15c <_vfiprintf_r+0x198>
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	eba0 000a 	sub.w	r0, r0, sl
 800b150:	fa03 f000 	lsl.w	r0, r3, r0
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	3401      	adds	r4, #1
 800b158:	4303      	orrs	r3, r0
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b160:	2206      	movs	r2, #6
 800b162:	482c      	ldr	r0, [pc, #176]	; (800b214 <_vfiprintf_r+0x250>)
 800b164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b168:	f7ff f97c 	bl	800a464 <memchr>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d03f      	beq.n	800b1f0 <_vfiprintf_r+0x22c>
 800b170:	4b29      	ldr	r3, [pc, #164]	; (800b218 <_vfiprintf_r+0x254>)
 800b172:	bb1b      	cbnz	r3, 800b1bc <_vfiprintf_r+0x1f8>
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	3307      	adds	r3, #7
 800b178:	f023 0307 	bic.w	r3, r3, #7
 800b17c:	3308      	adds	r3, #8
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b182:	443b      	add	r3, r7
 800b184:	9309      	str	r3, [sp, #36]	; 0x24
 800b186:	e767      	b.n	800b058 <_vfiprintf_r+0x94>
 800b188:	460c      	mov	r4, r1
 800b18a:	2001      	movs	r0, #1
 800b18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b190:	e7a5      	b.n	800b0de <_vfiprintf_r+0x11a>
 800b192:	2300      	movs	r3, #0
 800b194:	f04f 0c0a 	mov.w	ip, #10
 800b198:	4619      	mov	r1, r3
 800b19a:	3401      	adds	r4, #1
 800b19c:	9305      	str	r3, [sp, #20]
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a4:	3a30      	subs	r2, #48	; 0x30
 800b1a6:	2a09      	cmp	r2, #9
 800b1a8:	d903      	bls.n	800b1b2 <_vfiprintf_r+0x1ee>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0c5      	beq.n	800b13a <_vfiprintf_r+0x176>
 800b1ae:	9105      	str	r1, [sp, #20]
 800b1b0:	e7c3      	b.n	800b13a <_vfiprintf_r+0x176>
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ba:	e7f0      	b.n	800b19e <_vfiprintf_r+0x1da>
 800b1bc:	ab03      	add	r3, sp, #12
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	462a      	mov	r2, r5
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	4b15      	ldr	r3, [pc, #84]	; (800b21c <_vfiprintf_r+0x258>)
 800b1c6:	a904      	add	r1, sp, #16
 800b1c8:	f7fc f9e0 	bl	800758c <_printf_float>
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	1c78      	adds	r0, r7, #1
 800b1d0:	d1d6      	bne.n	800b180 <_vfiprintf_r+0x1bc>
 800b1d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1d4:	07d9      	lsls	r1, r3, #31
 800b1d6:	d405      	bmi.n	800b1e4 <_vfiprintf_r+0x220>
 800b1d8:	89ab      	ldrh	r3, [r5, #12]
 800b1da:	059a      	lsls	r2, r3, #22
 800b1dc:	d402      	bmi.n	800b1e4 <_vfiprintf_r+0x220>
 800b1de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1e0:	f7ff f8c0 	bl	800a364 <__retarget_lock_release_recursive>
 800b1e4:	89ab      	ldrh	r3, [r5, #12]
 800b1e6:	065b      	lsls	r3, r3, #25
 800b1e8:	f53f af12 	bmi.w	800b010 <_vfiprintf_r+0x4c>
 800b1ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ee:	e711      	b.n	800b014 <_vfiprintf_r+0x50>
 800b1f0:	ab03      	add	r3, sp, #12
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	4b08      	ldr	r3, [pc, #32]	; (800b21c <_vfiprintf_r+0x258>)
 800b1fa:	a904      	add	r1, sp, #16
 800b1fc:	f7fc fc62 	bl	8007ac4 <_printf_i>
 800b200:	e7e4      	b.n	800b1cc <_vfiprintf_r+0x208>
 800b202:	bf00      	nop
 800b204:	0800b78c 	.word	0x0800b78c
 800b208:	0800b7ac 	.word	0x0800b7ac
 800b20c:	0800b76c 	.word	0x0800b76c
 800b210:	0800b9ac 	.word	0x0800b9ac
 800b214:	0800b9b6 	.word	0x0800b9b6
 800b218:	0800758d 	.word	0x0800758d
 800b21c:	0800af9f 	.word	0x0800af9f
 800b220:	0800b9b2 	.word	0x0800b9b2

0800b224 <nan>:
 800b224:	2000      	movs	r0, #0
 800b226:	4901      	ldr	r1, [pc, #4]	; (800b22c <nan+0x8>)
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	7ff80000 	.word	0x7ff80000

0800b230 <_sbrk_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	2300      	movs	r3, #0
 800b234:	4d05      	ldr	r5, [pc, #20]	; (800b24c <_sbrk_r+0x1c>)
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	f7f8 f99e 	bl	800357c <_sbrk>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_sbrk_r+0x1a>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_sbrk_r+0x1a>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	20000490 	.word	0x20000490

0800b250 <__sread>:
 800b250:	b510      	push	{r4, lr}
 800b252:	460c      	mov	r4, r1
 800b254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b258:	f000 f8ee 	bl	800b438 <_read_r>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	bfab      	itete	ge
 800b260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b262:	89a3      	ldrhlt	r3, [r4, #12]
 800b264:	181b      	addge	r3, r3, r0
 800b266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b26a:	bfac      	ite	ge
 800b26c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b26e:	81a3      	strhlt	r3, [r4, #12]
 800b270:	bd10      	pop	{r4, pc}

0800b272 <__swrite>:
 800b272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b276:	461f      	mov	r7, r3
 800b278:	898b      	ldrh	r3, [r1, #12]
 800b27a:	4605      	mov	r5, r0
 800b27c:	05db      	lsls	r3, r3, #23
 800b27e:	460c      	mov	r4, r1
 800b280:	4616      	mov	r6, r2
 800b282:	d505      	bpl.n	800b290 <__swrite+0x1e>
 800b284:	2302      	movs	r3, #2
 800b286:	2200      	movs	r2, #0
 800b288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b28c:	f000 f8b6 	bl	800b3fc <_lseek_r>
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	4632      	mov	r2, r6
 800b294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b298:	81a3      	strh	r3, [r4, #12]
 800b29a:	4628      	mov	r0, r5
 800b29c:	463b      	mov	r3, r7
 800b29e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a6:	f000 b835 	b.w	800b314 <_write_r>

0800b2aa <__sseek>:
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	460c      	mov	r4, r1
 800b2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b2:	f000 f8a3 	bl	800b3fc <_lseek_r>
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	bf15      	itete	ne
 800b2bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2c6:	81a3      	strheq	r3, [r4, #12]
 800b2c8:	bf18      	it	ne
 800b2ca:	81a3      	strhne	r3, [r4, #12]
 800b2cc:	bd10      	pop	{r4, pc}

0800b2ce <__sclose>:
 800b2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d2:	f000 b84f 	b.w	800b374 <_close_r>

0800b2d6 <strncmp>:
 800b2d6:	b510      	push	{r4, lr}
 800b2d8:	b16a      	cbz	r2, 800b2f6 <strncmp+0x20>
 800b2da:	3901      	subs	r1, #1
 800b2dc:	1884      	adds	r4, r0, r2
 800b2de:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b2e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d103      	bne.n	800b2f2 <strncmp+0x1c>
 800b2ea:	42a0      	cmp	r0, r4
 800b2ec:	d001      	beq.n	800b2f2 <strncmp+0x1c>
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1f5      	bne.n	800b2de <strncmp+0x8>
 800b2f2:	1a98      	subs	r0, r3, r2
 800b2f4:	bd10      	pop	{r4, pc}
 800b2f6:	4610      	mov	r0, r2
 800b2f8:	e7fc      	b.n	800b2f4 <strncmp+0x1e>

0800b2fa <__ascii_wctomb>:
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	b141      	cbz	r1, 800b312 <__ascii_wctomb+0x18>
 800b300:	2aff      	cmp	r2, #255	; 0xff
 800b302:	d904      	bls.n	800b30e <__ascii_wctomb+0x14>
 800b304:	228a      	movs	r2, #138	; 0x8a
 800b306:	f04f 30ff 	mov.w	r0, #4294967295
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	4770      	bx	lr
 800b30e:	2001      	movs	r0, #1
 800b310:	700a      	strb	r2, [r1, #0]
 800b312:	4770      	bx	lr

0800b314 <_write_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4604      	mov	r4, r0
 800b318:	4608      	mov	r0, r1
 800b31a:	4611      	mov	r1, r2
 800b31c:	2200      	movs	r2, #0
 800b31e:	4d05      	ldr	r5, [pc, #20]	; (800b334 <_write_r+0x20>)
 800b320:	602a      	str	r2, [r5, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	f7f8 f8de 	bl	80034e4 <_write>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d102      	bne.n	800b332 <_write_r+0x1e>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	b103      	cbz	r3, 800b332 <_write_r+0x1e>
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	20000490 	.word	0x20000490

0800b338 <__assert_func>:
 800b338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b33a:	4614      	mov	r4, r2
 800b33c:	461a      	mov	r2, r3
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <__assert_func+0x2c>)
 800b340:	4605      	mov	r5, r0
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68d8      	ldr	r0, [r3, #12]
 800b346:	b14c      	cbz	r4, 800b35c <__assert_func+0x24>
 800b348:	4b07      	ldr	r3, [pc, #28]	; (800b368 <__assert_func+0x30>)
 800b34a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b34e:	9100      	str	r1, [sp, #0]
 800b350:	462b      	mov	r3, r5
 800b352:	4906      	ldr	r1, [pc, #24]	; (800b36c <__assert_func+0x34>)
 800b354:	f000 f81e 	bl	800b394 <fiprintf>
 800b358:	f000 f880 	bl	800b45c <abort>
 800b35c:	4b04      	ldr	r3, [pc, #16]	; (800b370 <__assert_func+0x38>)
 800b35e:	461c      	mov	r4, r3
 800b360:	e7f3      	b.n	800b34a <__assert_func+0x12>
 800b362:	bf00      	nop
 800b364:	2000000c 	.word	0x2000000c
 800b368:	0800b9bd 	.word	0x0800b9bd
 800b36c:	0800b9ca 	.word	0x0800b9ca
 800b370:	0800b9f8 	.word	0x0800b9f8

0800b374 <_close_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	2300      	movs	r3, #0
 800b378:	4d05      	ldr	r5, [pc, #20]	; (800b390 <_close_r+0x1c>)
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	f7f8 f8cc 	bl	800351c <_close>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_close_r+0x1a>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_close_r+0x1a>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	20000490 	.word	0x20000490

0800b394 <fiprintf>:
 800b394:	b40e      	push	{r1, r2, r3}
 800b396:	b503      	push	{r0, r1, lr}
 800b398:	4601      	mov	r1, r0
 800b39a:	ab03      	add	r3, sp, #12
 800b39c:	4805      	ldr	r0, [pc, #20]	; (800b3b4 <fiprintf+0x20>)
 800b39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3a2:	6800      	ldr	r0, [r0, #0]
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	f7ff fe0d 	bl	800afc4 <_vfiprintf_r>
 800b3aa:	b002      	add	sp, #8
 800b3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3b0:	b003      	add	sp, #12
 800b3b2:	4770      	bx	lr
 800b3b4:	2000000c 	.word	0x2000000c

0800b3b8 <_fstat_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	4d06      	ldr	r5, [pc, #24]	; (800b3d8 <_fstat_r+0x20>)
 800b3be:	4604      	mov	r4, r0
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	4611      	mov	r1, r2
 800b3c4:	602b      	str	r3, [r5, #0]
 800b3c6:	f7f8 f8b4 	bl	8003532 <_fstat>
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	d102      	bne.n	800b3d4 <_fstat_r+0x1c>
 800b3ce:	682b      	ldr	r3, [r5, #0]
 800b3d0:	b103      	cbz	r3, 800b3d4 <_fstat_r+0x1c>
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	bd38      	pop	{r3, r4, r5, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20000490 	.word	0x20000490

0800b3dc <_isatty_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	2300      	movs	r3, #0
 800b3e0:	4d05      	ldr	r5, [pc, #20]	; (800b3f8 <_isatty_r+0x1c>)
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	602b      	str	r3, [r5, #0]
 800b3e8:	f7f8 f8b2 	bl	8003550 <_isatty>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_isatty_r+0x1a>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_isatty_r+0x1a>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	20000490 	.word	0x20000490

0800b3fc <_lseek_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	2200      	movs	r2, #0
 800b406:	4d05      	ldr	r5, [pc, #20]	; (800b41c <_lseek_r+0x20>)
 800b408:	602a      	str	r2, [r5, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	f7f8 f8aa 	bl	8003564 <_lseek>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d102      	bne.n	800b41a <_lseek_r+0x1e>
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	b103      	cbz	r3, 800b41a <_lseek_r+0x1e>
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	20000490 	.word	0x20000490

0800b420 <__malloc_lock>:
 800b420:	4801      	ldr	r0, [pc, #4]	; (800b428 <__malloc_lock+0x8>)
 800b422:	f7fe bf9e 	b.w	800a362 <__retarget_lock_acquire_recursive>
 800b426:	bf00      	nop
 800b428:	20000488 	.word	0x20000488

0800b42c <__malloc_unlock>:
 800b42c:	4801      	ldr	r0, [pc, #4]	; (800b434 <__malloc_unlock+0x8>)
 800b42e:	f7fe bf99 	b.w	800a364 <__retarget_lock_release_recursive>
 800b432:	bf00      	nop
 800b434:	20000488 	.word	0x20000488

0800b438 <_read_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	4611      	mov	r1, r2
 800b440:	2200      	movs	r2, #0
 800b442:	4d05      	ldr	r5, [pc, #20]	; (800b458 <_read_r+0x20>)
 800b444:	602a      	str	r2, [r5, #0]
 800b446:	461a      	mov	r2, r3
 800b448:	f7f8 f82f 	bl	80034aa <_read>
 800b44c:	1c43      	adds	r3, r0, #1
 800b44e:	d102      	bne.n	800b456 <_read_r+0x1e>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	b103      	cbz	r3, 800b456 <_read_r+0x1e>
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	bd38      	pop	{r3, r4, r5, pc}
 800b458:	20000490 	.word	0x20000490

0800b45c <abort>:
 800b45c:	2006      	movs	r0, #6
 800b45e:	b508      	push	{r3, lr}
 800b460:	f000 f82c 	bl	800b4bc <raise>
 800b464:	2001      	movs	r0, #1
 800b466:	f7f8 f816 	bl	8003496 <_exit>

0800b46a <_raise_r>:
 800b46a:	291f      	cmp	r1, #31
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4604      	mov	r4, r0
 800b470:	460d      	mov	r5, r1
 800b472:	d904      	bls.n	800b47e <_raise_r+0x14>
 800b474:	2316      	movs	r3, #22
 800b476:	6003      	str	r3, [r0, #0]
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	bd38      	pop	{r3, r4, r5, pc}
 800b47e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b480:	b112      	cbz	r2, 800b488 <_raise_r+0x1e>
 800b482:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b486:	b94b      	cbnz	r3, 800b49c <_raise_r+0x32>
 800b488:	4620      	mov	r0, r4
 800b48a:	f000 f831 	bl	800b4f0 <_getpid_r>
 800b48e:	462a      	mov	r2, r5
 800b490:	4601      	mov	r1, r0
 800b492:	4620      	mov	r0, r4
 800b494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b498:	f000 b818 	b.w	800b4cc <_kill_r>
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d00a      	beq.n	800b4b6 <_raise_r+0x4c>
 800b4a0:	1c59      	adds	r1, r3, #1
 800b4a2:	d103      	bne.n	800b4ac <_raise_r+0x42>
 800b4a4:	2316      	movs	r3, #22
 800b4a6:	6003      	str	r3, [r0, #0]
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	e7e7      	b.n	800b47c <_raise_r+0x12>
 800b4ac:	2400      	movs	r4, #0
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4b4:	4798      	blx	r3
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	e7e0      	b.n	800b47c <_raise_r+0x12>
	...

0800b4bc <raise>:
 800b4bc:	4b02      	ldr	r3, [pc, #8]	; (800b4c8 <raise+0xc>)
 800b4be:	4601      	mov	r1, r0
 800b4c0:	6818      	ldr	r0, [r3, #0]
 800b4c2:	f7ff bfd2 	b.w	800b46a <_raise_r>
 800b4c6:	bf00      	nop
 800b4c8:	2000000c 	.word	0x2000000c

0800b4cc <_kill_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	4d06      	ldr	r5, [pc, #24]	; (800b4ec <_kill_r+0x20>)
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f7f7 ffcc 	bl	8003476 <_kill>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d102      	bne.n	800b4e8 <_kill_r+0x1c>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	b103      	cbz	r3, 800b4e8 <_kill_r+0x1c>
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000490 	.word	0x20000490

0800b4f0 <_getpid_r>:
 800b4f0:	f7f7 bfba 	b.w	8003468 <_getpid>

0800b4f4 <_init>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	bf00      	nop
 800b4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fa:	bc08      	pop	{r3}
 800b4fc:	469e      	mov	lr, r3
 800b4fe:	4770      	bx	lr

0800b500 <_fini>:
 800b500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b502:	bf00      	nop
 800b504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b506:	bc08      	pop	{r3}
 800b508:	469e      	mov	lr, r3
 800b50a:	4770      	bx	lr
